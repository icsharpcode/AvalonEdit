<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ICSharpCode.AvalonEdit</name>
    </assembly>
    <members>
        <member name="T:ICSharpCode.AvalonEdit.AvalonEditCommands">
            <summary>
            Custom commands for AvalonEdit.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ToggleOverstrike">
            <summary>
            Toggles Overstrike mode
            The default shortcut is Ins.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.DeleteLine">
            <summary>
            Deletes the current line.
            The default shortcut is Ctrl+D.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.RemoveLeadingWhitespace">
            <summary>
            Removes leading whitespace from the selected lines (or the whole document if the selection is empty).
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.RemoveTrailingWhitespace">
            <summary>
            Removes trailing whitespace from the selected lines (or the whole document if the selection is empty).
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ConvertToUppercase">
            <summary>
            Converts the selected text to upper case.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ConvertToLowercase">
            <summary>
            Converts the selected text to lower case.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ConvertToTitleCase">
            <summary>
            Converts the selected text to title case.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.InvertCase">
            <summary>
            Inverts the case of the selected text.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ConvertTabsToSpaces">
            <summary>
            Converts tabs to spaces in the selected text.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ConvertSpacesToTabs">
            <summary>
            Converts spaces to tabs in the selected text.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ConvertLeadingTabsToSpaces">
            <summary>
            Converts leading tabs to spaces in the selected lines (or the whole document if the selection is empty).
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.ConvertLeadingSpacesToTabs">
            <summary>
            Converts leading spaces to tabs in the selected lines (or the whole document if the selection is empty).
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.AvalonEditCommands.IndentSelection">
            <summary>
            Runs the IIndentationStrategy on the selected lines (or the whole document if the selection is empty).
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList">
            <summary>
            The listbox used inside the CompletionWindow, contains CompletionListBox.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.IsFiltering">
            <summary>
            If true, the CompletionList is filtered to show only matching items. Also enables search by substring.
            If false, enables the old behavior: no filtering, search by string.StartsWith.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.EmptyTemplateProperty">
            <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.EmptyTemplate" />.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.EmptyTemplate">
            <summary>
            Content of EmptyTemplate will be shown when CompletionList contains no items.
            If EmptyTemplate is null, nothing will be shown.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.InsertionRequested">
            <summary>
            Is raised when the completion list indicates that the user has chosen
            an entry to be completed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.RequestInsertion(System.EventArgs)">
            <summary>
            Raises the InsertionRequested event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.ListBox">
            <summary>
            Gets the list box.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.ScrollViewer">
            <summary>
            Gets the scroll viewer used in this list box.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.CompletionData">
            <summary>
            Gets the list to which completion data can be added.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.HandleKey(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles a key press. Used to let the completion list handle key presses while the
            focus is still on the text editor.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.SelectedItem">
            <summary>
            Gets/Sets the selected item.
            </summary>
            <remarks>
            The setter of this property does not scroll to the selected item.
            You might want to also call <see cref="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.ScrollIntoView(ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData)"/>.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.ScrollIntoView(ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData)">
            <summary>
            Scrolls the specified item into view.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.SelectionChanged">
            <summary>
            Occurs when the SelectedItem property changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.SelectItem(System.String)">
            <summary>
            Selects the best match, and filter the items if turned on using <see cref="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.IsFiltering" />.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.SelectItemFiltering(System.String)">
            <summary>
            Filters CompletionList items to show only those matching given query, and selects the best match.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList.SelectItemWithStart(System.String)">
            <summary>
            Selects the item that starts with the specified query.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox">
            <summary>
            The list box used inside the CompletionList.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.FirstVisibleItem">
            <summary>
            Gets the number of the first visible item.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.VisibleItemCount">
            <summary>
            Gets the number of visible items.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.ClearSelection">
            <summary>
            Removes the selection.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.SelectIndex(System.Int32)">
            <summary>
            Selects the item with the specified index and scrolls it into view.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionListBox.CenterViewOn(System.Int32)">
            <summary>
            Centers the view on the item with the specified index.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow">
            <summary>
            The code completion window.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.CompletionList">
            <summary>
            Gets the completion list used in this completion window.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Creates a new code completion window.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.DetachEvents">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.OnClosed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.CloseAutomatically">
            <summary>
            Gets/Sets whether the completion window should close automatically.
            The default value is true.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.CloseOnFocusLost">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindow.CloseWhenCaretAtBeginning">
            <summary>
            When this flag is set, code completion closes if the caret moves to the
            beginning of the allowed range. This is useful in Ctrl+Space and "complete when typing",
            but not in dot-completion.
            Has no effect if CloseAutomatically is false.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase">
            <summary>
            Base class for completion windows. Handles positioning the window at the caret.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.TextArea">
            <summary>
            Gets the parent TextArea.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.StartOffset">
            <summary>
            Gets/Sets the start of the text range in which the completion window stays open.
            This text portion is used to determine the text used to select an entry in the completion list by typing.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.EndOffset">
            <summary>
            Gets/Sets the end of the text range in which the completion window stays open.
            This text portion is used to determine the text used to select an entry in the completion list by typing.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.IsUp">
            <summary>
            Gets whether the window was opened above the current line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Creates a new CompletionWindowBase.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.DetachEvents">
            <summary>
            Detaches events from the text area.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.InputHandler">
            <summary>
            A dummy input handler (that justs invokes the default input handler).
            This is used to ensure the completion window closes when any other input handler
            becomes active.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.OnDeactivated(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.RaiseEventPair(System.Windows.UIElement,System.Windows.RoutedEvent,System.Windows.RoutedEvent,System.Windows.RoutedEventArgs)">
            <summary>
            Raises a tunnel/bubble event pair for a WPF control.
            </summary>
            <param name="target">The WPF control for which the event should be raised.</param>
            <param name="previewEvent">The tunneling event.</param>
            <param name="event">The bubbling event.</param>
            <param name="args">The event args to use.</param>
            <returns>The <see cref="P:System.Windows.RoutedEventArgs.Handled"/> value of the event args.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.ActivateParentWindow">
            <summary>
            Activates the parent window.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.CloseOnFocusLost">
            <summary>
            Gets whether the completion window should automatically close when the text editor looses focus.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.OnSourceInitialized(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.OnClosed(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.SetPosition(ICSharpCode.AvalonEdit.TextViewPosition)">
            <summary>
            Positions the completion window at the specified position.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.UpdatePosition">
            <summary>
            Updates the position of the CompletionWindow based on the parent TextView position and the screen working area.
            It ensures that the CompletionWindow is completely visible on the screen.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.CompletionWindowBase.ExpectInsertionBeforeStart">
            <summary>
            Gets/sets whether the completion window should expect text insertion at the start offset,
            which not go into the completion region, but before it.
            </summary>
            <remarks>This property allows only a single insertion, it is reset to false
            when that insertion has occurred.</remarks>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData">
            <summary>
            Describes an entry in the <see cref="T:ICSharpCode.AvalonEdit.CodeCompletion.CompletionList"/>.
            </summary>
            <remarks>
            Note that the CompletionList uses WPF data binding against the properties in this interface.
            Thus, your implementation of the interface must use public properties; not explicit interface implementation.
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Image">
            <summary>
            Gets the image.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Text">
            <summary>
            Gets the text. This property is used to filter the list of visible elements.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Content">
            <summary>
            The displayed content. This can be the same as 'Text', or a WPF UIElement if
            you want to display rich content.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Priority">
            <summary>
            Gets the priority. This property is used in the selection logic. You can use it to prefer selecting those items
            which the user is accessing most frequently.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.ICompletionData.Complete(ICSharpCode.AvalonEdit.Editing.TextArea,ICSharpCode.AvalonEdit.Document.ISegment,System.EventArgs)">
            <summary>
            Perform the completion.
            </summary>
            <param name="textArea">The text area on which completion is performed.</param>
            <param name="completionSegment">The text segment that was used by the completion window if
            the user types (segment between CompletionWindow.StartOffset and CompletionWindow.EndOffset).</param>
            <param name="insertionRequestEventArgs">The EventArgs used for the insertion request.
            These can be TextCompositionEventArgs, KeyEventArgs, MouseEventArgs, depending on how
            the insertion was triggered.</param>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.InsightWindow">
            <summary>
            A popup-like window that is attached to a text segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.InsightWindow.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Creates a new InsightWindow.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.InsightWindow.OnSourceInitialized(System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.InsightWindow.CloseAutomatically">
            <summary>
            Gets/Sets whether the insight window should close automatically.
            The default value is true.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.InsightWindow.CloseOnFocusLost">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.InsightWindow.DetachEvents">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.InsightWindowTemplateSelector">
            <summary>
            TemplateSelector for InsightWindow to replace plain string content by a TextBlock with TextWrapping.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.IOverloadProvider">
            <summary>
            Provides the items for the OverloadViewer.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.IOverloadProvider.SelectedIndex">
            <summary>
            Gets/Sets the selected index.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.IOverloadProvider.Count">
            <summary>
            Gets the number of overloads.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.IOverloadProvider.CurrentIndexText">
            <summary>
            Gets the text 'SelectedIndex of Count'.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.IOverloadProvider.CurrentHeader">
            <summary>
            Gets the current header.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.IOverloadProvider.CurrentContent">
            <summary>
            Gets the current content.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.OverloadInsightWindow">
            <summary>
            Insight window that shows an OverloadViewer.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.OverloadInsightWindow.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Creates a new OverloadInsightWindow.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.OverloadInsightWindow.Provider">
            <summary>
            Gets/Sets the item provider.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.OverloadInsightWindow.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer">
            <summary>
            Represents a text between "Up" and "Down" buttons.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer.TextProperty">
            <summary>
            The text property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer.Text">
            <summary>
            Gets/Sets the text between the Up and Down buttons.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer.ProviderProperty">
            <summary>
            The ItemProvider property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer.Provider">
            <summary>
            Gets/Sets the item provider.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.CodeCompletion.OverloadViewer.ChangeIndex(System.Int32)">
            <summary>
            Changes the selected index.
            </summary>
            <param name="relativeIndexChange">The relative index change - usual values are +1 or -1.</param>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs">
            <summary>
            Describes a change of the document text.
            This class is thread-safe.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.OffsetChangeMap">
            <summary>
            Gets the OffsetChangeMap associated with this document change.
            </summary>
            <remarks>The OffsetChangeMap instance is guaranteed to be frozen and thus thread-safe.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.OffsetChangeMapOrNull">
            <summary>
            Gets the OffsetChangeMap, or null if the default offset map (=single replacement) is being used.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.GetNewOffset(System.Int32,ICSharpCode.AvalonEdit.Document.AnchorMovementType)">
            <summary>
            Gets the new offset where the specified offset moves after this document change.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new DocumentChangeEventArgs object.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.#ctor(System.Int32,System.String,System.String,ICSharpCode.AvalonEdit.Document.OffsetChangeMap)">
            <summary>
            Creates a new DocumentChangeEventArgs object.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.#ctor(System.Int32,ICSharpCode.AvalonEdit.Document.ITextSource,ICSharpCode.AvalonEdit.Document.ITextSource,ICSharpCode.AvalonEdit.Document.OffsetChangeMap)">
            <summary>
            Creates a new DocumentChangeEventArgs object.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs.Invert">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.DocumentChangeOperation">
            <summary>
            Describes a change to a TextDocument.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.DocumentLine">
            <summary>
            Represents a line inside a <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocument"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.Lines"/> collection contains one DocumentLine instance
            for every line in the document. This collection is read-only to user code and is automatically
            updated to reflect the current document content.
            </para>
            <para>
            Internally, the DocumentLine instances are arranged in a binary tree that allows for both efficient updates and lookup.
            Converting between offset and line number is possible in O(lg N) time,
            and the data structure also updates all offsets in O(lg N) whenever a line is inserted or removed.
            </para>
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.IsDeleted">
            <summary>
            Gets if this line was deleted from the document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.LineNumber">
            <summary>
            Gets the number of this line.
            Runtime: O(log n)
            </summary>
            <exception cref="T:System.InvalidOperationException">The line was deleted.</exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.Offset">
            <summary>
            Gets the starting offset of the line in the document's text.
            Runtime: O(log n)
            </summary>
            <exception cref="T:System.InvalidOperationException">The line was deleted.</exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.EndOffset">
            <summary>
            Gets the end offset of the line in the document's text (the offset before the line delimiter).
            Runtime: O(log n)
            </summary>
            <exception cref="T:System.InvalidOperationException">The line was deleted.</exception>
            <remarks>EndOffset = <see cref="P:ICSharpCode.AvalonEdit.Document.DocumentLine.Offset"/> + <see cref="P:ICSharpCode.AvalonEdit.Document.DocumentLine.Length"/>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.Length">
            <summary>
            Gets the length of this line. The length does not include the line delimiter. O(1)
            </summary>
            <remarks>This property is still available even if the line was deleted;
            in that case, it contains the line's length before the deletion.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.TotalLength">
            <summary>
            Gets the length of this line, including the line delimiter. O(1)
            </summary>
            <remarks>This property is still available even if the line was deleted;
            in that case, it contains the line's length before the deletion.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.DelimiterLength">
            <summary>
            <para>Gets the length of the line delimiter.</para>
            <para>The value is 1 for single <c>"\r"</c> or <c>"\n"</c>, 2 for the <c>"\r\n"</c> sequence;
            and 0 for the last line in the document.</para>
            </summary>
            <remarks>This property is still available even if the line was deleted;
            in that case, it contains the line delimiter's length before the deletion.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.NextLine">
            <summary>
            Gets the next line in the document.
            </summary>
            <returns>The line following this line, or null if this is the last line.</returns>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentLine.PreviousLine">
            <summary>
            Gets the previous line in the document.
            </summary>
            <returns>The line before this line, or null if this is the first line.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentLine.ToString">
            <summary>
            Gets a string with debug output showing the line number and offset.
            Does not include the line's text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentLine.ResetLine">
            <summary>
            Resets the line to enable its reuse after a document rebuild.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.DocumentLine.nodeTotalCount">
            <summary>
            The number of lines in this node and its child nodes.
            Invariant:
              nodeTotalCount = 1 + left.nodeTotalCount + right.nodeTotalCount
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.DocumentLine.nodeTotalLength">
            <summary>
            The total text length of this node and its child nodes.
            Invariant:
              nodeTotalLength = left.nodeTotalLength + documentLine.TotalLength + right.nodeTotalLength
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.DocumentLineTree">
            <summary>
            Data structure for efficient management of the document lines (most operations are O(lg n)).
            This implements an augmented red-black tree.
            See <see cref="T:ICSharpCode.AvalonEdit.Document.DocumentLine"/> for the augmented data.
            
            NOTE: The tree is never empty, initially it contains an empty line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentLineTree.RebuildTree(System.Collections.Generic.List{ICSharpCode.AvalonEdit.Document.DocumentLine})">
            <summary>
            Rebuild the tree, in O(n).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentLineTree.BuildTree(ICSharpCode.AvalonEdit.Document.DocumentLine[],System.Int32,System.Int32,System.Int32)">
            <summary>
            build a tree from a list of nodes
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.DocumentTextWriter">
            <summary>
            A TextWriter implementation that directly inserts into a document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentTextWriter.#ctor(ICSharpCode.AvalonEdit.Document.IDocument,System.Int32)">
            <summary>
            Creates a new DocumentTextWriter that inserts into document, starting at insertionOffset.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentTextWriter.InsertionOffset">
            <summary>
            Gets/Sets the current insertion offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentTextWriter.Write(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.DocumentTextWriter.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.DocumentTextWriter.Encoding">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.IDocument">
            <summary>
            A document representing a source code file for refactoring.
            Line and column counting starts at 1.
            Offset counting starts at 0.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.IDocument.Text">
            <summary>
            Gets/Sets the text of the whole document..
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.IDocument.TextChanging">
            <summary>
            This event is called directly before a change is applied to the document.
            </summary>
            <remarks>
            It is invalid to modify the document within this event handler.
            Aborting the change (by throwing an exception) is likely to cause corruption of data structures
            that listen to the Changing and Changed events.
            </remarks>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.IDocument.TextChanged">
            <summary>
            This event is called directly after a change is applied to the document.
            </summary>
            <remarks>
            It is invalid to modify the document within this event handler.
            Aborting the event handler (by throwing an exception) is likely to cause corruption of data structures
            that listen to the Changing and Changed events.
            </remarks>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.IDocument.ChangeCompleted">
            <summary>
            This event is called after a group of changes is completed.
            </summary>
            <seealso cref="M:ICSharpCode.AvalonEdit.Document.IDocument.EndUndoableAction"/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.IDocument.LineCount">
            <summary>
            Gets the number of lines in the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.GetLineByNumber(System.Int32)">
            <summary>
            Gets the document line with the specified number.
            </summary>
            <param name="lineNumber">The number of the line to retrieve. The first line has number 1.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.GetLineByOffset(System.Int32)">
            <summary>
            Gets the document line that contains the specified offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.GetOffset(System.Int32,System.Int32)">
            <summary>
            Gets the offset from a text location.
            </summary>
            <seealso cref="M:ICSharpCode.AvalonEdit.Document.IDocument.GetLocation(System.Int32)"/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.GetOffset(ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Gets the offset from a text location.
            </summary>
            <seealso cref="M:ICSharpCode.AvalonEdit.Document.IDocument.GetLocation(System.Int32)"/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.GetLocation(System.Int32)">
            <summary>
            Gets the location from an offset.
            </summary>
            <seealso cref="M:ICSharpCode.AvalonEdit.Document.IDocument.GetOffset(ICSharpCode.AvalonEdit.Document.TextLocation)"/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.Insert(System.Int32,System.String)">
            <summary>
            Inserts text.
            </summary>
            <param name="offset">The offset at which the text is inserted.</param>
            <param name="text">The new text.</param>
            <remarks>
            Anchors positioned exactly at the insertion offset will move according to their movement type.
            For AnchorMovementType.Default, they will move behind the inserted text.
            The caret will also move behind the inserted text.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.Insert(System.Int32,ICSharpCode.AvalonEdit.Document.ITextSource)">
            <summary>
            Inserts text.
            </summary>
            <param name="offset">The offset at which the text is inserted.</param>
            <param name="text">The new text.</param>
            <remarks>
            Anchors positioned exactly at the insertion offset will move according to their movement type.
            For AnchorMovementType.Default, they will move behind the inserted text.
            The caret will also move behind the inserted text.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.Insert(System.Int32,System.String,ICSharpCode.AvalonEdit.Document.AnchorMovementType)">
            <summary>
            Inserts text.
            </summary>
            <param name="offset">The offset at which the text is inserted.</param>
            <param name="text">The new text.</param>
            <param name="defaultAnchorMovementType">
            Anchors positioned exactly at the insertion offset will move according to the anchor's movement type.
            For AnchorMovementType.Default, they will move according to the movement type specified by this parameter.
            The caret will also move according to the <paramref name="defaultAnchorMovementType"/> parameter.
            </param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.Insert(System.Int32,ICSharpCode.AvalonEdit.Document.ITextSource,ICSharpCode.AvalonEdit.Document.AnchorMovementType)">
            <summary>
            Inserts text.
            </summary>
            <param name="offset">The offset at which the text is inserted.</param>
            <param name="text">The new text.</param>
            <param name="defaultAnchorMovementType">
            Anchors positioned exactly at the insertion offset will move according to the anchor's movement type.
            For AnchorMovementType.Default, they will move according to the movement type specified by this parameter.
            The caret will also move according to the <paramref name="defaultAnchorMovementType"/> parameter.
            </param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.Remove(System.Int32,System.Int32)">
            <summary>
            Removes text.
            </summary>
            <param name="offset">Starting offset of the text to be removed.</param>
            <param name="length">Length of the text to be removed.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            Replaces text.
            </summary>
            <param name="offset">The starting offset of the text to be replaced.</param>
            <param name="length">The length of the text to be replaced.</param>
            <param name="newText">The new text.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.Replace(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Document.ITextSource)">
            <summary>
            Replaces text.
            </summary>
            <param name="offset">The starting offset of the text to be replaced.</param>
            <param name="length">The length of the text to be replaced.</param>
            <param name="newText">The new text.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.StartUndoableAction">
            <summary>
            Make the document combine the following actions into a single
            action for undo purposes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.EndUndoableAction">
            <summary>
            Ends the undoable action started with <see cref="M:ICSharpCode.AvalonEdit.Document.IDocument.StartUndoableAction"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.OpenUndoGroup">
            <summary>
            Creates an undo group. Dispose the returned value to close the undo group.
            </summary>
            <returns>An object that closes the undo group when Dispose() is called.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IDocument.CreateAnchor(System.Int32)">
            <summary>
            Creates a new <see cref="T:ICSharpCode.AvalonEdit.Document.ITextAnchor"/> at the specified offset.
            </summary>
            <inheritdoc cref="T:ICSharpCode.AvalonEdit.Document.ITextAnchor" select="remarks|example"/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.IDocument.FileName">
            <summary>
            Gets the name of the file the document is stored in.
            Could also be a non-existent dummy file name or null if no name has been set.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.IDocument.FileNameChanged">
            <summary>
            Fired when the file name of the document changes.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.IDocumentLine">
            <summary>
            A line inside a <see cref="T:ICSharpCode.AvalonEdit.Document.IDocument"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.IDocumentLine.TotalLength">
            <summary>
            Gets the length of this line, including the line delimiter.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.IDocumentLine.DelimiterLength">
            <summary>
            Gets the length of the line terminator.
            Returns 1 or 2; or 0 at the end of the document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.IDocumentLine.LineNumber">
            <summary>
            Gets the number of this line.
            The first line has the number 1.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.IDocumentLine.PreviousLine">
            <summary>
            Gets the previous line. Returns null if this is the first line in the document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.IDocumentLine.NextLine">
            <summary>
            Gets the next line. Returns null if this is the last line in the document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.IDocumentLine.IsDeleted">
            <summary>
            Gets whether the line was deleted.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextChangeEventArgs">
            <summary>
            Describes a change of the document text.
            This class is thread-safe.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextChangeEventArgs.Offset">
            <summary>
            The offset at which the change occurs.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextChangeEventArgs.RemovedText">
            <summary>
            The text that was removed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextChangeEventArgs.RemovalLength">
            <summary>
            The number of characters removed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextChangeEventArgs.InsertedText">
            <summary>
            The text that was inserted.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextChangeEventArgs.InsertionLength">
            <summary>
            The number of characters inserted.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextChangeEventArgs.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new TextChangeEventArgs object.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextChangeEventArgs.#ctor(System.Int32,ICSharpCode.AvalonEdit.Document.ITextSource,ICSharpCode.AvalonEdit.Document.ITextSource)">
            <summary>
            Creates a new TextChangeEventArgs object.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextChangeEventArgs.GetNewOffset(System.Int32,ICSharpCode.AvalonEdit.Document.AnchorMovementType)">
            <summary>
            Gets the new offset where the specified offset moves after this document change.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextChangeEventArgs.Invert">
            <summary>
            Creates TextChangeEventArgs for the reverse change.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.ILineTracker">
            <summary>
            Allows for low-level line tracking.
            </summary>
            <remarks>
            The methods on this interface are called by the TextDocument's LineManager immediately after the document
            has changed, *while* the DocumentLineTree is updating.
            Thus, the DocumentLineTree may be in an invalid state when these methods are called.
            This interface should only be used to update per-line data structures like the HeightTree.
            Line trackers must not cause any events to be raised during an update to prevent other code from seeing
            the invalid state.
            Line trackers may be called while the TextDocument has taken a lock.
            You must be careful not to dead-lock inside ILineTracker callbacks.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ILineTracker.BeforeRemoveLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Is called immediately before a document line is removed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ILineTracker.SetLineLength(ICSharpCode.AvalonEdit.Document.DocumentLine,System.Int32)">
            <summary>
            Is called immediately before a document line changes length.
            This method will be called whenever the line is changed, even when the length stays as it is.
            The method might be called multiple times for a single line because
            a replacement is internally handled as removal followed by insertion.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ILineTracker.LineInserted(ICSharpCode.AvalonEdit.Document.DocumentLine,ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Is called immediately after a line was inserted.
            </summary>
            <param name="newLine">The new line</param>
            <param name="insertionPos">The existing line before the new line</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ILineTracker.RebuildDocument">
            <summary>
            Indicates that there were changes to the document that the line tracker was not notified of.
            The document is in a consistent state (but the line trackers aren't), and line trackers should
            throw away their data and rebuild the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ILineTracker.ChangeComplete(ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs)">
            <summary>
            Notifies the line tracker that a document change (a single change, not a change group) has completed.
            This method gets called after the change has been performed, but before the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changed"/> event
            is raised.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.ITextAnchor">
            <summary>
            The TextAnchor class references an offset (a position between two characters).
            It automatically updates the offset when text is inserted/removed in front of the anchor.
            </summary>
            <remarks>
            <para>Use the <see cref="P:ICSharpCode.AvalonEdit.Document.ITextAnchor.Offset"/> property to get the offset from a text anchor.
            Use the <see cref="M:ICSharpCode.AvalonEdit.Document.IDocument.CreateAnchor(System.Int32)"/> method to create an anchor from an offset.
            </para>
            <para>
            The document will automatically update all text anchors; and because it uses weak references to do so,
            the garbage collector can simply collect the anchor object when you don't need it anymore.
            </para>
            <para>Moreover, the document is able to efficiently update a large number of anchors without having to look
            at each anchor object individually. Updating the offsets of all anchors usually only takes time logarithmic
            to the number of anchors. Retrieving the <see cref="P:ICSharpCode.AvalonEdit.Document.ITextAnchor.Offset"/> property also runs in O(lg N).</para>
            </remarks>
            <example>
            Usage:
            <code>TextAnchor anchor = document.CreateAnchor(offset);
            ChangeMyDocument();
            int newOffset = anchor.Offset;
            </code>
            </example>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ITextAnchor.Location">
            <summary>
            Gets the text location of this anchor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ITextAnchor.Offset">
            <summary>
            Gets the offset of the text anchor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ITextAnchor.MovementType">
            <summary>
            Controls how the anchor moves.
            </summary>
            <remarks>Anchor movement is ambiguous if text is inserted exactly at the anchor's location.
            Does the anchor stay before the inserted text, or does it move after it?
            The property <see cref="P:ICSharpCode.AvalonEdit.Document.ITextAnchor.MovementType"/> will be used to determine which of these two options the anchor will choose.
            The default value is <see cref="F:ICSharpCode.AvalonEdit.Document.AnchorMovementType.Default"/>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ITextAnchor.SurviveDeletion">
            <summary>
            <para>
            Specifies whether the anchor survives deletion of the text containing it.
            </para><para>
            <c>false</c>: The anchor is deleted when the a selection that includes the anchor is deleted.
            <c>true</c>: The anchor is not deleted.
            </para>
            </summary>
            <remarks><inheritdoc cref="P:ICSharpCode.AvalonEdit.Document.ITextAnchor.IsDeleted" /></remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ITextAnchor.IsDeleted">
            <summary>
            Gets whether the anchor was deleted.
            </summary>
            <remarks>
            <para>When a piece of text containing an anchor is removed, then that anchor will be deleted.
            First, the <see cref="P:ICSharpCode.AvalonEdit.Document.ITextAnchor.IsDeleted"/> property is set to true on all deleted anchors,
            then the <see cref="E:ICSharpCode.AvalonEdit.Document.ITextAnchor.Deleted"/> events are raised.
            You cannot retrieve the offset from an anchor that has been deleted.</para>
            <para>This deletion behavior might be useful when using anchors for building a bookmark feature,
            but in other cases you want to still be able to use the anchor. For those cases, set <c><see cref="P:ICSharpCode.AvalonEdit.Document.ITextAnchor.SurviveDeletion"/> = true</c>.</para>
            </remarks>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.ITextAnchor.Deleted">
            <summary>
            Occurs after the anchor was deleted.
            </summary>
            <remarks>
            <inheritdoc cref="P:ICSharpCode.AvalonEdit.Document.ITextAnchor.IsDeleted" />
            <para>Due to the 'weak reference' nature of text anchors, you will receive
            the Deleted event only while your code holds a reference to the TextAnchor object.
            </para>
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ITextAnchor.Line">
            <summary>
            Gets the line number of the anchor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ITextAnchor.Column">
            <summary>
            Gets the column number of this anchor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.AnchorMovementType">
            <summary>
            Defines how a text anchor moves.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.AnchorMovementType.Default">
            <summary>
            When text is inserted at the anchor position, the type of the insertion
            determines where the caret moves to. For normal insertions, the anchor will move
            after the inserted text.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.AnchorMovementType.BeforeInsertion">
            <summary>
            Behaves like a start marker - when text is inserted at the anchor position, the anchor will stay
            before the inserted text.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.AnchorMovementType.AfterInsertion">
            <summary>
            Behave like an end marker - when text is insered at the anchor position, the anchor will move
            after the inserted text.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.ITextSource">
            <summary>
            A read-only view on a (potentially mutable) text source.
            The IDocument interface derives from this interface.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ITextSource.Version">
            <summary>
            Gets a version identifier for this text source.
            Returns null for unversioned text sources.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.CreateSnapshot">
            <summary>
            Creates an immutable snapshot of this text source.
            Unlike all other methods in this interface, this method is thread-safe.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.CreateSnapshot(System.Int32,System.Int32)">
            <summary>
            Creates an immutable snapshot of a part of this text source.
            Unlike all other methods in this interface, this method is thread-safe.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.CreateReader">
            <summary>
            Creates a new TextReader to read from this text source.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.CreateReader(System.Int32,System.Int32)">
            <summary>
            Creates a new TextReader to read from this text source.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ITextSource.TextLength">
            <summary>
            Gets the total text length.
            </summary>
            <returns>The length of the text, in characters.</returns>
            <remarks>This is the same as Text.Length, but is more efficient because
             it doesn't require creating a String object.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ITextSource.Text">
            <summary>
            Gets the whole text as string.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.GetCharAt(System.Int32)">
            <summary>
            Gets a character at the specified position in the document.
            </summary>
            <paramref name="offset">The index of the character to get.</paramref>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset is outside the valid range (0 to TextLength-1).</exception>
            <returns>The character at the specified position.</returns>
            <remarks>This is the same as Text[offset], but is more efficient because
             it doesn't require creating a String object.</remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.GetText(System.Int32,System.Int32)">
            <summary>
            Retrieves the text for a portion of the document.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
            <remarks>This is the same as Text.Substring, but is more efficient because
             it doesn't require creating a String object for the whole document.</remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.GetText(ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Retrieves the text for a portion of the document.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.WriteTextTo(System.IO.TextWriter)">
            <summary>
            Writes the text from this document into the TextWriter.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.WriteTextTo(System.IO.TextWriter,System.Int32,System.Int32)">
            <summary>
            Writes the text from this document into the TextWriter.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.IndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            Gets the index of the first occurrence of the character in the specified array.
            </summary>
            <param name="c">Character to search for</param>
            <param name="startIndex">Start index of the area to search.</param>
            <param name="count">Length of the area to search.</param>
            <returns>The first index where the character was found; or -1 if no occurrence was found.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets the index of the first occurrence of any character in the specified array.
            </summary>
            <param name="anyOf">Characters to search for</param>
            <param name="startIndex">Start index of the area to search.</param>
            <param name="count">Length of the area to search.</param>
            <returns>The first index where any character was found; or -1 if no occurrence was found.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Gets the index of the first occurrence of the specified search text in this text source.
            </summary>
            <param name="searchText">The search text</param>
            <param name="startIndex">Start index of the area to search.</param>
            <param name="count">Length of the area to search.</param>
            <param name="comparisonType">String comparison to use.</param>
            <returns>The first index where the search term was found; or -1 if no occurrence was found.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.LastIndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            Gets the index of the last occurrence of the specified character in this text source.
            </summary>
            <param name="c">The search character</param>
            <param name="startIndex">Start index of the area to search.</param>
            <param name="count">Length of the area to search.</param>
            <returns>The last index where the search term was found; or -1 if no occurrence was found.</returns>
            <remarks>The search proceeds backwards from (startIndex+count) to startIndex.
            This is different than the meaning of the parameters on string.LastIndexOf!</remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSource.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Gets the index of the last occurrence of the specified search text in this text source.
            </summary>
            <param name="searchText">The search text</param>
            <param name="startIndex">Start index of the area to search.</param>
            <param name="count">Length of the area to search.</param>
            <param name="comparisonType">String comparison to use.</param>
            <returns>The last index where the search term was found; or -1 if no occurrence was found.</returns>
            <remarks>The search proceeds backwards from (startIndex+count) to startIndex.
            This is different than the meaning of the parameters on string.LastIndexOf!</remarks>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.ITextSourceVersion">
            <summary>
            Represents a version identifier for a text source.
            </summary>
            <remarks>
            Verions can be used to efficiently detect whether a document has changed and needs reparsing;
            or even to implement incremental parsers.
            It is a separate class from ITextSource to allow the GC to collect the text source while
            the version checkpoint is still in use.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSourceVersion.BelongsToSameDocumentAs(ICSharpCode.AvalonEdit.Document.ITextSourceVersion)">
            <summary>
            Gets whether this checkpoint belongs to the same document as the other checkpoint.
            </summary>
            <remarks>
            Returns false when given <c>null</c>.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSourceVersion.CompareAge(ICSharpCode.AvalonEdit.Document.ITextSourceVersion)">
            <summary>
            Compares the age of this checkpoint to the other checkpoint.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <exception cref="T:System.ArgumentException">Raised if 'other' belongs to a different document than this version.</exception>
            <returns>-1 if this version is older than <paramref name="other"/>.
            0 if <c>this</c> version instance represents the same version as <paramref name="other"/>.
            1 if this version is newer than <paramref name="other"/>.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSourceVersion.GetChangesTo(ICSharpCode.AvalonEdit.Document.ITextSourceVersion)">
            <summary>
            Gets the changes from this checkpoint to the other checkpoint.
            If 'other' is older than this checkpoint, reverse changes are calculated.
            </summary>
            <remarks>This method is thread-safe.</remarks>
            <exception cref="T:System.ArgumentException">Raised if 'other' belongs to a different document than this checkpoint.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ITextSourceVersion.MoveOffsetTo(ICSharpCode.AvalonEdit.Document.ITextSourceVersion,System.Int32,ICSharpCode.AvalonEdit.Document.AnchorMovementType)">
            <summary>
            Calculates where the offset has moved in the other buffer version.
            </summary>
            <exception cref="T:System.ArgumentException">Raised if 'other' belongs to a different document than this checkpoint.</exception>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.StringTextSource">
            <summary>
            Implements the ITextSource interface using a string.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.StringTextSource.Empty">
            <summary>
            Gets a text source containing the empty string.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.#ctor(System.String)">
            <summary>
            Creates a new StringTextSource with the given text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.#ctor(System.String,ICSharpCode.AvalonEdit.Document.ITextSourceVersion)">
            <summary>
            Creates a new StringTextSource with the given text.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.StringTextSource.Version">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.StringTextSource.TextLength">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.StringTextSource.Text">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.CreateSnapshot">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.CreateSnapshot(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.CreateReader">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.CreateReader(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.WriteTextTo(System.IO.TextWriter)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.WriteTextTo(System.IO.TextWriter,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.GetCharAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.GetText(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.GetText(ICSharpCode.AvalonEdit.Document.ISegment)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.IndexOf(System.Char,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.LastIndexOf(System.Char,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.StringTextSource.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.IUndoableOperation">
            <summary>
            This Interface describes a the basic Undo/Redo operation
            all Undo Operations must implement this interface.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IUndoableOperation.Undo">
            <summary>
            Undo the last operation
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.IUndoableOperation.Redo">
            <summary>
            Redo the last operation
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.LineManager">
            <summary>
            Creates/Deletes lines when text is inserted/removed.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.LineManager.lineTrackers">
            <summary>
            A copy of the line trackers. We need a copy so that line trackers may remove themselves
            while being notified (used e.g. by WeakLineTracker)
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.LineManager.SetLineLength(ICSharpCode.AvalonEdit.Document.DocumentLine,System.Int32)">
            <summary>
            Sets the total line length and checks the delimiter.
            This method can cause line to be deleted when it contains a single '\n' character
            and the previous line ends with '\r'.
            </summary>
            <returns>Usually returns <paramref name="line"/>, but if line was deleted due to
            the "\r\n" merge, returns the previous line.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.NewLineFinder.NextNewLine(System.String,System.Int32)">
            <summary>
            Gets the location of the next new line character, or SimpleSegment.Invalid
            if none is found.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.NewLineFinder.NextNewLine(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32)">
            <summary>
            Gets the location of the next new line character, or SimpleSegment.Invalid
            if none is found.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextUtilities">
            <summary>
            Static helper methods for working with text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.FindNextNewLine(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32,System.String@)">
            <summary>
            Finds the next new line character starting at offset.
            </summary>
            <param name="text">The text source to search in.</param>
            <param name="offset">The starting offset for the search.</param>
            <param name="newLineType">The string representing the new line that was found, or null if no new line was found.</param>
            <returns>The position of the first new line starting at or after <paramref name="offset"/>,
            or -1 if no new line was found.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.IsNewLine(System.String)">
            <summary>
            Gets whether the specified string is a newline sequence.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.NormalizeNewLines(System.String,System.String)">
            <summary>
            Normalizes all new lines in <paramref name="input"/> to be <paramref name="newLine"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetNewLineFromDocument(ICSharpCode.AvalonEdit.Document.IDocument,System.Int32)">
            <summary>
            Gets the newline sequence used in the document at the specified line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetControlCharacterName(System.Char)">
            <summary>
            Gets the name of the control character.
            For unknown characters, the unicode codepoint is returned as 4-digit hexadecimal value.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetWhitespaceAfter(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32)">
            <summary>
            Gets all whitespace (' ' and '\t', but no newlines) after offset.
            </summary>
            <param name="textSource">The text source.</param>
            <param name="offset">The offset where the whitespace starts.</param>
            <returns>The segment containing the whitespace.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetWhitespaceBefore(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32)">
            <summary>
            Gets all whitespace (' ' and '\t', but no newlines) before offset.
            </summary>
            <param name="textSource">The text source.</param>
            <param name="offset">The offset where the whitespace ends.</param>
            <returns>The segment containing the whitespace.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetLeadingWhitespace(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Gets the leading whitespace segment on the document line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetTrailingWhitespace(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Gets the trailing whitespace segment on the document line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetSingleIndentationSegment(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32,System.Int32)">
            <summary>
            Gets a single indentation segment starting at <paramref name="offset"/> - at most one tab
            or <paramref name="indentationSize"/> spaces.
            </summary>
            <param name="textSource">The text source.</param>
            <param name="offset">The offset where the indentation segment starts.</param>
            <param name="indentationSize">The size of an indentation unit. See <see cref="P:ICSharpCode.AvalonEdit.TextEditorOptions.IndentationSize"/>.</param>
            <returns>The indentation segment.
            If there is no indentation character at the specified <paramref name="offset"/>,
            an empty segment is returned.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetCharacterClass(System.Char)">
            <summary>
            Gets whether the character is whitespace, part of an identifier, or line terminator.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextUtilities.GetNextCaretPosition(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32,System.Windows.Documents.LogicalDirection,ICSharpCode.AvalonEdit.Document.CaretPositioningMode)">
            <summary>
            Gets the next caret position.
            </summary>
            <param name="textSource">The text source.</param>
            <param name="offset">The start offset inside the text source.</param>
            <param name="direction">The search direction (forwards or backwards).</param>
            <param name="mode">The mode for caret positioning.</param>
            <returns>The offset of the next caret position, or -1 if there is no further caret position
            in the text source.</returns>
            <remarks>
            This method is NOT equivalent to the actual caret movement when using VisualLine.GetNextCaretPosition.
            In real caret movement, there are additional caret stops at line starts and ends. This method
            treats linefeeds as simple whitespace.
            </remarks>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.OffsetChangeMappingType">
            <summary>
            Contains predefined offset change mapping types.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.OffsetChangeMappingType.Normal">
            <summary>
            Normal replace.
            Anchors in front of the replaced region will stay in front, anchors after the replaced region will stay after.
            Anchors in the middle of the removed region will be deleted. If they survive deletion,
            they move depending on their AnchorMovementType.
            </summary>
            <remarks>
            This is the default implementation of DocumentChangeEventArgs when OffsetChangeMap is null,
            so using this option usually works without creating an OffsetChangeMap instance.
            This is equivalent to an OffsetChangeMap with a single entry describing the replace operation.
            </remarks>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.OffsetChangeMappingType.RemoveAndInsert">
            <summary>
            First the old text is removed, then the new text is inserted.
            Anchors immediately in front (or after) the replaced region may move to the other side of the insertion,
            depending on the AnchorMovementType.
            </summary>
            <remarks>
            This is implemented as an OffsetChangeMap with two entries: the removal, and the insertion.
            </remarks>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.OffsetChangeMappingType.CharacterReplace">
            <summary>
            The text is replaced character-by-character.
            Anchors keep their position inside the replaced text.
            Anchors after the replaced region will move accordingly if the replacement text has a different length than the replaced text.
            If the new text is shorter than the old text, anchors inside the old text that would end up behind the replacement text
            will be moved so that they point to the end of the replacement text.
            </summary>
            <remarks>
            On the OffsetChangeMap level, growing text is implemented by replacing the last character in the replaced text
            with itself and the additional text segment. A simple insertion of the additional text would have the undesired
            effect of moving anchors immediately after the replaced text into the replacement text if they used
            AnchorMovementStyle.BeforeInsertion.
            Shrinking text is implemented by removing the text segment that's too long; but in a special mode that
            causes anchors to always survive irrespective of their <see cref="P:ICSharpCode.AvalonEdit.Document.TextAnchor.SurviveDeletion"/> setting.
            If the text keeps its old size, this is implemented as OffsetChangeMap.Empty.
            </remarks>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.OffsetChangeMappingType.KeepAnchorBeforeInsertion">
            <summary>
            Like 'Normal', but anchors with <see cref="P:ICSharpCode.AvalonEdit.Document.TextAnchor.MovementType"/> = Default will stay in front of the
            insertion instead of being moved behind it.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.OffsetChangeMap">
            <summary>
            Describes a series of offset changes.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.Empty">
            <summary>
            Immutable OffsetChangeMap that is empty.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.FromSingleElement(ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
            <summary>
            Creates a new OffsetChangeMap with a single element.
            </summary>
            <param name="entry">The entry.</param>
            <returns>Returns a frozen OffsetChangeMap with a single entry.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.#ctor">
            <summary>
            Creates a new OffsetChangeMap instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.GetNewOffset(System.Int32,ICSharpCode.AvalonEdit.Document.AnchorMovementType)">
            <summary>
            Gets the new offset where the specified offset moves after this document change.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.IsValidForDocumentChange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets whether this OffsetChangeMap is a valid explanation for the specified document change.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.Invert">
            <summary>
            Calculates the inverted OffsetChangeMap (used for the undo operation).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.InsertItem(System.Int32,ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.SetItem(System.Int32,ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.IsFrozen">
            <summary>
            Gets if this instance is frozen. Frozen instances are immutable and thus thread-safe.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.Freeze">
            <summary>
            Freezes this instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry">
            <summary>
            An entry in the OffsetChangeMap.
            This represents the offset of a document change (either insertion or removal, not both at once).
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.Offset">
            <summary>
            The offset at which the change occurs.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.InsertionLength">
            <summary>
            The number of characters inserted.
            Returns 0 if this entry represents a removal.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.RemovalLength">
            <summary>
            The number of characters removed.
            Returns 0 if this entry represents an insertion.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.RemovalNeverCausesAnchorDeletion">
            <summary>
            Gets whether the removal should not cause any anchor deletions.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.DefaultAnchorMovementIsBeforeInsertion">
            <summary>
            Gets whether default anchor movement causes the anchor to stay in front of the caret.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.GetNewOffset(System.Int32,ICSharpCode.AvalonEdit.Document.AnchorMovementType)">
            <summary>
            Gets the new offset where the specified offset moves after this document change.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new OffsetChangeMapEntry instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new OffsetChangeMapEntry instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.Equals(ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.op_Equality(ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry,ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
            <summary>
            Tests the two entries for equality.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry.op_Inequality(ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry,ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
            <summary>
            Tests the two entries for inequality.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.RopeTextSource">
            <summary>
            Implements the ITextSource interface using a rope.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.#ctor(ICSharpCode.AvalonEdit.Utils.Rope{System.Char})">
            <summary>
            Creates a new RopeTextSource.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.#ctor(ICSharpCode.AvalonEdit.Utils.Rope{System.Char},ICSharpCode.AvalonEdit.Document.ITextSourceVersion)">
            <summary>
            Creates a new RopeTextSource.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.GetRope">
            <summary>
            Returns a clone of the rope used for this text source.
            </summary>
            <remarks>
            RopeTextSource only publishes a copy of the contained rope to ensure that the underlying rope cannot be modified.
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.RopeTextSource.Text">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.RopeTextSource.TextLength">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.GetCharAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.GetText(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.GetText(ICSharpCode.AvalonEdit.Document.ISegment)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.CreateReader">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.CreateReader(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.CreateSnapshot">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.CreateSnapshot(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.IndexOf(System.Char,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.LastIndexOf(System.Char,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.RopeTextSource.Version">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.WriteTextTo(System.IO.TextWriter)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.RopeTextSource.WriteTextTo(System.IO.TextWriter,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.SimpleSegment">
            <summary>
            Represents a simple segment (Offset,Length pair) that is not automatically updated
            on document changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.SimpleSegment.GetOverlap(ICSharpCode.AvalonEdit.Document.ISegment,ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Gets the overlapping portion of the segments.
            Returns SimpleSegment.Invalid if the segments don't overlap.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.SimpleSegment.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.AnchorSegment">
            <summary>
            A segment using <see cref="T:ICSharpCode.AvalonEdit.Document.TextAnchor"/>s as start and end positions.
            </summary>
            <remarks>
            <para>
            For the constructors creating new anchors, the start position will be AfterInsertion and the end position will be BeforeInsertion.
            Should the end position move before the start position, the segment will have length 0.
            </para>
            </remarks>
            <seealso cref="T:ICSharpCode.AvalonEdit.Document.ISegment"/>
            <seealso cref="T:ICSharpCode.AvalonEdit.Document.TextSegment"/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.AnchorSegment.Offset">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.AnchorSegment.Length">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.AnchorSegment.EndOffset">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.AnchorSegment.#ctor(ICSharpCode.AvalonEdit.Document.TextAnchor,ICSharpCode.AvalonEdit.Document.TextAnchor)">
            <summary>
            Creates a new AnchorSegment using the specified anchors.
            The anchors must have <see cref="P:ICSharpCode.AvalonEdit.Document.TextAnchor.SurviveDeletion"/> set to true.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.AnchorSegment.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Creates a new AnchorSegment that creates new anchors.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.AnchorSegment.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32,System.Int32)">
            <summary>
            Creates a new AnchorSegment that creates new anchors.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.AnchorSegment.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextAnchor">
            <summary>
            The TextAnchor class references an offset (a position between two characters).
            It automatically updates the offset when text is inserted/removed in front of the anchor.
            </summary>
            <remarks>
            <para>Use the <see cref="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Offset"/> property to get the offset from a text anchor.
            Use the <see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateAnchor(System.Int32)"/> method to create an anchor from an offset.
            </para>
            <para>
            The document will automatically update all text anchors; and because it uses weak references to do so,
            the garbage collector can simply collect the anchor object when you don't need it anymore.
            </para>
            <para>Moreover, the document is able to efficiently update a large number of anchors without having to look
            at each anchor object individually. Updating the offsets of all anchors usually only takes time logarithmic
            to the number of anchors. Retrieving the <see cref="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Offset"/> property also runs in O(lg N).</para>
            <inheritdoc cref="P:ICSharpCode.AvalonEdit.Document.TextAnchor.IsDeleted" />
            <inheritdoc cref="P:ICSharpCode.AvalonEdit.Document.TextAnchor.MovementType" />
            <para>If you want to track a segment, you can use the <see cref="T:ICSharpCode.AvalonEdit.Document.AnchorSegment"/> class which
            implements <see cref="T:ICSharpCode.AvalonEdit.Document.ISegment"/> using two text anchors.</para>
            </remarks>
            <example>
            Usage:
            <code>TextAnchor anchor = document.CreateAnchor(offset);
            ChangeMyDocument();
            int newOffset = anchor.Offset;
            </code>
            </example>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Document">
            <summary>
            Gets the document owning the anchor.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.MovementType">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.SurviveDeletion">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.IsDeleted">
            <inheritdoc/>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextAnchor.Deleted">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Offset">
            <summary>
            Gets the offset of the text anchor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Line">
            <summary>
            Gets the line number of the anchor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Column">
            <summary>
            Gets the column number of this anchor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchor.Location">
            <summary>
            Gets the text location of this anchor.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to get the Offset from a deleted anchor.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextAnchor.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextAnchorNode">
            <summary>
            A TextAnchorNode is placed in the TextAnchorTree.
            It describes a section of text with a text anchor at the end of the section.
            A weak reference is used to refer to the TextAnchor. (to save memory, we derive from WeakReference instead of referencing it)
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchorNode.Successor">
            <summary>
            Gets the inorder successor of the node.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextAnchorNode.Predecessor">
            <summary>
            Gets the inorder predecessor of the node.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextAnchorTree">
            <summary>
            A tree of TextAnchorNodes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextAnchorTree.SwapAnchors(ICSharpCode.AvalonEdit.Document.TextAnchorNode,ICSharpCode.AvalonEdit.Document.TextAnchorNode)">
            <summary>
            Swaps the anchors stored in the two nodes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextAnchorTree.FindNode(System.Int32@)">
            <summary>
            Finds the node at the specified offset.
            After the method has run, offset is relative to the beginning of the returned node.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocument">
            <summary>
            This class is the main class of the text model. Basically, it is a <see cref="T:System.Text.StringBuilder"/> with events.
            </summary>
            <remarks>
            <b>Thread safety:</b>
            <inheritdoc cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.VerifyAccess"/>
            <para>However, there is a single method that is thread-safe: <see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateSnapshot"/> (and its overloads).</para>
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.VerifyAccess">
            <summary>
            Verifies that the current thread is the documents owner thread.
            Throws an <see cref="T:System.InvalidOperationException"/> if the wrong thread accesses the TextDocument.
            </summary>
            <remarks>
            <para>The TextDocument class is not thread-safe. A document instance expects to have a single owner thread
            and will throw an <see cref="T:System.InvalidOperationException"/> when accessed from another thread.
            It is possible to change the owner thread using the <see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.SetOwnerThread(System.Threading.Thread)"/> method.</para>
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.SetOwnerThread(System.Threading.Thread)">
            <summary>
            Transfers ownership of the document to another thread. This method can be used to load
            a file into a TextDocument on a background thread and then transfer ownership to the UI thread
            for displaying the document.
            </summary>
            <remarks>
            <inheritdoc cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.VerifyAccess"/>
            <para>
            The owner can be set to null, which means that no thread can access the document. But, if the document
            has no owner thread, any thread may take ownership by calling <see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.SetOwnerThread(System.Threading.Thread)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.#ctor">
            <summary>
            Create an empty text document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.#ctor(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Create a new text document with the specified initial text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.#ctor(ICSharpCode.AvalonEdit.Document.ITextSource)">
            <summary>
            Create a new text document with the specified initial text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetText(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetText(ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Retrieves the text for a portion of the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.IndexOf(System.Char,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.LastIndexOf(System.Char,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetCharAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.Text">
            <summary>
            Gets/Sets the text of the whole document.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.TextChanged">
            <summary>
            This event is called after a group of changes is completed.
            </summary>
            <remarks><inheritdoc cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changing"/></remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.TextLength">
            <inheritdoc/>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.PropertyChanged">
            <summary>
            Is raised when one of the properties <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.Text"/>, <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.TextLength"/>, <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.LineCount"/>,
            <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.UndoStack"/> changes.
            </summary>
            <remarks><inheritdoc cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changing"/></remarks>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changing">
            <summary>
            Is raised before the document changes.
            </summary>
            <remarks>
            <para>Here is the order in which events are raised during a document update:</para>
            <list type="bullet">
            <item><description><b><see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.BeginUpdate">BeginUpdate()</see></b></description>
              <list type="bullet">
              <item><description>Start of change group (on undo stack)</description></item>
              <item><description><see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.UpdateStarted"/> event is raised</description></item>
              </list></item>
            <item><description><b><see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.Insert(System.Int32,System.String)">Insert()</see> / <see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.Remove(System.Int32,System.Int32)">Remove()</see> / <see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(System.Int32,System.Int32,System.String)">Replace()</see></b></description>
              <list type="bullet">
              <item><description><see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changing"/> event is raised</description></item>
              <item><description>The document is changed</description></item>
              <item><description><see cref="E:ICSharpCode.AvalonEdit.Document.TextAnchor.Deleted">TextAnchor.Deleted</see> event is raised if anchors were
                in the deleted text portion</description></item>
              <item><description><see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changed"/> event is raised</description></item>
              </list></item>
            <item><description><b><see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.EndUpdate">EndUpdate()</see></b></description>
              <list type="bullet">
              <item><description><see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.TextChanged"/> event is raised</description></item>
              <item><description><see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.PropertyChanged"/> event is raised (for the Text, TextLength, LineCount properties, in that order)</description></item>
              <item><description>End of change group (on undo stack)</description></item>
              <item><description><see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.UpdateFinished"/> event is raised</description></item>
              </list></item>
            </list>
            <para>
            If the insert/remove/replace methods are called without a call to <c>BeginUpdate()</c>,
            they will call <c>BeginUpdate()</c> and <c>EndUpdate()</c> to ensure no change happens outside of <c>UpdateStarted</c>/<c>UpdateFinished</c>.
            </para><para>
            There can be multiple document changes between the <c>BeginUpdate()</c> and <c>EndUpdate()</c> calls.
            In this case, the events associated with EndUpdate will be raised only once after the whole document update is done.
            </para><para>
            The <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.UndoStack"/> listens to the <c>UpdateStarted</c> and <c>UpdateFinished</c> events to group all changes into a single undo step.
            </para>
            </remarks>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changed">
            <summary>
            Is raised after the document has changed.
            </summary>
            <remarks><inheritdoc cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changing"/></remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateSnapshot">
            <summary>
            Creates a snapshot of the current text.
            </summary>
            <remarks>
            <para>This method returns an immutable snapshot of the document, and may be safely called even when
            the document's owner thread is concurrently modifying the document.
            </para><para>
            This special thread-safety guarantee is valid only for TextDocument.CreateSnapshot(), not necessarily for other
            classes implementing ITextSource.CreateSnapshot().
            </para><para>
            </para>
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateSnapshot(System.Int32,System.Int32)">
            <summary>
            Creates a snapshot of a part of the current text.
            </summary>
            <remarks><inheritdoc cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateSnapshot"/></remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.Version">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateReader">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateReader(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.WriteTextTo(System.IO.TextWriter)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.WriteTextTo(System.IO.TextWriter,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.IsInUpdate">
            <summary>
            Gets if an update is running.
            </summary>
            <remarks><inheritdoc cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.BeginUpdate"/></remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.RunUpdate">
            <summary>
            Immediately calls <see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.BeginUpdate"/>,
            and returns an IDisposable that calls <see cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.EndUpdate"/>.
            </summary>
            <remarks><inheritdoc cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.BeginUpdate"/></remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.BeginUpdate">
            <summary>
            <para>Begins a group of document changes.</para>
            <para>Some events are suspended until EndUpdate is called, and the <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.UndoStack"/> will
            group all changes into a single action.</para>
            <para>Calling BeginUpdate several times increments a counter, only after the appropriate number
            of EndUpdate calls the events resume their work.</para>
            </summary>
            <remarks><inheritdoc cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changing"/></remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.EndUpdate">
            <summary>
            Ends a group of document changes.
            </summary>
            <remarks><inheritdoc cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changing"/></remarks>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.UpdateStarted">
            <summary>
            Occurs when a document change starts.
            </summary>
            <remarks><inheritdoc cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changing"/></remarks>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.UpdateFinished">
            <summary>
            Occurs when a document change is finished.
            </summary>
            <remarks><inheritdoc cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changing"/></remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.FireChangeEvents">
            <summary>
            Fires TextChanged, TextLengthChanged, LineCountChanged if required.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Insert(System.Int32,System.String)">
            <summary>
            Inserts text.
            </summary>
            <param name="offset">The offset at which the text is inserted.</param>
            <param name="text">The new text.</param>
            <remarks>
            Anchors positioned exactly at the insertion offset will move according to their movement type.
            For AnchorMovementType.Default, they will move behind the inserted text.
            The caret will also move behind the inserted text.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Insert(System.Int32,ICSharpCode.AvalonEdit.Document.ITextSource)">
            <summary>
            Inserts text.
            </summary>
            <param name="offset">The offset at which the text is inserted.</param>
            <param name="text">The new text.</param>
            <remarks>
            Anchors positioned exactly at the insertion offset will move according to their movement type.
            For AnchorMovementType.Default, they will move behind the inserted text.
            The caret will also move behind the inserted text.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Insert(System.Int32,System.String,ICSharpCode.AvalonEdit.Document.AnchorMovementType)">
            <summary>
            Inserts text.
            </summary>
            <param name="offset">The offset at which the text is inserted.</param>
            <param name="text">The new text.</param>
            <param name="defaultAnchorMovementType">
            Anchors positioned exactly at the insertion offset will move according to the anchor's movement type.
            For AnchorMovementType.Default, they will move according to the movement type specified by this parameter.
            The caret will also move according to the <paramref name="defaultAnchorMovementType"/> parameter.
            </param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Insert(System.Int32,ICSharpCode.AvalonEdit.Document.ITextSource,ICSharpCode.AvalonEdit.Document.AnchorMovementType)">
            <summary>
            Inserts text.
            </summary>
            <param name="offset">The offset at which the text is inserted.</param>
            <param name="text">The new text.</param>
            <param name="defaultAnchorMovementType">
            Anchors positioned exactly at the insertion offset will move according to the anchor's movement type.
            For AnchorMovementType.Default, they will move according to the movement type specified by this parameter.
            The caret will also move according to the <paramref name="defaultAnchorMovementType"/> parameter.
            </param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Remove(ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Removes text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Remove(System.Int32,System.Int32)">
            <summary>
            Removes text.
            </summary>
            <param name="offset">Starting offset of the text to be removed.</param>
            <param name="length">Length of the text to be removed.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(ICSharpCode.AvalonEdit.Document.ISegment,System.String)">
            <summary>
            Replaces text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(ICSharpCode.AvalonEdit.Document.ISegment,ICSharpCode.AvalonEdit.Document.ITextSource)">
            <summary>
            Replaces text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            Replaces text.
            </summary>
            <param name="offset">The starting offset of the text to be replaced.</param>
            <param name="length">The length of the text to be replaced.</param>
            <param name="text">The new text.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Document.ITextSource)">
            <summary>
            Replaces text.
            </summary>
            <param name="offset">The starting offset of the text to be replaced.</param>
            <param name="length">The length of the text to be replaced.</param>
            <param name="text">The new text.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(System.Int32,System.Int32,System.String,ICSharpCode.AvalonEdit.Document.OffsetChangeMappingType)">
            <summary>
            Replaces text.
            </summary>
            <param name="offset">The starting offset of the text to be replaced.</param>
            <param name="length">The length of the text to be replaced.</param>
            <param name="text">The new text.</param>
            <param name="offsetChangeMappingType">The offsetChangeMappingType determines how offsets inside the old text are mapped to the new text.
            This affects how the anchors and segments inside the replaced region behave.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Document.ITextSource,ICSharpCode.AvalonEdit.Document.OffsetChangeMappingType)">
            <summary>
            Replaces text.
            </summary>
            <param name="offset">The starting offset of the text to be replaced.</param>
            <param name="length">The length of the text to be replaced.</param>
            <param name="text">The new text.</param>
            <param name="offsetChangeMappingType">The offsetChangeMappingType determines how offsets inside the old text are mapped to the new text.
            This affects how the anchors and segments inside the replaced region behave.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(System.Int32,System.Int32,System.String,ICSharpCode.AvalonEdit.Document.OffsetChangeMap)">
            <summary>
            Replaces text.
            </summary>
            <param name="offset">The starting offset of the text to be replaced.</param>
            <param name="length">The length of the text to be replaced.</param>
            <param name="text">The new text.</param>
            <param name="offsetChangeMap">The offsetChangeMap determines how offsets inside the old text are mapped to the new text.
            This affects how the anchors and segments inside the replaced region behave.
            If you pass null (the default when using one of the other overloads), the offsets are changed as
            in OffsetChangeMappingType.Normal mode.
            If you pass OffsetChangeMap.Empty, then everything will stay in its old place (OffsetChangeMappingType.CharacterReplace mode).
            The offsetChangeMap must be a valid 'explanation' for the document change. See <see cref="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.IsValidForDocumentChange(System.Int32,System.Int32,System.Int32)"/>.
            Passing an OffsetChangeMap to the Replace method will automatically freeze it to ensure the thread safety of the resulting
            DocumentChangeEventArgs instance.
            </param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.Replace(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Document.ITextSource,ICSharpCode.AvalonEdit.Document.OffsetChangeMap)">
            <summary>
            Replaces text.
            </summary>
            <param name="offset">The starting offset of the text to be replaced.</param>
            <param name="length">The length of the text to be replaced.</param>
            <param name="text">The new text.</param>
            <param name="offsetChangeMap">The offsetChangeMap determines how offsets inside the old text are mapped to the new text.
            This affects how the anchors and segments inside the replaced region behave.
            If you pass null (the default when using one of the other overloads), the offsets are changed as
            in OffsetChangeMappingType.Normal mode.
            If you pass OffsetChangeMap.Empty, then everything will stay in its old place (OffsetChangeMappingType.CharacterReplace mode).
            The offsetChangeMap must be a valid 'explanation' for the document change. See <see cref="M:ICSharpCode.AvalonEdit.Document.OffsetChangeMap.IsValidForDocumentChange(System.Int32,System.Int32,System.Int32)"/>.
            Passing an OffsetChangeMap to the Replace method will automatically freeze it to ensure the thread safety of the resulting
            DocumentChangeEventArgs instance.
            </param>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.Lines">
            <summary>
            Gets a read-only list of lines.
            </summary>
            <remarks><inheritdoc cref="T:ICSharpCode.AvalonEdit.Document.DocumentLine"/></remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetLineByNumber(System.Int32)">
            <summary>
            Gets a line by the line number: O(log n)
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetLineByOffset(System.Int32)">
            <summary>
            Gets a document lines by offset.
            Runtime: O(log n)
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetOffset(ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Gets the offset from a text location.
            </summary>
            <seealso cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetLocation(System.Int32)"/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetOffset(System.Int32,System.Int32)">
            <summary>
            Gets the offset from a text location.
            </summary>
            <seealso cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetLocation(System.Int32)"/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetLocation(System.Int32)">
            <summary>
            Gets the location from an offset.
            </summary>
            <seealso cref="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetOffset(ICSharpCode.AvalonEdit.Document.TextLocation)"/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.LineTrackers">
            <summary>
            Gets the list of <see cref="T:ICSharpCode.AvalonEdit.Document.ILineTracker"/>s attached to this document.
            You can add custom line trackers to this list.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.UndoStack">
            <summary>
            Gets the <see cref="P:ICSharpCode.AvalonEdit.Document.TextDocument.UndoStack"/> of the document.
            </summary>
            <remarks>This property can also be used to set the undo stack, e.g. for sharing a common undo stack between multiple documents.</remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.CreateAnchor(System.Int32)">
            <summary>
            Creates a new <see cref="T:ICSharpCode.AvalonEdit.Document.TextAnchor"/> at the specified offset.
            </summary>
            <inheritdoc cref="T:ICSharpCode.AvalonEdit.Document.TextAnchor" select="remarks|example"/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.LineCount">
            <summary>
            Gets the total number of lines in the document.
            Runtime: O(1).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetLineTreeAsString">
            <summary>
            Gets the document lines tree in string form.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocument.GetTextAnchorTreeAsString">
            <summary>
            Gets the text anchor tree in string form.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.ServiceProvider">
            <summary>
            Gets/Sets the service provider associated with this document.
            By default, every TextDocument has its own ServiceContainer; and has the document itself
            registered as <see cref="T:ICSharpCode.AvalonEdit.Document.IDocument"/> and <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocument"/>.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.TextDocument.FileNameChanged">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextDocument.FileName">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager">
            <summary>
            Contains weak event managers for the TextDocument events.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateStarted">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.UpdateStarted"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateStarted.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateStarted.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateFinished">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.UpdateFinished"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateFinished.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.UpdateFinished.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changing">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changing"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changing.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changing.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changed">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.Changed"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changed.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.Changed.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextChanged">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Document.TextDocument.TextChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextChanged.StartListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextDocumentWeakEventManager.TextChanged.StopListening(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextLocation">
            <summary>
            A line/column position.
            Text editor lines/columns are counted started from one.
            </summary>
            <remarks>
            The document provides the methods <see cref="M:ICSharpCode.AvalonEdit.Document.IDocument.GetLocation(System.Int32)"/> and
            <see cref="M:ICSharpCode.AvalonEdit.Document.IDocument.GetOffset(ICSharpCode.AvalonEdit.Document.TextLocation)"/> to convert between offsets and TextLocations.
            </remarks>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.TextLocation.Empty">
            <summary>
            Represents no text location (0, 0).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a TextLocation instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextLocation.Line">
            <summary>
            Gets the line number.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextLocation.Column">
            <summary>
            Gets the column number.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextLocation.IsEmpty">
            <summary>
            Gets whether the TextLocation instance is empty.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.ToString">
            <summary>
            Gets a string representation for debugging purposes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.GetHashCode">
            <summary>
            Gets a hash code.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.Equals(System.Object)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.Equals(ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_Equality(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_Inequality(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Inequality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_LessThan(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_GreaterThan(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_LessThanOrEqual(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.op_GreaterThanOrEqual(ICSharpCode.AvalonEdit.Document.TextLocation,ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocation.CompareTo(ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Compares two text locations.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextLocationConverter">
            <summary>
            Converts strings of the form '0+[;,]0+' to a <see cref="T:ICSharpCode.AvalonEdit.Document.TextLocation"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocationConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocationConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocationConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextLocationConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.ISegment">
            <summary>
            An (Offset,Length)-pair.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ISegment.Offset">
            <summary>
            Gets the start offset of the segment.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ISegment.Length">
            <summary>
            Gets the length of the segment.
            </summary>
            <remarks>For line segments (IDocumentLine), the length does not include the line delimeter.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.ISegment.EndOffset">
            <summary>
            Gets the end offset of the segment.
            </summary>
            <remarks>EndOffset = Offset + Length;</remarks>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.ISegmentExtensions">
            <summary>
            Extension methods for <see cref="T:ICSharpCode.AvalonEdit.Document.ISegment"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ISegmentExtensions.Contains(ICSharpCode.AvalonEdit.Document.ISegment,System.Int32,System.Int32)">
            <summary>
            Gets whether <paramref name="segment"/> fully contains the specified segment.
            </summary>
            <remarks>
            Use <c>segment.Contains(offset, 0)</c> to detect whether a segment (end inclusive) contains offset;
            use <c>segment.Contains(offset, 1)</c> to detect whether a segment (end exclusive) contains offset.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.ISegmentExtensions.Contains(ICSharpCode.AvalonEdit.Document.ISegment,ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Gets whether <paramref name="thisSegment"/> fully contains the specified segment.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextSegment">
            <summary>
            A segment that can be put into a <see cref="T:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1"/>.
            </summary>
            <remarks>
            <para>
            A <see cref="T:ICSharpCode.AvalonEdit.Document.TextSegment"/> can be stand-alone or part of a <see cref="T:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1"/>.
            If the segment is stored inside a TextSegmentCollection, its Offset and Length will be updated by that collection.
            </para>
            <para>
            When the document changes, the offsets of all text segments in the TextSegmentCollection will be adjusted accordingly.
            Start offsets move like <see cref="T:ICSharpCode.AvalonEdit.Document.AnchorMovementType">AnchorMovementType.AfterInsertion</see>,
            end offsets move like <see cref="T:ICSharpCode.AvalonEdit.Document.AnchorMovementType">AnchorMovementType.BeforeInsertion</see>
            (i.e. the segment will always stay as small as possible).</para>
            <para>
            If a document change causes a segment to be deleted completely, it will be reduced to length 0, but segments are
            never automatically removed from the collection.
            Segments with length 0 will never expand due to document changes, and they move as <c>AfterInsertion</c>.
            </para>
            <para>
            Thread-safety: a TextSegmentCollection that is connected to a <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocument"/> may only be used on that document's owner thread.
            A disconnected TextSegmentCollection is safe for concurrent reads, but concurrent access is not safe when there are writes.
            Keep in mind that reading the Offset properties of a text segment inside the collection is a read access on the
            collection; and setting an Offset property of a text segment is a write access on the collection.
            </para>
            </remarks>
            <seealso cref="T:ICSharpCode.AvalonEdit.Document.ISegment"/>
            <seealso cref="T:ICSharpCode.AvalonEdit.Document.AnchorSegment"/>
            <seealso cref="T:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1"/>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.TextSegment.color">
            <summary>
            The color of the segment in the red/black tree.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.TextSegment.nodeLength">
            <summary>
            The "length" of the node (distance to previous node)
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.TextSegment.totalNodeLength">
            <summary>
            The total "length" of this subtree.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.TextSegment.segmentLength">
            <summary>
            The length of the segment (do not confuse with nodeLength).
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.TextSegment.distanceToMaxEnd">
            <summary>
            distanceToMaxEnd = Max(segmentLength,
                                   left.distanceToMaxEnd + left.Offset - Offset,
                                   left.distanceToMaxEnd + right.Offset - Offset)
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.IsConnectedToCollection">
            <summary>
            Gets whether this segment is connected to a TextSegmentCollection and will automatically
            update its offsets.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.StartOffset">
            <summary>
            Gets/Sets the start offset of the segment.
            </summary>
            <remarks>
            When setting the start offset, the end offset will change, too: the Length of the segment will stay constant.
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.EndOffset">
            <summary>
            Gets/Sets the end offset of the segment.
            </summary>
            <remarks>
            Setting the end offset will change the length, the start offset will stay constant.
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.Length">
            <summary>
            Gets/Sets the length of the segment.
            </summary>
            <remarks>
            Setting the length will change the end offset, the start offset will stay constant.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegment.OnSegmentChanged">
            <summary>
            This method gets called when the StartOffset/Length/EndOffset properties are set.
            It is not called when StartOffset/Length/EndOffset change due to document changes
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.Successor">
            <summary>
            Gets the inorder successor of the node.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegment.Predecessor">
            <summary>
            Gets the inorder predecessor of the node.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegment.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.ISegmentTree">
            <summary>
            Interface to allow TextSegments to access the TextSegmentCollection - we cannot use a direct reference
            because TextSegmentCollection is generic.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1">
            <summary>
            <para>
            A collection of text segments that supports efficient lookup of segments
            intersecting with another segment.
            </para>
            </summary>
            <remarks><inheritdoc cref="T:ICSharpCode.AvalonEdit.Document.TextSegment"/></remarks>
            <see cref="T:ICSharpCode.AvalonEdit.Document.TextSegment"/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.#ctor">
            <summary>
            Creates a new TextSegmentCollection that needs manual calls to <see cref="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.UpdateOffsets(ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs)"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <summary>
            Creates a new TextSegmentCollection that updates the offsets automatically.
            </summary>
            <param name="textDocument">The document to which the text segments
            that will be added to the tree belong. When the document changes, the
            position of the text segments will be updated accordingly.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.UpdateOffsets(ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs)">
            <summary>
            Updates the start and end offsets of all segments stored in this collection.
            </summary>
            <param name="e">DocumentChangeEventArgs instance describing the change to the document.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.UpdateOffsets(ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
            <summary>
            Updates the start and end offsets of all segments stored in this collection.
            </summary>
            <param name="change">OffsetChangeMapEntry instance describing the change to the document.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Add(`0)">
            <summary>
            Adds the specified segment to the tree. This will cause the segment to update when the
            document changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.GetNextSegment(`0)">
            <summary>
            Gets the next segment after the specified segment.
            Segments are sorted by their start offset.
            Returns null if segment is the last segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.GetPreviousSegment(`0)">
            <summary>
            Gets the previous segment before the specified segment.
            Segments are sorted by their start offset.
            Returns null if segment is the first segment.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FirstSegment">
            <summary>
            Returns the first segment in the collection or null, if the collection is empty.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.LastSegment">
            <summary>
            Returns the last segment in the collection or null, if the collection is empty.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FindFirstSegmentWithStartAfter(System.Int32)">
            <summary>
            Gets the first segment with a start offset greater or equal to <paramref name="startOffset"/>.
            Returns null if no such segment is found.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FindNode(System.Int32@)">
            <summary>
            Finds the node at the specified offset.
            After the method has run, offset is relative to the beginning of the returned node.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FindSegmentsContaining(System.Int32)">
            <summary>
            Finds all segments that contain the given offset.
            (StartOffset &lt;= offset &lt;= EndOffset)
            Segments are returned in the order given by GetNextSegment/GetPreviousSegment.
            </summary>
            <returns>Returns a new collection containing the results of the query.
            This means it is safe to modify the TextSegmentCollection while iterating through the result collection.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FindOverlappingSegments(ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Finds all segments that overlap with the given segment (including touching segments).
            </summary>
            <returns>Returns a new collection containing the results of the query.
            This means it is safe to modify the TextSegmentCollection while iterating through the result collection.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.FindOverlappingSegments(System.Int32,System.Int32)">
            <summary>
            Finds all segments that overlap with the given segment (including touching segments).
            Segments are returned in the order given by GetNextSegment/GetPreviousSegment.
            </summary>
            <returns>Returns a new collection containing the results of the query.
            This means it is safe to modify the TextSegmentCollection while iterating through the result collection.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Remove(`0)">
            <summary>
            Removes the specified segment from the tree. This will cause the segment to not update
            anymore when the document changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Clear">
            <summary>
            Removes all segments from the tree.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Count">
            <summary>
            Gets the number of segments in the tree.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.Contains(`0)">
            <summary>
            Gets whether this tree contains the specified item.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all segments in this SegmentTree to the specified array.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1.GetEnumerator">
            <summary>
            Gets an enumerator to enumerate the segments.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.TextSourceVersionProvider">
            <summary>
            Provides ITextSourceVersion instances.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSourceVersionProvider.#ctor">
            <summary>
            Creates a new TextSourceVersionProvider instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.TextSourceVersionProvider.CurrentVersion">
            <summary>
            Gets the current version.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.TextSourceVersionProvider.AppendChange(ICSharpCode.AvalonEdit.Document.TextChangeEventArgs)">
            <summary>
            Replaces the current version with a new version.
            </summary>
            <param name="change">Change from current version to new version</param>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.CaretPositioningMode">
            <summary>
            Specifies the mode for getting the next caret position.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.CaretPositioningMode.Normal">
            <summary>
            Normal positioning (stop after every grapheme)
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.CaretPositioningMode.WordBorder">
            <summary>
            Stop only on word borders.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.CaretPositioningMode.WordStart">
            <summary>
            Stop only at the beginning of words. This is used for Ctrl+Left/Ctrl+Right.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.CaretPositioningMode.WordStartOrSymbol">
            <summary>
            Stop only at the beginning of words, and anywhere in the middle of symbols.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.CaretPositioningMode.WordBorderOrSymbol">
            <summary>
            Stop only on word borders, and anywhere in the middle of symbols.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.CaretPositioningMode.EveryCodepoint">
            <summary>
            Stop between every Unicode codepoint, even within the same grapheme.
            This is used to implement deleting the previous grapheme when Backspace is pressed.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.CharacterClass">
            <summary>
            Classifies a character as whitespace, line terminator, part of an identifier, or other.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.CharacterClass.Other">
            <summary>
            The character is not whitespace, line terminator or part of an identifier.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.CharacterClass.Whitespace">
            <summary>
            The character is whitespace (but not line terminator).
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.CharacterClass.IdentifierPart">
            <summary>
            The character can be part of an identifier (Letter, digit or underscore).
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.CharacterClass.LineTerminator">
            <summary>
            The character is line terminator (\r or \n).
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.CharacterClass.CombiningMark">
            <summary>
            The character is a unicode combining mark that modifies the previous character.
            Corresponds to the Unicode designations "Mn", "Mc" and "Me".
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.UndoOperationGroup">
            <summary>
            This class stacks the last x operations from the undostack and makes
            one undo/redo operation from it.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.UndoStack">
            <summary>
            Undo stack implementation.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.UndoStack.StateListen">
            undo stack is listening for changes
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.UndoStack.StatePlayback">
            undo stack is reverting/repeating a set of changes
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.UndoStack.state">
            state is used for checking that noone but the UndoStack performs changes
            during Undo events
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Document.UndoStack.elementsOnUndoUntilOriginalFile">
            <summary>
            Number of times undo must be executed until the original state is reached.
            Negative: number of times redo must be executed until the original state is reached.
            Special case: int.MinValue == original state is unreachable
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.IsOriginalFile">
            <summary>
            Gets whether the document is currently in its original state (no modifications).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.MarkAsOriginalFile">
            <summary>
            Marks the current state as original. Discards any previous "original" markers.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.DiscardOriginalFileMarker">
            <summary>
            Discards the current "original" marker.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.AcceptChanges">
            <summary>
            Gets if the undo stack currently accepts changes.
            Is false while an undo action is running.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.CanUndo">
            <summary>
            Gets if there are actions on the undo stack.
            Use the PropertyChanged event to listen to changes of this property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.CanRedo">
            <summary>
            Gets if there are actions on the redo stack.
            Use the PropertyChanged event to listen to changes of this property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.SizeLimit">
            <summary>
            Gets/Sets the limit on the number of items on the undo stack.
            </summary>
            <remarks>The size limit is enforced only on the number of stored top-level undo groups.
            Elements within undo groups do not count towards the size limit.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Document.UndoStack.LastGroupDescriptor">
            <summary>
            If an undo group is open, gets the group descriptor of the current top-level
            undo group.
            If no undo group is open, gets the group descriptor from the previous undo group.
            </summary>
            <remarks>The group descriptor can be used to join adjacent undo groups:
            use a group descriptor to mark your changes, and on the second action,
            compare LastGroupDescriptor and use <see cref="M:ICSharpCode.AvalonEdit.Document.UndoStack.StartContinuedUndoGroup(System.Object)"/> if you
            want to join the undo groups.</remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.StartUndoGroup">
            <summary>
            Starts grouping changes.
            Maintains a counter so that nested calls are possible.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.StartUndoGroup(System.Object)">
            <summary>
            Starts grouping changes.
            Maintains a counter so that nested calls are possible.
            </summary>
            <param name="groupDescriptor">An object that is stored with the undo group.
            If this is not a top-level undo group, the parameter is ignored.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.StartContinuedUndoGroup(System.Object)">
            <summary>
            Starts grouping changes, continuing with the previously closed undo group if possible.
            Maintains a counter so that nested calls are possible.
            If the call to StartContinuedUndoGroup is a nested call, it behaves exactly
            as <see cref="M:ICSharpCode.AvalonEdit.Document.UndoStack.StartUndoGroup"/>, only top-level calls can continue existing undo groups.
            </summary>
            <param name="groupDescriptor">An object that is stored with the undo group.
            If this is not a top-level undo group, the parameter is ignored.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.EndUndoGroup">
            <summary>
            Stops grouping changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.ThrowIfUndoGroupOpen">
            <summary>
            Throws an InvalidOperationException if an undo group is current open.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.Undo">
            <summary>
            Call this method to undo the last operation on the stack
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.Redo">
            <summary>
            Call this method to redo the last undone operation
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.Push(ICSharpCode.AvalonEdit.Document.IUndoableOperation)">
            <summary>
            Call this method to push an UndoableOperation on the undostack.
            The redostack will be cleared if you use this method.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.PushOptional(ICSharpCode.AvalonEdit.Document.IUndoableOperation)">
            <summary>
            Call this method to push an UndoableOperation on the undostack.
            However, the operation will be only stored if the undo group contains a
            non-optional operation.
            Use this method to store the caret position/selection on the undo stack to
            prevent having only actions that affect only the caret and not the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.ClearRedoStack">
            <summary>
            Call this method, if you want to clear the redo stack
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.UndoStack.ClearAll">
            <summary>
            Clears both the undo and redo stack.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Document.UndoStack.PropertyChanged">
            <summary>
            Is raised when a property (CanUndo, CanRedo) changed.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Document.WeakLineTracker">
            <summary>
            Allows registering a line tracker on a TextDocument using a weak reference from the document to the line tracker.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.WeakLineTracker.Register(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.ILineTracker)">
            <summary>
            Registers the <paramref name="targetTracker"/> as line tracker for the <paramref name="textDocument"/>.
            A weak reference to the target tracker will be used, and the WeakLineTracker will deregister itself
            when the target tracker is garbage collected.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Document.WeakLineTracker.Deregister">
            <summary>
            Deregisters the weak line tracker.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.AbstractMargin">
            <summary>
            Base class for margins.
            Margins don't have to derive from this class, it just helps maintaining a reference to the TextView
            and the TextDocument.
            AbstractMargin derives from FrameworkElement, so if you don't want to handle visual children and rendering
            on your own, choose another base class for your margin!
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.AbstractMargin.TextViewProperty">
            <summary>
            TextView property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.AbstractMargin.TextView">
            <summary>
            Gets/sets the text view for which line numbers are displayed.
            </summary>
            <remarks>Adding a margin to <see cref="P:ICSharpCode.AvalonEdit.Editing.TextArea.LeftMargins"/> will automatically set this property to the text area's TextView.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.AbstractMargin.Document">
            <summary>
            Gets the document associated with the margin.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.AbstractMargin.OnTextViewChanged(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Rendering.TextView)">
            <summary>
            Called when the <see cref="P:ICSharpCode.AvalonEdit.Editing.AbstractMargin.TextView"/> is changing.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.AbstractMargin.OnDocumentChanged(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.TextDocument)">
            <summary>
            Called when the <see cref="P:ICSharpCode.AvalonEdit.Editing.AbstractMargin.Document"/> is changing.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.Caret">
            <summary>
            Helper class with caret-related methods.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.Position">
            <summary>
            Gets/Sets the position of the caret.
            Retrieving this property will validate the visual column (which can be expensive).
            Use the <see cref="P:ICSharpCode.AvalonEdit.Editing.Caret.Location"/> property instead if you don't need the visual column.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.NonValidatedPosition">
            <summary>
            Gets the caret position without validating it.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.Location">
            <summary>
            Gets/Sets the location of the caret.
            The getter of this property is faster than <see cref="P:ICSharpCode.AvalonEdit.Editing.Caret.Position"/> because it doesn't have
            to validate the visual column.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.Line">
            <summary>
            Gets/Sets the caret line.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.Column">
            <summary>
            Gets/Sets the caret column.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.VisualColumn">
            <summary>
            Gets/Sets the caret visual column.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.IsInVirtualSpace">
            <summary>
            Gets whether the caret is in virtual space.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.Offset">
            <summary>
            Gets/Sets the caret offset.
            Setting the caret offset has the side effect of setting the <see cref="P:ICSharpCode.AvalonEdit.Editing.Caret.DesiredXPos"/> to NaN.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.DesiredXPos">
            <summary>
            Gets/Sets the desired x-position of the caret, in device-independent pixels.
            This property is NaN if the caret has no desired position.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Editing.Caret.PositionChanged">
            <summary>
            Event raised when the caret position has changed.
            If the caret position is changed inside a document update (between BeginUpdate/EndUpdate calls),
            the PositionChanged event is raised only once at the end of the document update.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Caret.RevalidateVisualColumn(ICSharpCode.AvalonEdit.Rendering.VisualLine)">
            <summary>
            Validates the visual column of the caret using the specified visual line.
            The visual line must contain the caret offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Caret.CalculateCaretRectangle">
            <summary>
            Returns the caret rectangle. The coordinate system is in device-independent pixels from the top of the document.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.Caret.MinimumDistanceToViewBorder">
            <summary>
            Minimum distance of the caret to the view border.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Caret.BringCaretToView">
            <summary>
            Scrolls the text view so that the caret is visible.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Caret.Show">
            <summary>
            Makes the caret visible and updates its on-screen position.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Caret.Hide">
            <summary>
            Makes the caret invisible.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Caret.CaretBrush">
            <summary>
            Gets/Sets the color of the caret.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.CaretNavigationCommandHandler.Create(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Creates a new <see cref="T:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler"/> for the text area.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.CaretWeakEventManager">
            <summary>
            Contains classes for handling weak events on the Caret class.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.CaretWeakEventManager.PositionChanged">
            <summary>
            Handles the Caret.PositionChanged event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.CaretWeakEventManager.PositionChanged.StartListening(ICSharpCode.AvalonEdit.Editing.Caret)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.CaretWeakEventManager.PositionChanged.StopListening(ICSharpCode.AvalonEdit.Editing.Caret)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.DottedLineMargin">
            <summary>
            Margin for use with the text area.
            A vertical dotted line to separate the line numbers from the text view.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.DottedLineMargin.Create">
            <summary>
            Creates a vertical dotted line to separate the line numbers from the text view.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.DottedLineMargin.IsDottedLineMargin(System.Windows.UIElement)">
            <summary>
            Gets whether the specified UIElement is the result of a DottedLineMargin.Create call.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.DragDropException">
            <summary>
            Wraps exceptions that occur during drag'n'drop.
            Exceptions during drag'n'drop might
            get swallowed by WPF/COM, so AvalonEdit catches them and re-throws them later
            wrapped in a DragDropException.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.DragDropException.#ctor">
            <summary>
            Creates a new DragDropException.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.DragDropException.#ctor(System.String)">
            <summary>
            Creates a new DragDropException.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.DragDropException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new DragDropException.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.DragDropException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a DragDropException.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.EditingCommandHandler">
            <summary>
            We re-use the CommandBinding and InputBinding instances between multiple text areas,
            so this class is static.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.EditingCommandHandler.Create(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Creates a new <see cref="T:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler"/> for the text area.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.EditingCommandHandler.TransformSelectedLines(System.Action{ICSharpCode.AvalonEdit.Editing.TextArea,ICSharpCode.AvalonEdit.Document.DocumentLine},System.Object,System.Windows.Input.ExecutedRoutedEventArgs,ICSharpCode.AvalonEdit.Editing.EditingCommandHandler.DefaultSegmentType)">
            <summary>
            Calls transformLine on all lines in the selected range.
            transformLine needs to handle read-only segments!
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.EditingCommandHandler.TransformSelectedSegments(System.Action{ICSharpCode.AvalonEdit.Editing.TextArea,ICSharpCode.AvalonEdit.Document.ISegment},System.Object,System.Windows.Input.ExecutedRoutedEventArgs,ICSharpCode.AvalonEdit.Editing.EditingCommandHandler.DefaultSegmentType)">
            <summary>
            Calls transformLine on all writable segment in the selected range.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.ImeNativeWrapper">
            <summary>
            Native API required for IME support.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.IReadOnlySectionProvider">
            <summary>
            Determines whether the document can be modified.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.IReadOnlySectionProvider.CanInsert(System.Int32)">
            <summary>
            Gets whether insertion is possible at the specified offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.IReadOnlySectionProvider.GetDeletableSegments(ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Gets the deletable segments inside the given segment.
            </summary>
            <remarks>
            All segments in the result must be within the given segment, and they must be returned in order
            (e.g. if two segments are returned, EndOffset of first segment must be less than StartOffset of second segment).
            
            For replacements, the last segment being returned will be replaced with the new text. If an empty list is returned,
            no replacement will be done.
            </remarks>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.LineNumberMargin">
            <summary>
            Margin showing line numbers.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.typeface">
            <summary>
            The typeface used for rendering the line number margin.
            This field is calculated in MeasureOverride() based on the FontFamily etc. properties.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.emSize">
            <summary>
            The font size used for rendering the line number margin.
            This field is calculated in MeasureOverride() based on the FontFamily etc. properties.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.MeasureOverride(System.Windows.Size)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.OnRender(System.Windows.Media.DrawingContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.OnTextViewChanged(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Rendering.TextView)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.OnDocumentChanged(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.TextDocument)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <inheritdoc cref="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)"/>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.maxLineNumberLength">
            <summary>
            Maximum length of a line number, in characters
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.LineNumberMargin.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.MouseSelectionMode">
            <summary>
            Enumeration of possible states of mouse selection.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.MouseSelectionMode.None">
            <summary>
            no selection (no mouse button down)
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.MouseSelectionMode.PossibleDragStart">
            <summary>
            left mouse button down on selection, might be normal click
            or might be drag'n'drop
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.MouseSelectionMode.Drag">
            <summary>
            dragging text
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.MouseSelectionMode.Normal">
            <summary>
            normal selection (click+drag)
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.MouseSelectionMode.WholeWord">
            <summary>
            whole-word selection (double click+drag or ctrl+click+drag)
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.MouseSelectionMode.WholeLine">
            <summary>
            whole-line selection (triple click+drag)
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.MouseSelectionMode.Rectangular">
            <summary>
            rectangular selection (alt+click+drag)
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.NoReadOnlySections">
            <summary>
            <see cref="T:ICSharpCode.AvalonEdit.Editing.IReadOnlySectionProvider"/> that has no read-only sections; all text is editable.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.ReadOnlySectionDocument">
            <summary>
            <see cref="T:ICSharpCode.AvalonEdit.Editing.IReadOnlySectionProvider"/> that completely disables editing.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.RectangleSelection">
            <summary>
            Rectangular selection ("box selection").
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectLeftByCharacter">
            <summary>
            Expands the selection left by one character, creating a rectangular selection.
            Key gesture: Alt+Shift+Left
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectRightByCharacter">
            <summary>
            Expands the selection right by one character, creating a rectangular selection.
            Key gesture: Alt+Shift+Right
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectLeftByWord">
            <summary>
            Expands the selection left by one word, creating a rectangular selection.
            Key gesture: Ctrl+Alt+Shift+Left
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectRightByWord">
            <summary>
            Expands the selection left by one word, creating a rectangular selection.
            Key gesture: Ctrl+Alt+Shift+Right
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectUpByLine">
            <summary>
            Expands the selection up by one line, creating a rectangular selection.
            Key gesture: Alt+Shift+Up
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectDownByLine">
            <summary>
            Expands the selection up by one line, creating a rectangular selection.
            Key gesture: Alt+Shift+Down
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectToLineStart">
            <summary>
            Expands the selection to the start of the line, creating a rectangular selection.
            Key gesture: Alt+Shift+Home
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.BoxSelectToLineEnd">
            <summary>
            Expands the selection to the end of the line, creating a rectangular selection.
            Key gesture: Alt+Shift+End
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea,ICSharpCode.AvalonEdit.TextViewPosition,ICSharpCode.AvalonEdit.TextViewPosition)">
            <summary>
            Creates a new rectangular selection.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.GetText">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.StartSelectionOrSetEndpoint(ICSharpCode.AvalonEdit.TextViewPosition,ICSharpCode.AvalonEdit.TextViewPosition)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.RectangleSelection.Length">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.RectangleSelection.EnableVirtualSpace">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.RectangleSelection.SurroundingSegment">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.RectangleSelection.Segments">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.RectangleSelection.StartPosition">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.RectangleSelection.EndPosition">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.SetEndpoint(ICSharpCode.AvalonEdit.TextViewPosition)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.UpdateOnDocumentChange(ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.ReplaceSelectionWithText(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.PerformRectangularPaste(ICSharpCode.AvalonEdit.Editing.TextArea,ICSharpCode.AvalonEdit.TextViewPosition,System.String,System.Boolean)">
            <summary>
            Performs a rectangular paste operation.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.RectangleSelection.RectangularSelectionDataType">
            <summary>
            Gets the name of the entry in the DataObject that signals rectangle selections.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.CreateDataObject(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.RectangleSelection.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.Selection">
            <summary>
            Base class for selections.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.Create(ICSharpCode.AvalonEdit.Editing.TextArea,System.Int32,System.Int32)">
            <summary>
            Creates a new simple selection that selects the text from startOffset to endOffset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.Create(ICSharpCode.AvalonEdit.Editing.TextArea,ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Creates a new simple selection that selects the text in the specified segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Constructor for Selection.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.StartPosition">
            <summary>
            Gets the start position of the selection.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.EndPosition">
            <summary>
            Gets the end position of the selection.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.Segments">
            <summary>
            Gets the selected text segments.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.SurroundingSegment">
            <summary>
            Gets the smallest segment that contains all segments in this selection.
            May return null if the selection is empty.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.ReplaceSelectionWithText(System.String)">
            <summary>
            Replaces the selection with the specified text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.UpdateOnDocumentChange(ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs)">
            <summary>
            Updates the selection when the document changes.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.IsEmpty">
            <summary>
            Gets whether the selection is empty.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.EnableVirtualSpace">
            <summary>
            Gets whether virtual space is enabled for this selection.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.Length">
            <summary>
            Gets the selection length.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.SetEndpoint(ICSharpCode.AvalonEdit.TextViewPosition)">
            <summary>
            Returns a new selection with the changed end point.
            </summary>
            <exception cref="T:System.NotSupportedException">Cannot set endpoint for empty selection</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.StartSelectionOrSetEndpoint(ICSharpCode.AvalonEdit.TextViewPosition,ICSharpCode.AvalonEdit.TextViewPosition)">
            <summary>
            If this selection is empty, starts a new selection from <paramref name="startPosition"/> to
            <paramref name="endPosition"/>, otherwise, changes the endpoint of this selection.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.Selection.IsMultiline">
            <summary>
            Gets whether the selection is multi-line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.GetText">
            <summary>
            Gets the selected text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.CreateHtmlFragment(ICSharpCode.AvalonEdit.Highlighting.HtmlOptions)">
            <summary>
            Creates a HTML fragment for the selected text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.Contains(System.Int32)">
            <summary>
            Gets whether the specified offset is included in the selection.
            </summary>
            <returns>True, if the selection contains the offset (selection borders inclusive);
            otherwise, false.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.Selection.CreateDataObject(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Creates a data object containing the selection's text.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.SelectionMouseHandler">
            <summary>
            Handles selection of text using the mouse.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.SelectionSegment">
            <summary>
            Represents a selected segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.SelectionSegment.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a SelectionSegment from two offsets.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.SelectionSegment.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a SelectionSegment from two offsets and visual columns.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.SelectionSegment.StartOffset">
            <summary>
            Gets the start offset.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.SelectionSegment.EndOffset">
            <summary>
            Gets the end offset.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.SelectionSegment.StartVisualColumn">
            <summary>
            Gets the start visual column.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.SelectionSegment.EndVisualColumn">
            <summary>
            Gets the end visual column.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.SelectionSegment.ICSharpCode#AvalonEdit#Document#ISegment#Offset">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.SelectionSegment.Length">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.SelectionSegment.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.SimpleSelection">
            <summary>
            A simple selection.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.SimpleSelection.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea,ICSharpCode.AvalonEdit.TextViewPosition,ICSharpCode.AvalonEdit.TextViewPosition)">
            <summary>
            Creates a new SimpleSelection instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.SimpleSelection.Segments">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.SimpleSelection.SurroundingSegment">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.SimpleSelection.ReplaceSelectionWithText(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.SimpleSelection.UpdateOnDocumentChange(ICSharpCode.AvalonEdit.Document.DocumentChangeEventArgs)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.SimpleSelection.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.SimpleSelection.Length">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.SimpleSelection.SetEndpoint(ICSharpCode.AvalonEdit.TextViewPosition)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.SimpleSelection.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.SimpleSelection.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.SimpleSelection.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.TextArea">
            <summary>
            Control that wraps a TextView and adds support for user input and the caret.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.#ctor">
            <summary>
            Creates a new TextArea instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.#ctor(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <summary>
            Creates a new TextArea instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.DefaultInputHandler">
            <summary>
            Gets the default input handler.
            </summary>
            <remarks><inheritdoc cref="T:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler"/></remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.ActiveInputHandler">
            <summary>
            Gets/Sets the active input handler.
            This property does not return currently active stacked input handlers. Setting this property detached all stacked input handlers.
            </summary>
            <remarks><inheritdoc cref="T:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler"/></remarks>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Editing.TextArea.ActiveInputHandlerChanged">
            <summary>
            Occurs when the ActiveInputHandler property changes.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.StackedInputHandlers">
            <summary>
            Gets the list of currently active stacked input handlers.
            </summary>
            <remarks><inheritdoc cref="T:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler"/></remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.PushStackedInputHandler(ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler)">
            <summary>
            Pushes an input handler onto the list of stacked input handlers.
            </summary>
            <remarks><inheritdoc cref="T:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler"/></remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.PopStackedInputHandler(ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler)">
            <summary>
            Pops the stacked input handler (and all input handlers above it).
            If <paramref name="inputHandler"/> is not found in the currently stacked input handlers, or is null, this method
            does nothing.
            </summary>
            <remarks><inheritdoc cref="T:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler"/></remarks>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.DocumentProperty">
            <summary>
            Document property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.Document">
            <summary>
            Gets/Sets the document displayed by the text editor.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Editing.TextArea.DocumentChanged">
            <inheritdoc/>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.OptionsProperty">
            <summary>
            Options property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.Options">
            <summary>
            Gets/Sets the document displayed by the text editor.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Editing.TextArea.OptionChanged">
            <summary>
            Occurs when a text editor option has changed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnOptionChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.Editing.TextArea.OptionChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <inheritdoc cref="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)"/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.TextView">
            <summary>
            Gets the text view used to display text in this text area.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionChanged">
            <summary>
            Occurs when the selection has changed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.Selection">
            <summary>
            Gets/Sets the selection in this text area.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.ClearSelection">
            <summary>
            Clears the current selection.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionBrushProperty">
            <summary>
            The <see cref="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionBrush"/> property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionBrush">
            <summary>
            Gets/Sets the background brush used for the selection.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionForegroundProperty">
            <summary>
            The <see cref="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionForeground"/> property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionForeground">
            <summary>
            Gets/Sets the foreground brush used for selected text.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionBorderProperty">
            <summary>
            The <see cref="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionBorder"/> property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionBorder">
            <summary>
            Gets/Sets the pen used for the border of the selection.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionCornerRadiusProperty">
            <summary>
            The <see cref="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionCornerRadius"/> property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.SelectionCornerRadius">
            <summary>
            Gets/Sets the corner radius of the selection.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.MouseSelectionMode">
            <summary>
            Gets/Sets the active mouse selection mode.
            
            Setting this property to MouseSelectionMode.None will cancel mouse selection
            and release mouse capture.
            
            Setting this property to another value will acquire mouse capture and
            activate the mouse selection mode.
            If mouse capture cannot be acquired, MouseSelectionMode will stay unchanged.
            
            Currently, the setter only supports the values <c>None</c>, <c>Normal</c>
            and <c>Rectangular</c>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.EnsureSelectionValid">
            <summary>
            Code that updates only the caret but not the selection can cause confusion when
            keys like 'Delete' delete the (possibly invisible) selected text and not the
            text around the caret.
            
            So we'll ensure that the caret is inside the selection.
            (when the caret is not in the selection, we'll clear the selection)
            
            This method is invoked using the Dispatcher so that code may temporarily violate this rule
            (e.g. most 'extend selection' methods work by first setting the caret, then the selection),
            it's sufficient to fix it after any event handlers have run.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.AllowCaretOutsideSelection">
            <summary>
            Temporarily allows positioning the caret outside the selection.
            Dispose the returned IDisposable to revert the allowance.
            </summary>
            <remarks>
            The text area only forces the caret to be inside the selection when other events
            have finished running (using the dispatcher), so you don't have to use this method
            for temporarily positioning the caret in event handlers.
            This method is only necessary if you want to run the WPF dispatcher, e.g. if you
            perform a drag'n'drop operation.
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.Caret">
            <summary>
            Gets the Caret used for this text area.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.LeftMargins">
            <summary>
            Gets the collection of margins displayed to the left of the text view.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.ReadOnlySectionProvider">
            <summary>
            Gets/Sets an object that provides read-only sections for the text area.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Editing.TextArea.TextEntering">
            <summary>
            Occurs when the TextArea receives text input.
            This is like the <see cref="E:System.Windows.UIElement.TextInput"/> event,
            but occurs immediately before the TextArea handles the TextInput event.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Editing.TextArea.TextEntered">
            <summary>
            Occurs when the TextArea receives text input.
            This is like the <see cref="E:System.Windows.UIElement.TextInput"/> event,
            but occurs immediately after the TextArea handles the TextInput event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnTextEntering(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Raises the TextEntering event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnTextEntered(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Raises the TextEntered event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.PerformTextInput(System.String)">
            <summary>
            Performs text input.
            This raises the <see cref="E:ICSharpCode.AvalonEdit.Editing.TextArea.TextEntering"/> event, replaces the selection with the text,
            and then raises the <see cref="E:ICSharpCode.AvalonEdit.Editing.TextArea.TextEntered"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.PerformTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Performs text input.
            This raises the <see cref="E:ICSharpCode.AvalonEdit.Editing.TextArea.TextEntering"/> event, replaces the selection with the text,
            and then raises the <see cref="E:ICSharpCode.AvalonEdit.Editing.TextArea.TextEntered"/> event.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.IndentationStrategyProperty">
            <summary>
            IndentationStrategy property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.IndentationStrategy">
            <summary>
            Gets/Sets the indentation strategy used when inserting new lines.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Editing.TextArea.OverstrikeModeProperty">
            <summary>
            The <see cref="P:ICSharpCode.AvalonEdit.Editing.TextArea.OverstrikeMode"/> dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextArea.OverstrikeMode">
            <summary>
            Gets/Sets whether overstrike mode is active.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnCreateAutomationPeer">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextArea.GetService(System.Type)">
            <summary>
            Gets the requested service.
            </summary>
            <returns>Returns the requested service instance, or null if the service cannot be found.</returns>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Editing.TextArea.TextCopied">
            <summary>
            Occurs when text inside the TextArea was copied.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.TextEventArgs">
            <summary>
            EventArgs with text.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextEventArgs.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextEventArgs.#ctor(System.String)">
            <summary>
            Creates a new TextEventArgs instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.TextAreaDefaultInputHandler">
            <summary>
            Contains the predefined input handlers.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaDefaultInputHandler.CaretNavigation">
            <summary>
            Gets the caret navigation input handler.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaDefaultInputHandler.Editing">
            <summary>
            Gets the editing input handler.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaDefaultInputHandler.MouseSelection">
            <summary>
            Gets the mouse selection input handler.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaDefaultInputHandler.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Creates a new TextAreaDefaultInputHandler instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler">
            <summary>
            A set of input bindings and event handlers for the text area.
            </summary>
            <remarks>
            <para>
            There is one active input handler per text area (<see cref="P:ICSharpCode.AvalonEdit.Editing.TextArea.ActiveInputHandler"/>), plus
            a number of active stacked input handlers.
            </para>
            <para>
            The text area also stores a reference to a default input handler, but that is not necessarily active.
            </para>
            <para>
            Stacked input handlers work in addition to the set of currently active handlers (without detaching them).
            They are detached in the reverse order of being attached.
            </para>
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler.TextArea">
            <summary>
            Gets the text area that the input handler belongs to.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler.Attach">
            <summary>
            Attaches an input handler to the text area.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler.Detach">
            <summary>
            Detaches the input handler from the text area.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler">
            <summary>
            Stacked input handler.
            Uses OnEvent-methods instead of registering event handlers to ensure that the events are handled in the correct order.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler.TextArea">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Creates a new TextAreaInputHandler.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler.Attach">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler.Detach">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called for the PreviewKeyDown event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaStackedInputHandler.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called for the PreviewKeyUp event.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler">
            <summary>
            Default-implementation of <see cref="T:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler"/>.
            </summary>
            <remarks><inheritdoc cref="T:ICSharpCode.AvalonEdit.Editing.ITextAreaInputHandler"/></remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Creates a new TextAreaInputHandler.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.TextArea">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.IsAttached">
            <summary>
            Gets whether the input handler is currently attached to the text area.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.CommandBindings">
            <summary>
            Gets the command bindings of this input handler.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.InputBindings">
            <summary>
            Gets the input bindings of this input handler.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.AddBinding(System.Windows.Input.ICommand,System.Windows.Input.ModifierKeys,System.Windows.Input.Key,System.Windows.Input.ExecutedRoutedEventHandler)">
            <summary>
            Adds a command and input binding.
            </summary>
            <param name="command">The command ID.</param>
            <param name="modifiers">The modifiers of the keyboard shortcut.</param>
            <param name="key">The key of the keyboard shortcut.</param>
            <param name="handler">The event handler to run when the command is executed.</param>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.NestedInputHandlers">
            <summary>
            Gets the collection of nested input handlers. NestedInputHandlers are activated and deactivated
            together with this input handler.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.Attach">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextAreaInputHandler.Detach">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Editing.TextSegmentReadOnlySectionProvider`1">
            <summary>
            Implementation for <see cref="T:ICSharpCode.AvalonEdit.Editing.IReadOnlySectionProvider"/> that stores the segments
            in a <see cref="T:ICSharpCode.AvalonEdit.Document.TextSegmentCollection`1"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Editing.TextSegmentReadOnlySectionProvider`1.Segments">
            <summary>
            Gets the collection storing the read-only segments.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextSegmentReadOnlySectionProvider`1.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <summary>
            Creates a new TextSegmentReadOnlySectionProvider instance for the specified document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextSegmentReadOnlySectionProvider`1.#ctor(ICSharpCode.AvalonEdit.Document.TextSegmentCollection{`0})">
            <summary>
            Creates a new TextSegmentReadOnlySectionProvider instance using the specified TextSegmentCollection.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextSegmentReadOnlySectionProvider`1.CanInsert(System.Int32)">
            <summary>
            Gets whether insertion is possible at the specified offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Editing.TextSegmentReadOnlySectionProvider`1.GetDeletableSegments(ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Gets the deletable segments inside the given segment.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator">
            <summary>
            A <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator"/> that produces line elements for folded <see cref="T:ICSharpCode.AvalonEdit.Folding.FoldingSection"/>s.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator.FoldingManager">
            <summary>
            Gets/Sets the folding manager from which the foldings should be shown.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator.StartGeneration(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator.GetFirstInterestedOffset(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator.ConstructElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator.DefaultTextBrush">
            <summary>
            Default brush for folding element text. Value: Brushes.Gray
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingElementGenerator.TextBrush">
            <summary>
            Gets/sets the brush used for folding element text.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Folding.FoldingManager">
            <summary>
            Stores a list of foldings for a specific TextView and TextDocument.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <summary>
            Creates a new FoldingManager instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <inheritdoc cref="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)"/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.CreateFolding(System.Int32,System.Int32)">
            <summary>
            Creates a folding for the specified text section.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.RemoveFolding(ICSharpCode.AvalonEdit.Folding.FoldingSection)">
            <summary>
            Removes a folding section from this manager.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.Clear">
            <summary>
            Removes all folding sections.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingManager.AllFoldings">
            <summary>
            Gets all foldings in this manager.
            The foldings are returned sorted by start offset;
            for multiple foldings at the same offset the order is undefined.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.GetNextFoldedFoldingStart(System.Int32)">
            <summary>
            Gets the first offset greater or equal to <paramref name="startOffset"/> where a folded folding starts.
            Returns -1 if there are no foldings after <paramref name="startOffset"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.GetNextFolding(System.Int32)">
            <summary>
            Gets the first folding with a <see cref="P:ICSharpCode.AvalonEdit.Document.TextSegment.StartOffset"/> greater or equal to
            <paramref name="startOffset"/>.
            Returns null if there are no foldings after <paramref name="startOffset"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.GetFoldingsAt(System.Int32)">
            <summary>
            Gets all foldings that start exactly at <paramref name="startOffset"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.GetFoldingsContaining(System.Int32)">
            <summary>
            Gets all foldings that contain <paramref name="offset" />.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.UpdateFoldings(System.Collections.Generic.IEnumerable{ICSharpCode.AvalonEdit.Folding.NewFolding},System.Int32)">
            <summary>
            Updates the foldings in this <see cref="T:ICSharpCode.AvalonEdit.Folding.FoldingManager"/> using the given new foldings.
            This method will try to detect which new foldings correspond to which existing foldings; and will keep the state
            (<see cref="P:ICSharpCode.AvalonEdit.Folding.FoldingSection.IsFolded"/>) for existing foldings.
            </summary>
            <param name="newFoldings">The new set of foldings. These must be sorted by starting offset.</param>
            <param name="firstErrorOffset">The first position of a parse error. Existing foldings starting after
            this offset will be kept even if they don't appear in <paramref name="newFoldings"/>.
            Use -1 for this parameter if there were no parse errors.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.Install(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Adds Folding support to the specified text area.
            Warning: The folding manager is only valid for the text area's current document. The folding manager
            must be uninstalled before the text area is bound to a different document.
            </summary>
            <returns>The <see cref="T:ICSharpCode.AvalonEdit.Folding.FoldingManager"/> that manages the list of foldings inside the text area.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.Uninstall(ICSharpCode.AvalonEdit.Folding.FoldingManager)">
            <summary>
            Uninstalls the folding manager.
            </summary>
            <exception cref="T:System.ArgumentException">The specified manager was not created using <see cref="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.Install(ICSharpCode.AvalonEdit.Editing.TextArea)"/>.</exception>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Folding.FoldingMargin">
            <summary>
            A margin that shows markers for foldings and allows to expand/collapse the foldings.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingMargin.FoldingManager">
            <summary>
            Gets/Sets the folding manager from which the foldings should be shown.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Folding.FoldingMargin.FoldingMarkerBrushProperty">
            <summary>
            FoldingMarkerBrush dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingMargin.FoldingMarkerBrush">
            <summary>
            Gets/sets the Brush used for displaying the lines of folding markers.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Folding.FoldingMargin.FoldingMarkerBackgroundBrushProperty">
            <summary>
            FoldingMarkerBackgroundBrush dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingMargin.FoldingMarkerBackgroundBrush">
            <summary>
            Gets/sets the Brush used for displaying the background of folding markers.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Folding.FoldingMargin.SelectedFoldingMarkerBrushProperty">
            <summary>
            SelectedFoldingMarkerBrush dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingMargin.SelectedFoldingMarkerBrush">
            <summary>
            Gets/sets the Brush used for displaying the lines of selected folding markers.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Folding.FoldingMargin.SelectedFoldingMarkerBackgroundBrushProperty">
            <summary>
            SelectedFoldingMarkerBackgroundBrush dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingMargin.SelectedFoldingMarkerBackgroundBrush">
            <summary>
            Gets/sets the Brush used for displaying the background of selected folding markers.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingMargin.MeasureOverride(System.Windows.Size)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingMargin.ArrangeOverride(System.Windows.Size)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingMargin.OnTextViewChanged(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Rendering.TextView)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingMargin.VisualChildrenCount">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingMargin.GetVisualChild(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingMargin.OnRender(System.Windows.Media.DrawingContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingMargin.CalculateFoldLinesForFoldingsActiveAtStart(System.Collections.Generic.List{System.Windows.Media.TextFormatting.TextLine},System.Windows.Media.Pen[],System.Windows.Media.Pen[])">
            <summary>
            Calculates fold lines for all folding sections that start in front of the current view
            and run into the current view.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingMargin.CalculateFoldLinesForMarkers(System.Collections.Generic.List{System.Windows.Media.TextFormatting.TextLine},System.Windows.Media.Pen[],System.Windows.Media.Pen[])">
            <summary>
            Calculates fold lines for all folding sections that start inside the current view
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingMargin.DrawFoldLines(System.Windows.Media.DrawingContext,System.Windows.Media.Pen[],System.Windows.Media.Pen[])">
            <summary>
            Draws the lines for the folding sections (vertical line with 'color', horizontal lines with 'endMarker')
            Each entry in the input arrays corresponds to one TextLine.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Folding.FoldingSection">
            <summary>
            A section that can be folded.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingSection.IsFolded">
            <summary>
            Gets/sets if the section is folded.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.FoldingSection.OnSegmentChanged">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingSection.Title">
            <summary>
            Gets/Sets the text used to display the collapsed version of the folding section.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingSection.TextContent">
            <summary>
            Gets the content of the collapsed lines as text.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.FoldingSection.Tag">
            <summary>
            Gets/Sets an additional object associated with this folding section.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Folding.NewFolding">
            <summary>
            Helper class used for <see cref="M:ICSharpCode.AvalonEdit.Folding.FoldingManager.UpdateFoldings(System.Collections.Generic.IEnumerable{ICSharpCode.AvalonEdit.Folding.NewFolding},System.Int32)"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.NewFolding.StartOffset">
            <summary>
            Gets/Sets the start offset.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.NewFolding.EndOffset">
            <summary>
            Gets/Sets the end offset.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.NewFolding.Name">
            <summary>
            Gets/Sets the name displayed for the folding.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.NewFolding.DefaultClosed">
            <summary>
            Gets/Sets whether the folding is closed by default.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.NewFolding.IsDefinition">
            <summary>
            Gets/Sets whether the folding is considered to be a definition.
            This has an effect on the 'Show Definitions only' command.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.NewFolding.#ctor">
            <summary>
            Creates a new NewFolding instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.NewFolding.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new NewFolding instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Folding.XmlFoldStart">
            <summary>
            Holds information about the start of a fold in an xml string.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy">
            <summary>
            Determines folds for an xml string in the editor.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy.ShowAttributesWhenFolded">
            <summary>
            Flag indicating whether attributes should be displayed on folded
            elements.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy.UpdateFoldings(ICSharpCode.AvalonEdit.Folding.FoldingManager,ICSharpCode.AvalonEdit.Document.TextDocument)">
            <summary>
            Create <see cref="T:ICSharpCode.AvalonEdit.Folding.NewFolding"/>s for the specified document and updates the folding manager with them.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy.CreateNewFoldings(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32@)">
            <summary>
            Create <see cref="T:ICSharpCode.AvalonEdit.Folding.NewFolding"/>s for the specified document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy.CreateNewFoldings(ICSharpCode.AvalonEdit.Document.TextDocument,System.Xml.XmlReader,System.Int32@)">
            <summary>
            Create <see cref="T:ICSharpCode.AvalonEdit.Folding.NewFolding"/>s for the specified document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy.CreateCommentFold(ICSharpCode.AvalonEdit.Document.TextDocument,System.Collections.Generic.List{ICSharpCode.AvalonEdit.Folding.NewFolding},System.Xml.XmlReader)">
            <summary>
            Creates a comment fold if the comment spans more than one line.
            </summary>
            <remarks>The text displayed when the comment is folded is the first
            line of the comment.</remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy.CreateElementFoldStart(ICSharpCode.AvalonEdit.Document.TextDocument,System.Xml.XmlReader)">
            <summary>
            Creates an XmlFoldStart for the start tag of an element.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy.CreateElementFold(ICSharpCode.AvalonEdit.Document.TextDocument,System.Collections.Generic.List{ICSharpCode.AvalonEdit.Folding.NewFolding},System.Xml.XmlReader,ICSharpCode.AvalonEdit.Folding.XmlFoldStart)">
            <summary>
            Create an element fold if the start and end tag are on
            different lines.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy.GetAttributeFoldText(System.Xml.XmlReader)">
            <summary>
            Gets the element's attributes as a string on one line that will
            be displayed when the element is folded.
            </summary>
            <remarks>
            Currently this puts all attributes from an element on the same
            line of the start tag.  It does not cater for elements where attributes
            are not on the same line as the start tag.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Folding.XmlFoldingStrategy.XmlEncodeAttributeValue(System.String,System.Char)">
            <summary>
            Xml encode the attribute string since the string returned from
            the XmlTextReader is the plain unencoded string and .NET
            does not provide us with an xml encode method.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter">
            <summary>
            This class can syntax-highlight a document.
            It automatically manages invalidating the highlighting when the document changes.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.storedSpanStacks">
            <summary>
            Stores the span state at the end of each line.
            storedSpanStacks[0] = state at beginning of document
            storedSpanStacks[i] = state after line i
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.Document">
            <summary>
            Gets the document that this DocumentHighlighter is highlighting.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition)">
            <summary>
            Creates a new DocumentHighlighter instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.Dispose">
            <summary>
            Disposes the document highlighter.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.InitialSpanStack">
            <summary>
            Gets/sets the the initial span stack of the document. Default value is <see cref="F:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.Empty" />.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.InvalidateHighlighting">
            <summary>
            Invalidates all stored highlighting info.
            When the document changes, the highlighting is invalidated automatically, this method
            needs to be called only when there are changes to the highlighting rule set.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.InvalidateSpanStacks">
            <summary>
            Invalidates stored highlighting info, but does not raise the HighlightingStateChanged event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.HighlightLine(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.GetSpanStack(System.Int32)">
            <summary>
            Gets the span stack at the end of the specified line.
            -> GetSpanStack(1) returns the spans at the start of the second line.
            </summary>
            <remarks>
            GetSpanStack(0) is valid and will return <see cref="P:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.InitialSpanStack"/>.
            The elements are returned in inside-out order (first element of result enumerable is the color of the innermost span).
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.GetColorStack(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.UpdateHighlightingState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.HighlightUpTo(System.Int32)">
            <summary>
            Sets the engine's CurrentSpanStack to the end of the target line.
            Updates the span stack for all lines up to (and including) the target line, if necessary.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.HighlightingStateChanged">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.OnHighlightStateChanged(System.Int32,System.Int32)">
            <summary>
            Is called when the highlighting state at the end of the specified line has changed.
            </summary>
            <remarks>This callback must not call HighlightLine or InvalidateHighlighting.
            It may call GetSpanStack, but only for the changed line and lines above.
            This method must not modify the document.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.DefaultTextColor">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.BeginHighlighting">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.EndHighlighting">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.DocumentHighlighter.GetNamedColor(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder">
            <summary>
            Takes a series of highlighting commands and stores them.
            Later, it can build inline objects (for use with WPF TextBlock) from the commands.
            </summary>
            <remarks>
            This class is not used in AvalonEdit - but it is useful for someone who wants to put a HighlightedLine
            into a TextBlock.
            In SharpDevelop, we use it to provide syntax highlighting inside the search results pad.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.#ctor(System.String)">
            <summary>
            Creates a new HighlightedInlineBuilder instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.#ctor(ICSharpCode.AvalonEdit.Highlighting.RichText)">
            <summary>
            Creates a new HighlightedInlineBuilder instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.SetHighlighting(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
            <summary>
            Applies the properties from the HighlightingColor to the specified text segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.SetForeground(System.Int32,System.Int32,System.Windows.Media.Brush)">
            <summary>
            Sets the foreground brush on the specified text segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.SetBackground(System.Int32,System.Int32,System.Windows.Media.Brush)">
            <summary>
            Sets the background brush on the specified text segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.SetFontWeight(System.Int32,System.Int32,System.Windows.FontWeight)">
            <summary>
            Sets the font weight on the specified text segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.SetFontStyle(System.Int32,System.Int32,System.Windows.FontStyle)">
            <summary>
            Sets the font style on the specified text segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.CreateRuns">
            <summary>
            Creates WPF Run instances that can be used for TextBlock.Inlines.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.ToRichText">
            <summary>
            Creates a RichText instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder.Clone">
            <summary>
            Clones this HighlightedInlineBuilder.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine">
            <summary>
            Represents a highlighted document line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.#ctor(ICSharpCode.AvalonEdit.Document.IDocument,ICSharpCode.AvalonEdit.Document.IDocumentLine)">
            <summary>
            Creates a new HighlightedLine instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.Document">
            <summary>
            Gets the document associated with this HighlightedLine.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.DocumentLine">
            <summary>
            Gets the document line associated with this HighlightedLine.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.Sections">
            <summary>
            Gets the highlighted sections.
            The sections are not overlapping, but they may be nested.
            In that case, outer sections come in the list before inner sections.
            The sections are sorted by start offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.ValidateInvariants">
            <summary>
            Validates that the sections are sorted correctly, and that they are not overlapping.
            </summary>
            <seealso cref="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.Sections"/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.MergeWith(ICSharpCode.AvalonEdit.Highlighting.HighlightedLine)">
            <summary>
            Merges the additional line into this line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.WriteTo(ICSharpCode.AvalonEdit.Utils.RichTextWriter)">
            <summary>
            Writes the highlighted line to the RichTextWriter.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.WriteTo(ICSharpCode.AvalonEdit.Utils.RichTextWriter,System.Int32,System.Int32)">
            <summary>
            Writes a part of the highlighted line to the RichTextWriter.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.ToHtml(ICSharpCode.AvalonEdit.Highlighting.HtmlOptions)">
            <summary>
            Produces HTML code for the line, with &lt;span class="colorName"&gt; tags.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.ToHtml(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Highlighting.HtmlOptions)">
            <summary>
            Produces HTML code for a section of the line, with &lt;span class="colorName"&gt; tags.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.ToInlineBuilder">
            <summary>
            Creates a <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedInlineBuilder"/> that stores the text and highlighting of this line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.ToRichTextModel">
            <summary>
            Creates a <see cref="T:ICSharpCode.AvalonEdit.Highlighting.RichTextModel"/> that stores the highlighting of this line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine.ToRichText">
            <summary>
            Creates a <see cref="T:ICSharpCode.AvalonEdit.Highlighting.RichText"/> that stores the text and highlighting of this line.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection">
            <summary>
            A text section with syntax highlighting information.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection.Offset">
            <summary>
            Gets/sets the document offset of the section.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection.Length">
            <summary>
            Gets/sets the length of the section.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection.Color">
            <summary>
            Gets the highlighting color associated with the highlighted section.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightedSection.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingBrush">
            <summary>
            A brush used for syntax highlighting. Can retrieve a real brush on-demand.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingBrush.GetBrush(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <summary>
            Gets the real brush.
            </summary>
            <param name="context">The construction context. context can be null!</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingBrush.GetColor(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <summary>
            Gets the color of the brush.
            </summary>
            <param name="context">The construction context. context can be null!</param>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.SimpleHighlightingBrush">
            <summary>
            Highlighting brush implementation that takes a frozen brush.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.SimpleHighlightingBrush.#ctor(System.Windows.Media.Color)">
            <summary>
            Creates a new HighlightingBrush with the specified color.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.SimpleHighlightingBrush.GetBrush(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.SimpleHighlightingBrush.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.SimpleHighlightingBrush.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.SimpleHighlightingBrush.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.SystemColorHighlightingBrush">
            <summary>
            HighlightingBrush implementation that finds a brush using a resource.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor">
            <summary>
            A highlighting color is a set of font properties and foreground and background color.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.Name">
            <summary>
            Gets/Sets the name of the color.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.FontFamily">
            <summary>
            Gets/sets the font family. Null if the highlighting color does not change the font style.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.FontSize">
            <summary>
            Gets/sets the font size. Null if the highlighting color does not change the font style.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.FontWeight">
            <summary>
            Gets/sets the font weight. Null if the highlighting color does not change the font weight.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.FontStyle">
            <summary>
            Gets/sets the font style. Null if the highlighting color does not change the font style.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.Underline">
            <summary>
             Gets/sets the underline flag. Null if the underline status does not change the font style.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.Strikethrough">
            <summary>
             Gets/sets the strikethrough flag. Null if the strikethrough status does not change the font style.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.Foreground">
            <summary>
            Gets/sets the foreground color applied by the highlighting.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.Background">
            <summary>
            Gets/sets the background color applied by the highlighting.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.#ctor">
            <summary>
            Creates a new HighlightingColor instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a HighlightingColor.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes this HighlightingColor instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.ToCss">
            <summary>
            Gets CSS code for the color.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.Freeze">
            <summary>
            Prevent further changes to this highlighting color.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.IsFrozen">
            <summary>
            Gets whether this HighlightingColor instance is frozen.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.Clone">
            <summary>
            Clones this highlighting color.
            If this color is frozen, the clone will be unfrozen.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.Equals(ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColor.MergeWith(ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
            <summary>
            Overwrites the properties in this HighlightingColor with those from the given color;
            but maintains the current values where the properties of the given color return <c>null</c>.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer">
            <summary>
            A colorizes that interprets a highlighting rule set and colors the document accordingly.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.#ctor(ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition)">
            <summary>
            Creates a new HighlightingColorizer instance.
            </summary>
            <param name="definition">The highlighting definition.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.#ctor(ICSharpCode.AvalonEdit.Highlighting.IHighlighter)">
            <summary>
            Creates a new HighlightingColorizer instance that uses a fixed highlighter instance.
            The colorizer can only be used with text views that show the document for which
            the highlighter was created.
            </summary>
            <param name="highlighter">The highlighter to be used.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.#ctor">
            <summary>
            Creates a new HighlightingColorizer instance.
            Derived classes using this constructor must override the <see cref="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.CreateHighlighter(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Document.TextDocument)"/> method.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.DeregisterServices(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <summary>
            This method is called when a text view is removed from this HighlightingColorizer,
            and also when the TextDocument on any associated text view changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.RegisterServices(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <summary>
            This method is called when a new text view is added to this HighlightingColorizer,
            and also when the TextDocument on any associated text view changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.CreateHighlighter(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Document.TextDocument)">
            <summary>
            Creates the IHighlighter instance for the specified text document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.OnAddToTextView(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.OnRemoveFromTextView(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.Colorize(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.ColorizeLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.IsEmptyColor(ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
            <summary>
            Gets whether the color is empty (has no effect on a VisualLineTextElement).
            For example, the C# "Punctuation" is an empty color.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.ApplyColorToElement(ICSharpCode.AvalonEdit.Rendering.VisualLineElement,ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
            <summary>
            Applies a highlighting color to a visual line element.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer.OnHighlightStateChanged(System.Int32,System.Int32)">
            <summary>
            This method is responsible for telling the TextView to redraw lines when the highlighting state has changed.
            </summary>
            <remarks>
            Creation of a VisualLine triggers the syntax highlighter (which works on-demand), so it says:
            Hey, the user typed "/*". Don't just recreate that line, but also the next one
            because my highlighting state (at end of line) changed!
            </remarks>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException">
            <summary>
            Indicates that the highlighting definition that was tried to load was invalid.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException.#ctor">
            <summary>
            Creates a new HighlightingDefinitionInvalidException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException.#ctor(System.String)">
            <summary>
            Creates a new HighlightingDefinitionInvalidException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new HighlightingDefinitionInvalidException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new HighlightingDefinitionInvalidException instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionTypeConverter">
            <summary>
            Converts between strings and <see cref="T:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition"/> by treating the string as the definition name
            and calling <c>HighlightingManager.Instance.<see cref="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.GetDefinition(System.String)">GetDefinition</see>(name)</c>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingDefinitionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingEngine">
            <summary>
            Regex-based highlighting engine.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingEngine.#ctor(ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet)">
            <summary>
            Creates a new HighlightingEngine instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingEngine.CurrentSpanStack">
            <summary>
            Gets/sets the current span stack.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Highlighting.HighlightingEngine.highlightedLine">
            <summary>
            the HighlightedLine where highlighting output is being written to.
            if this variable is null, nothing is highlighted and only the span state is updated
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingEngine.HighlightLine(ICSharpCode.AvalonEdit.Document.IDocument,ICSharpCode.AvalonEdit.Document.IDocumentLine)">
            <summary>
            Highlights the specified line in the specified document.
            
            Before calling this method, <see cref="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingEngine.CurrentSpanStack"/> must be set to the proper
            state for the beginning of this line. After highlighting has completed,
            <see cref="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingEngine.CurrentSpanStack"/> will be updated to represent the state after the line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingEngine.ScanLine(ICSharpCode.AvalonEdit.Document.IDocument,ICSharpCode.AvalonEdit.Document.IDocumentLine)">
            <summary>
            Updates <see cref="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingEngine.CurrentSpanStack"/> for the specified line in the specified document.
            
            Before calling this method, <see cref="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingEngine.CurrentSpanStack"/> must be set to the proper
            state for the beginning of this line. After highlighting has completed,
            <see cref="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingEngine.CurrentSpanStack"/> will be updated to represent the state after the line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingEngine.Minimum(System.Text.RegularExpressions.Match[],System.Text.RegularExpressions.Match)">
            <summary>
            Returns the first match from the array or endSpanMatch.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager">
            <summary>
            Manages a list of syntax highlighting definitions.
            </summary>
            <remarks>
            All memers on this class (including instance members) are thread-safe.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.GetDefinition(System.String)">
            <summary>
            Gets a highlighting definition by name.
            Returns null if the definition is not found.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.HighlightingDefinitions">
            <summary>
            Gets a copy of all highlightings.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.GetDefinitionByExtension(System.String)">
            <summary>
            Gets a highlighting definition by extension.
            Returns null if the definition is not found.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.RegisterHighlighting(System.String,System.String[],ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition)">
            <summary>
            Registers a highlighting definition.
            </summary>
            <param name="name">The name to register the definition with.</param>
            <param name="extensions">The file extensions to register the definition for.</param>
            <param name="highlighting">The highlighting definition.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.RegisterHighlighting(System.String,System.String[],System.Func{ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition})">
            <summary>
            Registers a highlighting definition.
            </summary>
            <param name="name">The name to register the definition with.</param>
            <param name="extensions">The file extensions to register the definition for.</param>
            <param name="lazyLoadedHighlighting">A function that loads the highlighting definition.</param>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingManager.Instance">
            <summary>
            Gets the default HighlightingManager instance.
            The default HighlightingManager comes with built-in highlightings.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingRule">
            <summary>
            A highlighting rule.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingRule.Regex">
            <summary>
            Gets/Sets the regular expression for the rule.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingRule.Color">
            <summary>
            Gets/Sets the highlighting color.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingRule.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet">
            <summary>
            A highlighting rule set describes a set of spans that are valid at a given code location.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet.#ctor">
            <summary>
            Creates a new RuleSet instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet.Name">
            <summary>
            Gets/Sets the name of the rule set.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet.Spans">
            <summary>
            Gets the list of spans.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet.Rules">
            <summary>
            Gets the list of rules.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingRuleSet.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan">
            <summary>
            A highlighting span is a region with start+end expression that has a different RuleSet inside
            and colors the region.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.StartExpression">
            <summary>
            Gets/Sets the start expression.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.EndExpression">
            <summary>
            Gets/Sets the end expression.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.RuleSet">
            <summary>
            Gets/Sets the rule set that applies inside this span.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.StartColor">
            <summary>
            Gets the color used for the text matching the start expression.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.SpanColor">
            <summary>
            Gets the color used for the text between start and end.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.EndColor">
            <summary>
            Gets the color used for the text matching the end expression.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.SpanColorIncludesStart">
            <summary>
            Gets/Sets whether the span color includes the start.
            The default is <c>false</c>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.SpanColorIncludesEnd">
            <summary>
            Gets/Sets whether the span color includes the end.
            The default is <c>false</c>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HighlightingSpan.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HtmlClipboard">
            <summary>
            Allows copying HTML text to the clipboard.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlClipboard.BuildHeader(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a header for the CF_HTML clipboard format.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlClipboard.SetHtml(System.Windows.DataObject,System.String)">
            <summary>
            Sets the TextDataFormat.Html on the data object to the specified html fragment.
            This helper methods takes care of creating the necessary CF_HTML header.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlClipboard.CreateHtmlFragment(ICSharpCode.AvalonEdit.Document.IDocument,ICSharpCode.AvalonEdit.Highlighting.IHighlighter,ICSharpCode.AvalonEdit.Document.ISegment,ICSharpCode.AvalonEdit.Highlighting.HtmlOptions)">
            <summary>
            Creates a HTML fragment from a part of a document.
            </summary>
            <param name="document">The document to create HTML from.</param>
            <param name="highlighter">The highlighter used to highlight the document. <c>null</c> is valid and will create HTML without any highlighting.</param>
            <param name="segment">The part of the document to create HTML for. You can pass <c>null</c> to create HTML for the whole document.</param>
            <param name="options">The options for the HTML creation.</param>
            <returns>HTML code for the document part.</returns>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HtmlOptions">
            <summary>
            Holds options for converting text to HTML.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlOptions.#ctor">
            <summary>
            Creates a default HtmlOptions instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlOptions.#ctor(ICSharpCode.AvalonEdit.TextEditorOptions)">
            <summary>
            Creates a new HtmlOptions instance that copies applicable options from the <see cref="T:ICSharpCode.AvalonEdit.TextEditorOptions"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HtmlOptions.TabSize">
            <summary>
            The amount of spaces a tab gets converted to.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlOptions.WriteStyleAttributeForColor(System.IO.TextWriter,ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
            <summary>
            Writes the HTML attribute for the style to the text writer.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlOptions.ColorNeedsSpanForStyling(ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
            <summary>
            Gets whether the color needs to be written out to HTML.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter">
            <summary>
            RichTextWriter implementation that produces HTML.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.#ctor(System.IO.TextWriter,ICSharpCode.AvalonEdit.Highlighting.HtmlOptions)">
            <summary>
            Creates a new HtmlRichTextWriter instance.
            </summary>
            <param name="htmlWriter">
            The text writer where the raw HTML is written to.
            The HtmlRichTextWriter does not take ownership of the htmlWriter;
            disposing the HtmlRichTextWriter will not dispose the underlying htmlWriter!
            </param>
            <param name="options">Options that control the HTML output.</param>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.Encoding">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.Flush">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.Write(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.Indent">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.Unindent">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.BeginUnhandledSpan">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.EndSpan">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.BeginSpan(System.Windows.Media.Color)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.BeginSpan(System.Windows.Media.FontFamily)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.BeginSpan(System.Windows.FontStyle)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.BeginSpan(System.Windows.FontWeight)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.BeginSpan(ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.HtmlRichTextWriter.BeginHyperlinkSpan(System.Uri)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.IHighlighter">
            <summary>
            Represents a highlighted document.
            </summary>
            <remarks>This interface is used by the <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingColorizer"/> to register the highlighter as a TextView service.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.Document">
            <summary>
            Gets the underlying text document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.GetColorStack(System.Int32)">
            <summary>
            Gets the stack of active colors (the colors associated with the active spans) at the end of the specified line.
            -> GetColorStack(1) returns the colors at the start of the second line.
            </summary>
            <remarks>
            GetColorStack(0) is valid and will return the empty stack.
            The elements are returned in inside-out order (first element of result enumerable is the color of the innermost span).
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.HighlightLine(System.Int32)">
            <summary>
            Highlights the specified document line.
            </summary>
            <param name="lineNumber">The line to highlight.</param>
            <returns>A <see cref="T:ICSharpCode.AvalonEdit.Highlighting.HighlightedLine"/> line object that represents the highlighted sections.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.UpdateHighlightingState(System.Int32)">
            <summary>
            Enforces a highlighting state update (triggering the HighlightingStateChanged event if necessary)
            for all lines up to (and inclusive) the specified line number.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.HighlightingStateChanged">
            <summary>
            Notification when the highlighter detects that the highlighting state at the
            <b>beginning</b> of the specified lines has changed.
            <c>fromLineNumber</c> and <c>toLineNumber</c> are both inclusive;
            the common case of a single-line change is represented by <c>fromLineNumber == toLineNumber</c>.
            
            During highlighting, the highlighting of line X will cause this event to be raised
            for line X+1 if the highlighting state at the end of line X has changed from its previous state.
            This event may also be raised outside of the highlighting process to signalize that
            changes to external data (not the document text; but e.g. semantic information)
            require a re-highlighting of the specified lines.
            </summary>
            <remarks>
            For implementers: there is the requirement that, during highlighting,
            if there was no state changed reported for the beginning of line X,
            and there were no document changes between the start of line X and the start of line Y (with Y > X),
            then this event must not be raised for any line between X and Y (inclusive).
            
            Equal input state + unchanged line = Equal output state.
            
            See the comment in the HighlightingColorizer.OnHighlightStateChanged implementation
            for details about the requirements for a correct custom IHighlighter.
            
            Outside of the highlighting process, this event can be raised without such restrictions.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.BeginHighlighting">
            <summary>
            Opens a group of <see cref="M:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.HighlightLine(System.Int32)"/> calls.
            It is not necessary to call this method before calling <see cref="M:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.HighlightLine(System.Int32)"/>,
            however, doing so can make the highlighting much more performant in some cases
            (e.g. the C# semantic highlighter in SharpDevelop will re-use the resolver within a highlighting group).
            </summary>
            <remarks>
            The group is closed by either a <see cref="M:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.EndHighlighting"/> or a <see cref="M:System.IDisposable.Dispose"/> call.
            Nested groups are not allowed.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.EndHighlighting">
            <summary>
            Closes the currently opened group of <see cref="M:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.HighlightLine(System.Int32)"/> calls.
            </summary>
            <seealso cref="M:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.BeginHighlighting"/>.
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.GetNamedColor(System.String)">
            <summary>
            Retrieves the HighlightingColor with the specified name. Returns null if no color matching the name is found.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.DefaultTextColor">
            <summary>
            Gets the default text color.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.HighlightingStateChangedEventHandler">
            <summary>
            Event handler for <see cref="E:ICSharpCode.AvalonEdit.Highlighting.IHighlighter.HighlightingStateChanged"/>
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition">
            <summary>
            A highlighting definition.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.Name">
            <summary>
            Gets the name of the highlighting definition.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.MainRuleSet">
            <summary>
            Gets the main rule set.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.GetNamedRuleSet(System.String)">
            <summary>
            Gets a rule set by name.
            </summary>
            <returns>The rule set, or null if it is not found.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.GetNamedColor(System.String)">
            <summary>
            Gets a named highlighting color.
            </summary>
            <returns>The highlighting color, or null if it is not found.</returns>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.NamedHighlightingColors">
            <summary>
            Gets the list of named highlighting colors.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition.Properties">
            <summary>
            Gets the list of properties.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver">
            <summary>
            Interface for resolvers that can solve cross-definition references.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver.GetDefinition(System.String)">
            <summary>
            Gets the highlighting definition by name, or null if it is not found.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.RichText">
            <summary>
            Represents a immutable piece text with highlighting information.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Highlighting.RichText.Empty">
            <summary>
            The empty string without any formatting information.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichText.#ctor(System.String,ICSharpCode.AvalonEdit.Highlighting.RichTextModel)">
            <summary>
            Creates a RichText instance with the given text and RichTextModel.
            </summary>
            <param name="text">
            The text to use in this RichText instance.
            </param>
            <param name="model">
            The model that contains the formatting to use for this RichText instance.
            <c>model.DocumentLength</c> should correspond to <c>text.Length</c>.
            This parameter may be null, in which case the RichText instance just holds plain text.
            </param>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.RichText.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.RichText.Length">
            <summary>
            Gets the text length.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichText.GetHighlightingAt(System.Int32)">
            <summary>
            Gets the HighlightingColor for the specified offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichText.GetHighlightedSections(System.Int32,System.Int32)">
            <summary>
            Retrieves the highlighted sections in the specified range.
            The highlighted sections will be sorted by offset, and there will not be any nested or overlapping sections.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichText.ToRichTextModel">
            <summary>
            Creates a new RichTextModel with the formatting from this RichText.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichText.ToString">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichText.CreateRuns">
            <summary>
            Creates WPF Run instances that can be used for TextBlock.Inlines.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichText.ToHtml(ICSharpCode.AvalonEdit.Highlighting.HtmlOptions)">
            <summary>
            Produces HTML code for the line, with &lt;span style="..."&gt; tags.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichText.ToHtml(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Highlighting.HtmlOptions)">
            <summary>
            Produces HTML code for a section of the line, with &lt;span style="..."&gt; tags.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichText.Substring(System.Int32,System.Int32)">
            <summary>
            Creates a substring of this rich text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichText.Concat(ICSharpCode.AvalonEdit.Highlighting.RichText[])">
            <summary>
            Concatenates the specified rich texts.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichText.op_Addition(ICSharpCode.AvalonEdit.Highlighting.RichText,ICSharpCode.AvalonEdit.Highlighting.RichText)">
            <summary>
            Concatenates the specified rich texts.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichText.op_Implicit(System.String)~ICSharpCode.AvalonEdit.Highlighting.RichText">
            <summary>
            Implicit conversion from string to RichText.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.RichTextColorizer">
            <summary>
            A colorizer that applies the highlighting from a <see cref="T:ICSharpCode.AvalonEdit.Highlighting.RichTextModel"/> to the editor.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextColorizer.#ctor(ICSharpCode.AvalonEdit.Highlighting.RichTextModel)">
            <summary>
            Creates a new RichTextColorizer instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextColorizer.ColorizeLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.RichTextModel">
            <summary>
            Stores rich-text formatting.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.#ctor">
            <summary>
            Creates a new RichTextModel.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.#ctor(System.Int32[],ICSharpCode.AvalonEdit.Highlighting.HighlightingColor[])">
            <summary>
            Creates a RichTextModel from a CONTIGUOUS list of HighlightedSections.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.UpdateOffsets(ICSharpCode.AvalonEdit.Document.TextChangeEventArgs)">
            <summary>
            Updates the start and end offsets of all segments stored in this collection.
            </summary>
            <param name="e">TextChangeEventArgs instance describing the change to the document.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.UpdateOffsets(ICSharpCode.AvalonEdit.Document.OffsetChangeMap)">
            <summary>
            Updates the start and end offsets of all segments stored in this collection.
            </summary>
            <param name="change">OffsetChangeMap instance describing the change to the document.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.UpdateOffsets(ICSharpCode.AvalonEdit.Document.OffsetChangeMapEntry)">
            <summary>
            Updates the start and end offsets of all segments stored in this collection.
            </summary>
            <param name="change">OffsetChangeMapEntry instance describing the change to the document.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.Append(System.Int32,System.Int32[],ICSharpCode.AvalonEdit.Highlighting.HighlightingColor[])">
            <summary>
            Appends another RichTextModel after this one.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.GetHighlightingAt(System.Int32)">
            <summary>
            Gets a copy of the HighlightingColor for the specified offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.ApplyHighlighting(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
            <summary>
            Applies the HighlightingColor to the specified range of text.
            If the color specifies <c>null</c> for some properties, existing highlighting is preserved.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.SetHighlighting(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
            <summary>
            Sets the HighlightingColor for the specified range of text,
            completely replacing the existing highlighting in that area.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.SetForeground(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Highlighting.HighlightingBrush)">
            <summary>
            Sets the foreground brush on the specified text segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.SetBackground(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Highlighting.HighlightingBrush)">
            <summary>
            Sets the background brush on the specified text segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.SetFontWeight(System.Int32,System.Int32,System.Windows.FontWeight)">
            <summary>
            Sets the font weight on the specified text segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.SetFontStyle(System.Int32,System.Int32,System.Windows.FontStyle)">
            <summary>
            Sets the font style on the specified text segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.GetHighlightedSections(System.Int32,System.Int32)">
            <summary>
            Retrieves the highlighted sections in the specified range.
            The highlighted sections will be sorted by offset, and there will not be any nested or overlapping sections.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModel.CreateRuns(ICSharpCode.AvalonEdit.Document.ITextSource)">
            <summary>
            Creates WPF Run instances that can be used for TextBlock.Inlines.
            </summary>
            <param name="textSource">The text source that holds the text for this RichTextModel.</param>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.RichTextModelWriter">
            <summary>
            A RichTextWriter that writes into a document and RichTextModel.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModelWriter.#ctor(ICSharpCode.AvalonEdit.Highlighting.RichTextModel,ICSharpCode.AvalonEdit.Document.IDocument,System.Int32)">
            <summary>
            Creates a new RichTextModelWriter that inserts into document, starting at insertionOffset.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.RichTextModelWriter.InsertionOffset">
            <summary>
            Gets/Sets the current insertion offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModelWriter.BeginUnhandledSpan">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModelWriter.EndSpan">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModelWriter.AfterWrite">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModelWriter.BeginSpan(System.Windows.Media.Color)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModelWriter.BeginSpan(System.Windows.Media.FontFamily)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModelWriter.BeginSpan(System.Windows.FontStyle)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModelWriter.BeginSpan(System.Windows.FontWeight)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.RichTextModelWriter.BeginSpan(ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.HighlightingLoader">
            <summary>
            Static class with helper methods to load XSHD highlighting files.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.HighlightingLoader.LoadXshd(System.Xml.XmlReader)">
            <summary>
            Lodas a syntax definition from the xml reader.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.HighlightingLoader.Load(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition,ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver)">
            <summary>
            Creates a highlighting definition from the XSHD file.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.HighlightingLoader.Load(System.Xml.XmlReader,ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinitionReferenceResolver)">
            <summary>
            Creates a highlighting definition from the XSHD file.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor">
            <summary>
            A visitor over the XSHD element tree.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitRuleSet(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet)">
            <summary>Visit method for XshdRuleSet</summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitColor(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor)">
            <summary>Visit method for XshdColor</summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitKeywords(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords)">
            <summary>Visit method for XshdKeywords</summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitSpan(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan)">
            <summary>Visit method for XshdSpan</summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitImport(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport)">
            <summary>Visit method for XshdImport</summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor.VisitRule(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule)">
            <summary>Visit method for XshdRule</summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.SaveXshdVisitor">
            <summary>
            Xshd visitor implementation that saves an .xshd file as XML.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Highlighting.Xshd.SaveXshdVisitor.Namespace">
            <summary>
            XML namespace for XSHD.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.SaveXshdVisitor.#ctor(System.Xml.XmlWriter)">
            <summary>
            Creates a new SaveXshdVisitor instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.SaveXshdVisitor.WriteDefinition(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition)">
            <summary>
            Writes the specified syntax definition.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.V1Loader">
            <summary>
            Loads .xshd files, version 1.0.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.V2Loader">
            <summary>
            Loads .xshd files, version 2.0.
            Version 2.0 files are recognized by the namespace.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.V2Loader.SetPosition(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement,System.Xml.XmlReader)">
            <summary>
            Sets the element's position to the XmlReader's position.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor">
            <summary>
            A color in an Xshd file.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.Name">
            <summary>
            Gets/sets the name.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.FontFamily">
            <summary>
            Gets/sets the font family
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.FontSize">
            <summary>
            Gets/sets the font size.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.Foreground">
            <summary>
            Gets/sets the foreground brush.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.Background">
            <summary>
            Gets/sets the background brush.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.FontWeight">
            <summary>
            Gets/sets the font weight.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.Underline">
            <summary>
            Gets/sets the underline flag
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.Strikethrough">
            <summary>
            Gets/sets the strikethrough flag
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.FontStyle">
            <summary>
            Gets/sets the font style.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.ExampleText">
            <summary>
            Gets/Sets the example text that demonstrates where the color is used.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.#ctor">
            <summary>
            Creates a new XshdColor instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes an XshdColor.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes this XshdColor instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdColor.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement">
            <summary>
            An element in a XSHD rule set.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement.LineNumber">
            <summary>
            Gets the line number in the .xshd file.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement.ColumnNumber">
            <summary>
            Gets the column number in the .xshd file.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdElement.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <summary>
            Applies the visitor to this element.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport">
            <summary>
            &lt;Import&gt; element.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport.RuleSetReference">
            <summary>
            Gets/sets the referenced rule set.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdImport.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords">
            <summary>
            A list of keywords.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords.ColorReference">
            <summary>
            The color.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords.Words">
            <summary>
            Gets the list of key words.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdKeywords.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdProperty">
            <summary>
            A property in an Xshd file.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdProperty.Name">
            <summary>
            Gets/sets the name.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdProperty.Value">
            <summary>
            Gets/sets the value.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdProperty.#ctor">
            <summary>
            Creates a new XshdColor instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdProperty.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1">
            <summary>
            A reference to an xshd color, or an inline xshd color.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.ReferencedDefinition">
            <summary>
            Gets the reference.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.ReferencedElement">
            <summary>
            Gets the reference.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.InlineElement">
            <summary>
            Gets the inline element.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.#ctor(System.String,System.String)">
            <summary>
            Creates a new XshdReference instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.#ctor(`0)">
            <summary>
            Creates a new XshdReference instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <summary>
            Applies the visitor to the inline element, if there is any.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.Equals(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0})">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.op_Equality(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0},ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0})">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference`1.op_Inequality(ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0},ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdReference{`0})">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule">
            <summary>
            &lt;Rule&gt; element.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule.Regex">
            <summary>
            Gets/sets the rule regex.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule.RegexType">
            <summary>
            Gets/sets the rule regex type.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule.ColorReference">
            <summary>
            Gets/sets the color reference.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRule.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet">
            <summary>
            A rule set in a XSHD file.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.Name">
            <summary>
            Gets/Sets the name of the rule set.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.IgnoreCase">
            <summary>
            Gets/sets whether the case is ignored in expressions inside this rule set.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.Elements">
            <summary>
            Gets the collection of elements.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.AcceptElements(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <summary>
            Applies the visitor to all elements.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRuleSet.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRegexType">
            <summary>
            Specifies the type of the regex.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRegexType.Default">
            <summary>
            Normal regex. Used when the regex was specified as attribute.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdRegexType.IgnorePatternWhitespace">
            <summary>
            Ignore pattern whitespace / allow regex comments. Used when the regex was specified as text element.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan">
            <summary>
            &lt;Span&gt; element.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.BeginRegex">
            <summary>
            Gets/sets the begin regex.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.BeginRegexType">
            <summary>
            Gets/sets the begin regex type.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.EndRegex">
            <summary>
            Gets/sets the end regex.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.EndRegexType">
            <summary>
            Gets/sets the end regex type.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.Multiline">
            <summary>
            Gets/sets whether the span is multiline.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.RuleSetReference">
            <summary>
            Gets/sets the rule set reference.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.SpanColorReference">
            <summary>
            Gets/sets the span color.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.BeginColorReference">
            <summary>
            Gets/sets the span begin color.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.EndColorReference">
            <summary>
            Gets/sets the span end color.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSpan.AcceptVisitor(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition">
            <summary>
            A &lt;SyntaxDefinition&gt; element.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.#ctor">
            <summary>
            Creates a new XshdSyntaxDefinition object.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.Name">
            <summary>
            Gets/sets the definition name
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.Extensions">
            <summary>
            Gets the associated extensions.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.Elements">
            <summary>
            Gets the collection of elements.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Highlighting.Xshd.XshdSyntaxDefinition.AcceptElements(ICSharpCode.AvalonEdit.Highlighting.Xshd.IXshdVisitor)">
            <summary>
            Applies the visitor to all elements.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy">
            <summary>
            Smart indentation for C#.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy.#ctor">
            <summary>
            Creates a new CSharpIndentationStrategy.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy.#ctor(ICSharpCode.AvalonEdit.TextEditorOptions)">
            <summary>
            Creates a new CSharpIndentationStrategy and initializes the settings using the text editor options.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy.IndentationString">
            <summary>
            Gets/Sets the indentation string.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy.Indent(ICSharpCode.AvalonEdit.Indentation.CSharp.IDocumentAccessor,System.Boolean)">
            <summary>
            Performs indentation using the specified document accessor.
            </summary>
            <param name="document">Object used for accessing the document line-by-line</param>
            <param name="keepEmptyLines">Specifies whether empty lines should be kept</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy.IndentLine(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <inheritdoc cref="M:ICSharpCode.AvalonEdit.Indentation.IIndentationStrategy.IndentLine(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine)"/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy.IndentLines(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32,System.Int32)">
            <inheritdoc cref="M:ICSharpCode.AvalonEdit.Indentation.IIndentationStrategy.IndentLines(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.CSharpIndentationStrategy.OnLineChanged(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine,System.String)">
            <inheritdoc cref="M:ICSharpCode.AvalonEdit.Indentation.ILineChangedListener.OnLineChanged(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine,System.String)"/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Indentation.CSharp.IDocumentAccessor">
            <summary>
            Interface used for the indentation class to access the document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Indentation.CSharp.IDocumentAccessor.IsReadOnly">
            <summary>Gets if the current line is read only (because it is not in the
            selected text region)</summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Indentation.CSharp.IDocumentAccessor.LineNumber">
            <summary>Gets the number of the current line.</summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Indentation.CSharp.IDocumentAccessor.Text">
            <summary>Gets/Sets the text of the current line.</summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.IDocumentAccessor.MoveNext">
            <summary>Advances to the next line.</summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Indentation.CSharp.TextDocumentAccessor">
            <summary>
            Adapter IDocumentAccessor -> TextDocument
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.TextDocumentAccessor.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument)">
            <summary>
            Creates a new TextDocumentAccessor.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.TextDocumentAccessor.#ctor(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32,System.Int32)">
            <summary>
            Creates a new TextDocumentAccessor that indents only a part of the document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Indentation.CSharp.TextDocumentAccessor.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Indentation.CSharp.TextDocumentAccessor.LineNumber">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Indentation.CSharp.TextDocumentAccessor.Text">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.CSharp.TextDocumentAccessor.MoveNext">
            <inheritdoc/>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Indentation.CSharp.IndentationSettings.LeaveEmptyLines">
            <summary>Leave empty lines empty.</summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Indentation.CSharp.IndentationReformatter.Block">
            <summary>
            An indentation block. Tracks the state of the indentation.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Indentation.CSharp.IndentationReformatter.Block.OuterIndent">
            <summary>
            The indentation outside of the block.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Indentation.CSharp.IndentationReformatter.Block.InnerIndent">
            <summary>
            The indentation inside the block.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Indentation.CSharp.IndentationReformatter.Block.LastWord">
            <summary>
            The last word that was seen inside this block.
            Because parenthesis open a sub-block and thus don't change their parent's LastWord,
            this property can be used to identify the type of block statement (if, while, switch)
            at the position of the '{'.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Indentation.CSharp.IndentationReformatter.Block.Bracket">
            <summary>
            The type of bracket that opened this block (, [ or {
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Indentation.CSharp.IndentationReformatter.Block.Continuation">
            <summary>
            Gets whether there's currently a line continuation going on inside this block.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Indentation.CSharp.IndentationReformatter.Block.OneLineBlock">
            <summary>
            Gets whether there's currently a 'one-line-block' going on. 'one-line-blocks' occur
            with if statements that don't use '{}'. They are not represented by a Block instance on
            the stack, but are instead handled similar to line continuations.
            This property is an integer because there might be multiple nested one-line-blocks.
            As soon as there is a finished statement, OneLineBlock is reset to 0.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Indentation.CSharp.IndentationReformatter.Block.PreviousOneLineBlock">
            <summary>
            The previous value of one-line-block before it was reset.
            Used to restore the indentation of 'else' to the correct level.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Indentation.CSharp.IndentationReformatter.Block.StartLine">
            <summary>
            Gets the line number where this block started.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Indentation.DefaultIndentationStrategy">
            <summary>
            Handles indentation by copying the indentation from the previous line.
            Does not support indenting multiple lines.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.DefaultIndentationStrategy.IndentLine(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.DefaultIndentationStrategy.IndentLines(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32,System.Int32)">
            <summary>
            Does nothing: indenting multiple lines is useless without a smart indentation strategy.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Indentation.IIndentationStrategy">
            <summary>
            Strategy how the text editor handles indentation when new lines are inserted.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.IIndentationStrategy.IndentLine(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Sets the indentation for the specified line.
            Usually this is constructed from the indentation of the previous line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.IIndentationStrategy.IndentLines(ICSharpCode.AvalonEdit.Document.TextDocument,System.Int32,System.Int32)">
            <summary>
            Reindents a set of lines.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Indentation.ILineChangedListener">
            <summary>
            Allows the indentation strategy to listen to Line changes
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Indentation.ILineChangedListener.OnLineChanged(ICSharpCode.AvalonEdit.Document.TextDocument,ICSharpCode.AvalonEdit.Document.DocumentLine,System.String)">
            <summary>
            Allows the indentation strategy to act based upon the user entering new text.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder">
            <summary>
            Helper for creating a PathGeometry.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.CornerRadius">
            <summary>
            Gets/sets the radius of the rounded corners.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.AlignToWholePixels">
            <summary>
            Gets/Sets whether to align to whole pixels.
            
            If BorderThickness is set to 0, the geometry is aligned to whole pixels.
            If BorderThickness is set to a non-zero value, the outer edge of the border is aligned
            to whole pixels.
            
            The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.BorderThickness">
            <summary>
            Gets/sets the border thickness.
            
            This property only has an effect if <c>AlignToWholePixels</c> is enabled.
            When using the resulting geometry to paint a border, set this property to the border thickness.
            Otherwise, leave the property set to the default value <c>0</c>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.ExtendToFullWidthAtLineEnd">
            <summary>
            Gets/Sets whether to extend the rectangles to full width at line end.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.#ctor">
            <summary>
            Creates a new BackgroundGeometryBuilder instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.AddSegment(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Document.ISegment)">
            <summary>
            Adds the specified segment to the geometry.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.AddRectangle(ICSharpCode.AvalonEdit.Rendering.TextView,System.Windows.Rect)">
            <summary>
            Adds a rectangle to the geometry.
            </summary>
            <remarks>
            This overload will align the coordinates according to
            <see cref="P:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.AlignToWholePixels"/>.
            Use the <see cref="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.AddRectangle(System.Double,System.Double,System.Double,System.Double)"/>-overload instead if the coordinates should not be aligned.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.GetRectsForSegment(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Document.ISegment,System.Boolean)">
            <summary>
            Calculates the list of rectangle where the segment in shown.
            This method usually returns one rectangle for each line inside the segment
            (but potentially more, e.g. when bidirectional text is involved).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.GetRectsFromVisualSegment(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Rendering.VisualLine,System.Int32,System.Int32)">
            <summary>
            Calculates the rectangles for the visual column segment.
            This returns one rectangle for each line inside the segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.AddRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a rectangle to the geometry.
            </summary>
            <remarks>
            This overload assumes that the coordinates are aligned properly
            (see <see cref="P:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.AlignToWholePixels"/>).
            Use the <see cref="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.AddRectangle(ICSharpCode.AvalonEdit.Rendering.TextView,System.Windows.Rect)"/>-overload instead if the coordinates are not yet aligned.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.CloseFigure">
            <summary>
            Closes the current figure.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.BackgroundGeometryBuilder.CreateGeometry">
            <summary>
            Creates the geometry.
            Returns null when the geometry is empty!
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection">
            <summary>
            Represents a collapsed line section.
            Use the Uncollapse() method to uncollapse the section.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection.IsCollapsed">
            <summary>
            Gets if the document line is collapsed.
            This property initially is true and turns to false when uncollapsing the section.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection.Start">
            <summary>
            Gets the start line of the section.
            When the section is uncollapsed or the text containing it is deleted,
            this property returns null.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection.End">
            <summary>
            Gets the end line of the section.
            When the section is uncollapsed or the text containing it is deleted,
            this property returns null.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection.Uncollapse">
            <summary>
            Uncollapses the section.
            This causes the Start and End properties to be set to null!
            Does nothing if the section is already uncollapsed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection.ToString">
            <summary>
            Gets a string representation of the collapsed section.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer">
            <summary>
            Base class for <see cref="T:ICSharpCode.AvalonEdit.Rendering.IVisualLineTransformer"/> that helps
            splitting visual elements so that colors (and other text properties) can be easily assigned
            to individual words/characters.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.CurrentElements">
            <summary>
            Gets the list of elements currently being transformed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.Transform(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Rendering.VisualLineElement})">
            <summary>
            <see cref="M:ICSharpCode.AvalonEdit.Rendering.IVisualLineTransformer.Transform(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Rendering.VisualLineElement})"/> implementation.
            Sets <see cref="P:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.CurrentElements"/> and calls <see cref="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.Colorize(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.Colorize(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <summary>
            Performs the colorization.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.ChangeVisualElements(System.Int32,System.Int32,System.Action{ICSharpCode.AvalonEdit.Rendering.VisualLineElement})">
            <summary>
            Changes visual element properties.
            This method accesses <see cref="P:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.CurrentElements"/>, so it must be called only during
            a <see cref="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.Transform(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Rendering.VisualLineElement})"/> call.
            This method splits <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement"/>s as necessary to ensure that the region
            can be colored by setting the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.TextRunProperties"/> of whole elements,
            and then calls the <paramref name="action"/> on all elements in the region.
            </summary>
            <param name="visualStartColumn">Start visual column of the region to change</param>
            <param name="visualEndColumn">End visual column of the region to change</param>
            <param name="action">Action that changes an individual <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement"/>.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.OnAddToTextView(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <summary>
            Called when added to a text view.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.ColorizingTransformer.OnRemoveFromTextView(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <summary>
            Called when removed from a text view.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.ColumnRulerRenderer">
            <summary>
            Renders a ruler at a certain column.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties">
            <summary>
            Default implementation for TextRunTypographyProperties.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.Variants">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet1">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet2">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet3">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet4">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet5">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet6">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet7">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet8">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet9">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet10">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet11">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet12">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet13">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet14">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet15">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet16">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet17">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet18">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet19">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticSet20">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StylisticAlternates">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StandardSwashes">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.StandardLigatures">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.SlashedZero">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.NumeralStyle">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.NumeralAlignment">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.MathematicalGreek">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.Kerning">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.HistoricalLigatures">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.HistoricalForms">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.Fraction">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.EastAsianWidths">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.EastAsianLanguage">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.EastAsianExpertForms">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.DiscretionaryLigatures">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.ContextualSwashes">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.ContextualLigatures">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.ContextualAlternates">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.CaseSensitiveForms">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.CapitalSpacing">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.Capitals">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DefaultTextRunTypographyProperties.AnnotationAlternates">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.DocumentColorizingTransformer">
            <summary>
            Base class for <see cref="T:ICSharpCode.AvalonEdit.Rendering.IVisualLineTransformer"/> that helps
            colorizing the document. Derived classes can work with document lines
            and text offsets and this class takes care of the visual lines and visual columns.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.DocumentColorizingTransformer.CurrentContext">
            <summary>
            Gets the current ITextRunConstructionContext.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.DocumentColorizingTransformer.Colorize(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.DocumentColorizingTransformer.ColorizeLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Override this method to colorize an individual document line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.DocumentColorizingTransformer.ChangeLinePart(System.Int32,System.Int32,System.Action{ICSharpCode.AvalonEdit.Rendering.VisualLineElement})">
            <summary>
            Changes a part of the current document line.
            </summary>
            <param name="startOffset">Start offset of the region to change</param>
            <param name="endOffset">End offset of the region to change</param>
            <param name="action">Action that changes an individual <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement"/>.</param>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement">
            <summary>
            Formatted text (not normal document text).
            This is used as base class for various VisualLineElements that are displayed using a
            FormattedText, for example newline markers or collapsed folding sections.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new FormattedTextElement that displays the specified text
            and occupies the specified length in the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement.#ctor(System.Windows.Media.TextFormatting.TextLine,System.Int32)">
            <summary>
            Creates a new FormattedTextElement that displays the specified text
            and occupies the specified length in the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement.#ctor(System.Windows.Media.FormattedText,System.Int32)">
            <summary>
            Creates a new FormattedTextElement that displays the specified text
            and occupies the specified length in the document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement.BreakBefore">
            <summary>
            Gets/sets the line break condition before the element.
            The default is 'BreakPossible'.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement.BreakAfter">
            <summary>
            Gets/sets the line break condition after the element.
            The default is 'BreakPossible'.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement.CreateTextRun(System.Int32,ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement.PrepareText(System.Windows.Media.TextFormatting.TextFormatter,System.String,System.Windows.Media.TextFormatting.TextRunProperties)">
            <summary>
            Constructs a TextLine from a simple text.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun">
            <summary>
            This is the TextRun implementation used by the <see cref="T:ICSharpCode.AvalonEdit.Rendering.FormattedTextElement"/> class.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.#ctor(ICSharpCode.AvalonEdit.Rendering.FormattedTextElement,System.Windows.Media.TextFormatting.TextRunProperties)">
            <summary>
            Creates a new FormattedTextRun.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.Element">
            <summary>
            Gets the element for which the FormattedTextRun was created.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.BreakBefore">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.BreakAfter">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.HasFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.CharacterBufferReference">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.Length">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.Properties">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.Format(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.ComputeBoundingBox(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.FormattedTextRun.Draw(System.Windows.Media.DrawingContext,System.Windows.Point,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.HeightTree">
            <summary>
            Red-black tree similar to DocumentLineTree, augmented with collapsing and height data.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.HeightTree.RebuildDocument">
            <summary>
            Rebuild the tree, in O(n).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.HeightTree.BuildTree(ICSharpCode.AvalonEdit.Rendering.HeightTreeNode[],System.Int32,System.Int32,System.Int32)">
            <summary>
            build a tree from a list of nodes
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.HeightTree.CollapseText(ICSharpCode.AvalonEdit.Document.DocumentLine,ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Collapses the specified text section.
            Runtime: O(log n)
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.HeightTree.CheckAllContainedIn(System.Collections.Generic.IEnumerable{ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection},System.Collections.Generic.ICollection{ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection})">
            <summary>
            Checks that all elements in list1 are contained in list2.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.HeightTreeLineNode.TotalHeight">
            <summary>
            Returns 0 if the line is directly collapsed, otherwise, returns <see cref="F:ICSharpCode.AvalonEdit.Rendering.HeightTreeLineNode.height"/>.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.HeightTreeNode">
            <summary>
            A node in the text view's height tree.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.HeightTreeNode.Successor">
            <summary>
            Gets the inorder successor of the node.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.HeightTreeNode.totalCount">
            <summary>
            The number of lines in this node and its child nodes.
            Invariant:
              totalCount = 1 + left.totalCount + right.totalCount
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.HeightTreeNode.totalHeight">
            <summary>
            The total height of this node and its child nodes, excluding directly collapsed nodes.
            Invariant:
              totalHeight = left.IsDirectlyCollapsed ? 0 : left.totalHeight
                          + lineNode.IsDirectlyCollapsed ? 0 : lineNode.Height
                          + right.IsDirectlyCollapsed ? 0 : right.totalHeight
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.HeightTreeNode.collapsedSections">
            <summary>
            List of the sections that hold this node collapsed.
            Invariant 1:
              For each document line in the range described by a CollapsedSection, exactly one ancestor
              contains that CollapsedSection.
            Invariant 2:
              A CollapsedSection is contained either in left+middle or middle+right or just middle.
            Invariant 3:
              Start and end of a CollapsedSection always contain the collapsedSection in their
              documentLine (middle node).
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.IBackgroundRenderer">
            <summary>
            Background renderers draw in the background of a known layer.
            You can use background renderers to draw non-interactive elements on the TextView
            without introducing new UIElements.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.IBackgroundRenderer.Layer">
            <summary>
            Gets the layer on which this background renderer should draw.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.IBackgroundRenderer.Draw(ICSharpCode.AvalonEdit.Rendering.TextView,System.Windows.Media.DrawingContext)">
            <summary>
            Causes the background renderer to draw.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.InlineObjectElement">
            <summary>
            A inline UIElement in the document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectElement.Element">
            <summary>
            Gets the inline element that is displayed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.InlineObjectElement.#ctor(System.Int32,System.Windows.UIElement)">
            <summary>
            Creates a new InlineObjectElement.
            </summary>
            <param name="documentLength">The length of the element in the document. Must be non-negative.</param>
            <param name="element">The element to display.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.InlineObjectElement.CreateTextRun(System.Int32,ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun">
            <summary>
            A text run with an embedded UIElement.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.#ctor(System.Int32,System.Windows.Media.TextFormatting.TextRunProperties,System.Windows.UIElement)">
            <summary>
            Creates a new InlineObjectRun instance.
            </summary>
            <param name="length">The length of the TextRun.</param>
            <param name="properties">The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> to use.</param>
            <param name="element">The <see cref="T:System.Windows.UIElement"/> to display.</param>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.Element">
            <summary>
            Gets the element displayed by the InlineObjectRun.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.VisualLine">
            <summary>
            Gets the VisualLine that contains this object. This property is only available after the object
            was added to the text view.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.BreakBefore">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.BreakAfter">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.HasFixedSize">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.CharacterBufferReference">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.Length">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.Properties">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.Format(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.ComputeBoundingBox(System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.InlineObjectRun.Draw(System.Windows.Media.DrawingContext,System.Windows.Point,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext">
            <summary>
            Contains information relevant for text run creation.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext.Document">
            <summary>
            Gets the text document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext.TextView">
            <summary>
            Gets the text view for which the construction runs.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext.VisualLine">
            <summary>
            Gets the visual line that is currently being constructed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext.GlobalTextRunProperties">
            <summary>
            Gets the global text run properties.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext.GetText(System.Int32,System.Int32)">
            <summary>
            Gets a piece of text from the document.
            </summary>
            <remarks>
            This method is allowed to return a larger string than requested.
            It does this by returning a <see cref="T:ICSharpCode.AvalonEdit.Utils.StringSegment"/> that describes the requested segment within the returned string.
            This method should be the preferred text access method in the text transformation pipeline, as it can avoid repeatedly allocating string instances
            for text within the same line.
            </remarks>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.ITextViewConnect">
            <summary>
            Allows <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator"/>s, <see cref="T:ICSharpCode.AvalonEdit.Rendering.IVisualLineTransformer"/>s and
            <see cref="T:ICSharpCode.AvalonEdit.Rendering.IBackgroundRenderer"/>s to be notified when they are added or removed from a text view.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.ITextViewConnect.AddToTextView(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <summary>
            Called when added to a text view.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.ITextViewConnect.RemoveFromTextView(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <summary>
            Called when removed from a text view.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.IVisualLineTransformer">
            <summary>
            Allows transforming visual line elements.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.IVisualLineTransformer.Transform(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Rendering.VisualLineElement})">
            <summary>
            Applies the transformation to the specified list of visual line elements.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.Layer">
            <summary>
            Base class for known layers.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.KnownLayer">
            <summary>
            An enumeration of well-known layers.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.KnownLayer.Background">
            <summary>
            This layer is in the background.
            There is no UIElement to represent this layer, it is directly drawn in the TextView.
            It is not possible to replace the background layer or insert new layers below it.
            </summary>
            <remarks>This layer is below the Selection layer.</remarks>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.KnownLayer.Selection">
            <summary>
            This layer contains the selection rectangle.
            </summary>
            <remarks>This layer is between the Background and the Text layers.</remarks>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.KnownLayer.Text">
            <summary>
            This layer contains the text and inline UI elements.
            </summary>
            <remarks>This layer is between the Selection and the Caret layers.</remarks>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.KnownLayer.Caret">
            <summary>
            This layer contains the blinking caret.
            </summary>
            <remarks>This layer is above the Text layer.</remarks>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.LayerInsertionPosition">
            <summary>
            Specifies where a new layer is inserted, in relation to an old layer.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.LayerInsertionPosition.Below">
            <summary>
            The new layer is inserted below the specified layer.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.LayerInsertionPosition.Replace">
            <summary>
            The new layer replaces the specified layer. The old layer is removed
            from the <see cref="P:ICSharpCode.AvalonEdit.Rendering.TextView.Layers"/> collection.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.LayerInsertionPosition.Above">
            <summary>
            The new layer is inserted above the specified layer.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator">
            <summary>
            Detects hyperlinks and makes them clickable.
            </summary>
            <remarks>
            This element generator can be easily enabled and configured using the
            <see cref="T:ICSharpCode.AvalonEdit.TextEditorOptions"/>.
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.RequireControlModifierForClick">
            <summary>
            Gets/Sets whether the user needs to press Control to click the link.
            The default value is true.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.#ctor">
            <summary>
            Creates a new LinkElementGenerator.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a new LinkElementGenerator using the specified regex.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.GetFirstInterestedOffset(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.ConstructElement(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.ConstructElementFromMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Constructs a VisualLineElement that replaces the matched text.
            The default implementation will create a <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText"/>
            based on the URI provided by <see cref="M:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.GetUriFromMatch(System.Text.RegularExpressions.Match)"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.LinkElementGenerator.GetUriFromMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Fetches the URI from the regex match. Returns null if the URI format is invalid.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.MailLinkElementGenerator">
            <summary>
            Detects e-mail addresses and makes them clickable.
            </summary>
            <remarks>
            This element generator can be easily enabled and configured using the
            <see cref="T:ICSharpCode.AvalonEdit.TextEditorOptions"/>.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.MailLinkElementGenerator.#ctor">
            <summary>
            Creates a new MailLinkElementGenerator.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic">
            <summary>
            Encapsulates and adds MouseHover support to UIElements.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.#ctor(System.Windows.UIElement)">
            <summary>
            Creates a new instance and attaches itself to the <paramref name="target" /> UIElement.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.MouseHover">
            <summary>
            Occurs when the mouse starts hovering over a certain location.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.OnMouseHover(System.Windows.Input.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.MouseHover"/> event.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.MouseHoverStopped">
            <summary>
            Occurs when the mouse stops hovering over a certain location.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.OnMouseHoverStopped(System.Windows.Input.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.MouseHoverStopped"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.MouseHoverLogic.Dispose">
            <summary>
            Removes the MouseHover support from the target UIElement.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.SingleCharacterElementGenerator">
            <summary>
            Element generator that displays · for spaces and » for tabs and a box for control characters.
            </summary>
            <remarks>
            This element generator is present in every TextView by default; the enabled features can be configured using the
            <see cref="T:ICSharpCode.AvalonEdit.TextEditorOptions"/>.
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.SingleCharacterElementGenerator.ShowSpaces">
            <summary>
            Gets/Sets whether to show · for spaces.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.SingleCharacterElementGenerator.ShowTabs">
            <summary>
            Gets/Sets whether to show » for tabs.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.SingleCharacterElementGenerator.ShowBoxForControlCharacters">
            <summary>
            Gets/Sets whether to show a box with the hex code for control characters.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.SingleCharacterElementGenerator.#ctor">
            <summary>
            Creates a new SingleCharacterElementGenerator instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.TextLayer">
            <summary>
            The control that contains the text.
            
            This control is used to allow other UIElements to be placed inside the TextView but
            behind the text.
            The text rendering process (VisualLine creation) is controlled by the TextView, this
            class simply displays the created Visual Lines.
            </summary>
            <remarks>
            This class does not contain any input handling and is invisible to hit testing. Input
            is handled by the TextView.
            This allows UIElements that are displayed behind the text, but still can react to mouse input.
            </remarks>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextLayer.index">
            <summary>
            the index of the text layer in the layers collection
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.TextView">
            <summary>
            A virtualizing panel producing+showing <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLine"/>s for a <see cref="T:ICSharpCode.AvalonEdit.Document.TextDocument"/>.
            
            This is the heart of the text editor, this class controls the text rendering process.
            
            Taken as a standalone control, it's a text viewer without any editing capability.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.#ctor">
            <summary>
            Creates a new TextView instance.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.DocumentProperty">
            <summary>
            Document property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.Document">
            <summary>
            Gets/Sets the document displayed by the text editor.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.DocumentChanged">
            <summary>
            Occurs when the document property has changed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.RecreateTextFormatter">
            <summary>
            Recreates the text formatter that is used internally
            by calling <see cref="M:ICSharpCode.AvalonEdit.Utils.TextFormatterFactory.Create(System.Windows.DependencyObject)"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <inheritdoc cref="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)"/>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.OptionsProperty">
            <summary>
            Options property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.Options">
            <summary>
            Gets/Sets the options used by the text editor.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.OptionChanged">
            <summary>
            Occurs when a text editor option has changed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.OnOptionChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.Rendering.TextView.OptionChanged"/> event.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.ElementGenerators">
            <summary>
            Gets a collection where element generators can be registered.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.LineTransformers">
            <summary>
            Gets a collection where line transformers can be registered.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.Layers">
            <summary>
            Gets the list of layers displayed in the text view.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.InsertLayer(System.Windows.UIElement,ICSharpCode.AvalonEdit.Rendering.KnownLayer,ICSharpCode.AvalonEdit.Rendering.LayerInsertionPosition)">
            <summary>
            Inserts a new layer at a position specified relative to an existing layer.
            </summary>
            <param name="layer">The new layer to insert.</param>
            <param name="referencedLayer">The existing layer</param>
            <param name="position">Specifies whether the layer is inserted above,below, or replaces the referenced layer</param>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.VisualChildrenCount">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetVisualChild(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.LogicalChildren">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.AddInlineObject(ICSharpCode.AvalonEdit.Rendering.InlineObjectRun)">
            <summary>
            Adds a new inline object.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.RemoveInlineObjectsNow">
            <summary>
            Remove the inline objects that were marked for removal.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.NonPrintableCharacterBrushProperty">
            <summary>
            NonPrintableCharacterBrush dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.NonPrintableCharacterBrush">
            <summary>
            Gets/sets the Brush used for displaying non-printable characters.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.LinkTextForegroundBrushProperty">
            <summary>
            LinkTextForegroundBrush dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.LinkTextForegroundBrush">
            <summary>
            Gets/sets the Brush used for displaying link texts.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.LinkTextBackgroundBrushProperty">
            <summary>
            LinkTextBackgroundBrush dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.LinkTextBackgroundBrush">
            <summary>
            Gets/sets the Brush used for the background of link texts.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.LinkTextUnderlineProperty">
            <summary>
            LinkTextUnderlinedBrush dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.LinkTextUnderline">
            <summary>
            Gets/sets whether to underline link texts.
            </summary>
            <remarks>
            Note that when setting this property to false, link text remains clickable and the LinkTextForegroundBrush (if any) is still applied.
            Set TextEditorOptions.EnableHyperlinks and EnableEmailHyperlinks to false to disable links completely.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.Redraw">
            <summary>
            Causes the text editor to regenerate all visual lines.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.Redraw(System.Windows.Threading.DispatcherPriority)">
            <summary>
            Causes the text editor to regenerate all visual lines.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.Redraw(ICSharpCode.AvalonEdit.Rendering.VisualLine,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Causes the text editor to regenerate the specified visual line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.Redraw(System.Int32,System.Int32,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Causes the text editor to redraw all lines overlapping with the specified segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.InvalidateLayer(ICSharpCode.AvalonEdit.Rendering.KnownLayer)">
            <summary>
            Causes a known layer to redraw.
            This method does not invalidate visual lines;
            use the <see cref="M:ICSharpCode.AvalonEdit.Rendering.TextView.Redraw"/> method to do that.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.InvalidateLayer(ICSharpCode.AvalonEdit.Rendering.KnownLayer,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Causes a known layer to redraw.
            This method does not invalidate visual lines;
            use the <see cref="M:ICSharpCode.AvalonEdit.Rendering.TextView.Redraw"/> method to do that.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.Redraw(ICSharpCode.AvalonEdit.Document.ISegment,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Causes the text editor to redraw all lines overlapping with the specified segment.
            Does nothing if segment is null.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.ClearVisualLines">
            <summary>
            Invalidates all visual lines.
            The caller of ClearVisualLines() must also call InvalidateMeasure() to ensure
            that the visual lines will be recreated.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetVisualLine(System.Int32)">
            <summary>
            Gets the visual line that contains the document line with the specified number.
            Returns null if the document line is outside the visible range.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetOrConstructVisualLine(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Gets the visual line that contains the document line with the specified number.
            If that line is outside the visible range, a new VisualLine for that document line is constructed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLines">
            <summary>
            Gets the currently visible visual lines.
            </summary>
            <exception cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLinesInvalidException">
            Gets thrown if there are invalid visual lines when this property is accessed.
            You can use the <see cref="P:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLinesValid"/> property to check for this case,
            or use the <see cref="M:ICSharpCode.AvalonEdit.Rendering.TextView.EnsureVisualLines"/> method to force creating the visual lines
            when they are invalid.
            </exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLinesValid">
            <summary>
            Gets whether the visual lines are valid.
            Will return false after a call to Redraw().
            Accessing the visual lines property will cause a <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLinesInvalidException"/>
            if this property is <c>false</c>.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLineConstructionStarting">
            <summary>
            Occurs when the TextView is about to be measured and will regenerate its visual lines.
            This event may be used to mark visual lines as invalid that would otherwise be reused.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLinesChanged">
            <summary>
            Occurs when the TextView was measured and changed its visual lines.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.EnsureVisualLines">
            <summary>
            If the visual lines are invalid, creates new visual lines for the visible part
            of the document.
            If all visual lines are valid, this method does nothing.
            </summary>
            <exception cref="T:System.InvalidOperationException">The visual line build process is already running.
            It is not allowed to call this method during the construction of a visual line.</exception>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.AdditionalHorizontalScrollAmount">
            <summary>
            Additonal amount that allows horizontal scrolling past the end of the longest line.
            This is necessary to ensure the caret always is visible, even when it is at the end of the longest line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.MeasureOverride(System.Windows.Size)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.CreateAndMeasureVisualLines(System.Windows.Size)">
            <summary>
            Build all VisualLines in the visible range.
            </summary>
            <returns>Width the longest line</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arrange implementation.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.BackgroundRenderers">
            <summary>
            Gets the list of background renderers.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.OnRender(System.Windows.Media.DrawingContext)">
            <inheritdoc/>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.scrollExtent">
            <summary>
            Size of the document, in pixels.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.scrollOffset">
            <summary>
            Offset of the scroll position.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.scrollViewport">
            <summary>
            Size of the viewport.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.HorizontalOffset">
            <summary>
            Gets the horizontal scroll offset.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.VerticalOffset">
            <summary>
            Gets the vertical scroll offset.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.ScrollOffset">
            <summary>
            Gets the scroll offset;
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.ScrollOffsetChanged">
            <summary>
            Occurs when the scroll offset has changed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.WideSpaceWidth">
            <summary>
            Gets the width of a 'wide space' (the space width used for calculating the tab size).
            </summary>
            <remarks>
            This is the width of an 'x' in the current font.
            We do not measure the width of an actual space as that would lead to tiny tabs in
            some proportional fonts.
            For monospaced fonts, this property will return the expected value, as 'x' and ' ' have the same width.
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.DefaultLineHeight">
            <summary>
            Gets the default line height. This is the height of an empty line or a line containing regular text.
            Lines that include formatted text or custom UI elements may have a different line height.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.DefaultBaseline">
            <summary>
            Gets the default baseline position. This is the difference between <see cref="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.TextTop"/>
            and <see cref="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.Baseline"/> for a line containing regular text.
            Lines that include formatted text or custom UI elements may have a different baseline.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.MakeVisible(System.Windows.Rect)">
            <summary>
            Scrolls the text view so that the specified rectangle gets visible.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.InvalidateCursor">
            <summary>
            Updates the mouse cursor by calling <see cref="M:System.Windows.Input.Mouse.UpdateCursor"/>, but with background priority.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetVisualLineFromVisualTop(System.Double)">
            <summary>
            Gets the visual line at the specified document position (relative to start of document).
            Returns null if there is no visual line for the position (e.g. the position is outside the visible
            text area).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetVisualTopByDocumentLine(System.Int32)">
            <summary>
            Gets the visual top position (relative to start of document) from a document line number.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetVisualPosition(ICSharpCode.AvalonEdit.TextViewPosition,ICSharpCode.AvalonEdit.Rendering.VisualYPosition)">
            <summary>
            Gets the visual position from a text view position.
            </summary>
            <param name="position">The text view position.</param>
            <param name="yPositionMode">The mode how to retrieve the Y position.</param>
            <returns>The position in WPF device-independent pixels relative
            to the top left corner of the document.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetPosition(System.Windows.Point)">
            <summary>
            Gets the text view position from the specified visual position.
            If the position is within a character, it is rounded to the next character boundary.
            </summary>
            <param name="visualPosition">The position in WPF device-independent pixels relative
            to the top left corner of the document.</param>
            <returns>The logical position, or null if the position is outside the document.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetPositionFloor(System.Windows.Point)">
            <summary>
            Gets the text view position from the specified visual position.
            If the position is inside a character, the position in front of the character is returned.
            </summary>
            <param name="visualPosition">The position in WPF device-independent pixels relative
            to the top left corner of the document.</param>
            <returns>The logical position, or null if the position is outside the document.</returns>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.Services">
            <summary>
            Gets a service container used to associate services with the text view.
            </summary>
            <remarks>
            This container does not provide document services -
            use <c>TextView.GetService()</c> instead of <c>TextView.Services.GetService()</c> to ensure
            that document services can be found as well.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetService(System.Type)">
            <summary>
            Retrieves a service from the text view.
            If the service is not found in the <see cref="P:ICSharpCode.AvalonEdit.Rendering.TextView.Services"/> container,
            this method will also look for it in the current document's service provider.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.PreviewMouseHoverEvent">
            <summary>
            The PreviewMouseHover event.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.MouseHoverEvent">
            <summary>
            The MouseHover event.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.PreviewMouseHoverStoppedEvent">
            <summary>
            The PreviewMouseHoverStopped event.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.MouseHoverStoppedEvent">
            <summary>
            The MouseHoverStopped event.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.PreviewMouseHover">
            <summary>
            Occurs when the mouse has hovered over a fixed location for some time.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.MouseHover">
            <summary>
            Occurs when the mouse has hovered over a fixed location for some time.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.PreviewMouseHoverStopped">
            <summary>
            Occurs when the mouse had previously hovered but now started moving again.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Rendering.TextView.MouseHoverStopped">
            <summary>
            Occurs when the mouse had previously hovered but now started moving again.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.CollapseLines(ICSharpCode.AvalonEdit.Document.DocumentLine,ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Collapses lines for the purpose of scrolling. <see cref="T:ICSharpCode.AvalonEdit.Document.DocumentLine"/>s marked as collapsed will be hidden
            and not used to start the generation of a <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLine"/>.
            </summary>
            <remarks>
            This method is meant for <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator"/>s that cause <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLine"/>s to span
            multiple <see cref="T:ICSharpCode.AvalonEdit.Document.DocumentLine"/>s. Do not call it without providing a corresponding
            <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator"/>.
            If you want to create collapsible text sections, see <see cref="T:ICSharpCode.AvalonEdit.Folding.FoldingManager"/>.
            
            Note that if you want a VisualLineElement to span from line N to line M, then you need to collapse only the lines
            N+1 to M. Do not collapse line N itself.
            
            When you no longer need the section to be collapsed, call <see cref="M:ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection.Uncollapse"/> on the
            <see cref="T:ICSharpCode.AvalonEdit.Rendering.CollapsedLineSection"/> returned from this method.
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.DocumentHeight">
            <summary>
            Gets the height of the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.GetDocumentLineByVisualTop(System.Double)">
            <summary>
            Gets the document line at the specified visual position.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextView.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.ColumnRulerPenProperty">
            <summary>
            The pen used to draw the column ruler.
            <seealso cref="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowColumnRuler"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.ColumnRulerPen">
            <summary>
            Gets/Sets the pen used to draw the column ruler.
            <seealso cref="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowColumnRuler"/>
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.CurrentLineBackgroundProperty">
            <summary>
            The <see cref="P:ICSharpCode.AvalonEdit.Rendering.TextView.CurrentLineBackground"/> property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.CurrentLineBackground">
            <summary>
            Gets/Sets the background brush used by current line highlighter.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.TextView.CurrentLineBorderProperty">
            <summary>
            The <see cref="P:ICSharpCode.AvalonEdit.Rendering.TextView.CurrentLineBorder"/> property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.CurrentLineBorder">
            <summary>
            Gets/Sets the background brush used for the current line.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.HighlightedLine">
            <summary>
            Gets/Sets highlighted line number.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.TextView.EmptyLineSelectionWidth">
            <summary>
            Empty line selection width.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager">
            <summary>
            Contains weak event managers for the TextView events.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.DocumentChanged">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Rendering.TextView.DocumentChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.DocumentChanged.StartListening(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.DocumentChanged.StopListening(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.VisualLinesChanged">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLinesChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.VisualLinesChanged.StartListening(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.VisualLinesChanged.StopListening(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.ScrollOffsetChanged">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.Rendering.TextView.ScrollOffsetChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.ScrollOffsetChanged.StartListening(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.TextViewWeakEventManager.ScrollOffsetChanged.StopListening(ICSharpCode.AvalonEdit.Rendering.TextView)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLine">
            <summary>
            Represents a visual line in the document.
            A visual line usually corresponds to one DocumentLine, but it can span multiple lines if
            all but the first are collapsed.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.Document">
            <summary>
            Gets the document to which this VisualLine belongs.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.FirstDocumentLine">
            <summary>
            Gets the first document line displayed by this visual line.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.LastDocumentLine">
            <summary>
            Gets the last document line displayed by this visual line.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.Elements">
            <summary>
            Gets a read-only collection of line elements.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.TextLines">
            <summary>
            Gets a read-only collection of text lines.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.StartOffset">
            <summary>
            Gets the start offset of the VisualLine inside the document.
            This is equivalent to <c>FirstDocumentLine.Offset</c>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.VisualLength">
            <summary>
            Length in visual line coordinates.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.VisualLengthWithEndOfLineMarker">
            <summary>
            Length in visual line coordinates including the end of line marker, if TextEditorOptions.ShowEndOfLine is enabled.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.Height">
            <summary>
            Gets the height of the visual line in device-independent pixels.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.VisualTop">
            <summary>
            Gets the Y position of the line. This is measured in device-independent pixels relative to the start of the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.ReplaceElement(System.Int32,ICSharpCode.AvalonEdit.Rendering.VisualLineElement[])">
            <summary>
            Replaces the single element at <paramref name="elementIndex"/> with the specified elements.
            The replacement operation must preserve the document length, but may change the visual length.
            </summary>
            <remarks>
            This method may only be called by line transformers.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.ReplaceElement(System.Int32,System.Int32,ICSharpCode.AvalonEdit.Rendering.VisualLineElement[])">
            <summary>
            Replaces <paramref name="count"/> elements starting at <paramref name="elementIndex"/> with the specified elements.
            The replacement operation must preserve the document length, but may change the visual length.
            </summary>
            <remarks>
            This method may only be called by line transformers.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetVisualColumn(System.Int32)">
            <summary>
            Gets the visual column from a document offset relative to the first line start.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetRelativeOffset(System.Int32)">
            <summary>
            Gets the document offset (relative to the first line start) from a visual column.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetTextLine(System.Int32)">
            <summary>
            Gets the text line containing the specified visual column.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetTextLine(System.Int32,System.Boolean)">
            <summary>
            Gets the text line containing the specified visual column.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetTextLineVisualYPosition(System.Windows.Media.TextFormatting.TextLine,ICSharpCode.AvalonEdit.Rendering.VisualYPosition)">
            <summary>
            Gets the visual top from the specified text line.
            </summary>
            <returns>Distance in device-independent pixels
            from the top of the document to the top of the specified text line.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetTextLineVisualStartColumn(System.Windows.Media.TextFormatting.TextLine)">
            <summary>
            Gets the start visual column from the specified text line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetTextLineByVisualYPosition(System.Double)">
            <summary>
            Gets a TextLine by the visual position.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetVisualPosition(System.Int32,ICSharpCode.AvalonEdit.Rendering.VisualYPosition)">
            <summary>
            Gets the visual position from the specified visualColumn.
            </summary>
            <returns>Position in device-independent pixels
            relative to the top left of the document.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetTextLineVisualXPosition(System.Windows.Media.TextFormatting.TextLine,System.Int32)">
            <summary>
            Gets the distance to the left border of the text area of the specified visual column.
            The visual column must belong to the specified text line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetVisualColumn(System.Windows.Point)">
            <summary>
            Gets the visual column from a document position (relative to top left of the document).
            If the user clicks between two visual columns, rounds to the nearest column.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetVisualColumn(System.Windows.Point,System.Boolean)">
            <summary>
            Gets the visual column from a document position (relative to top left of the document).
            If the user clicks between two visual columns, rounds to the nearest column.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetVisualColumn(System.Windows.Media.TextFormatting.TextLine,System.Double,System.Boolean)">
            <summary>
            Gets the visual column from a document position (relative to top left of the document).
            If the user clicks between two visual columns, rounds to the nearest column.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.ValidateVisualColumn(ICSharpCode.AvalonEdit.TextViewPosition,System.Boolean)">
            <summary>
            Validates the visual column and returns the correct one.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.ValidateVisualColumn(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Validates the visual column and returns the correct one.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetVisualColumnFloor(System.Windows.Point)">
            <summary>
            Gets the visual column from a document position (relative to top left of the document).
            If the user clicks between two visual columns, returns the first of those columns.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetVisualColumnFloor(System.Windows.Point,System.Boolean)">
            <summary>
            Gets the visual column from a document position (relative to top left of the document).
            If the user clicks between two visual columns, returns the first of those columns.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetTextViewPosition(System.Int32)">
            <summary>
            Gets the text view position from the specified visual column.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetTextViewPosition(System.Windows.Point,System.Boolean)">
            <summary>
            Gets the text view position from the specified visual position.
            If the position is within a character, it is rounded to the next character boundary.
            </summary>
            <param name="visualPosition">The position in WPF device-independent pixels relative
            to the top left corner of the document.</param>
            <param name="allowVirtualSpace">Controls whether positions in virtual space may be returned.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetTextViewPositionFloor(System.Windows.Point,System.Boolean)">
            <summary>
            Gets the text view position from the specified visual position.
            If the position is inside a character, the position in front of the character is returned.
            </summary>
            <param name="visualPosition">The position in WPF device-independent pixels relative
            to the top left corner of the document.</param>
            <param name="allowVirtualSpace">Controls whether positions in virtual space may be returned.</param>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLine.IsDisposed">
            <summary>
            Gets whether the visual line was disposed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLine.GetNextCaretPosition(System.Int32,System.Windows.Documents.LogicalDirection,ICSharpCode.AvalonEdit.Document.CaretPositioningMode,System.Boolean)">
            <summary>
            Gets the next possible caret position after visualColumn, or -1 if there is no caret position.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLineConstructionStartEventArgs">
            <summary>
            EventArgs for the <see cref="E:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLineConstructionStarting"/> event.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineConstructionStartEventArgs.FirstLineInView">
            <summary>
            Gets/Sets the first line that is visible in the TextView.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineConstructionStartEventArgs.#ctor(ICSharpCode.AvalonEdit.Document.DocumentLine)">
            <summary>
            Creates a new VisualLineConstructionStartEventArgs instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement">
            <summary>
            Represents a visual element in the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new VisualLineElement.
            </summary>
            <param name="visualLength">The length of the element in VisualLine coordinates. Must be positive.</param>
            <param name="documentLength">The length of the element in the document. Must be non-negative.</param>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.VisualLength">
            <summary>
            Gets the length of this element in visual columns.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.DocumentLength">
            <summary>
            Gets the length of this element in the text document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.VisualColumn">
            <summary>
            Gets the visual column where this element starts.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.RelativeTextOffset">
            <summary>
            Gets the text offset where this element starts, relative to the start text offset of the visual line.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.TextRunProperties">
            <summary>
            Gets the text run properties.
            A unique <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties"/> instance is used for each
            <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement"/>; colorizing code may assume that modifying the
            <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties"/> will affect only this
            <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.BackgroundBrush">
            <summary>
            Gets/sets the brush used for the background of this <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement" />.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.CreateTextRun(System.Int32,ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <summary>
            Creates the TextRun for this line element.
            </summary>
            <param name="startVisualColumn">
            The visual column from which the run should be constructed.
            Normally the same value as the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.VisualColumn"/> property is used to construct the full run;
            but when word-wrapping is active, partial runs might be created.
            </param>
            <param name="context">
            Context object that contains information relevant for text run creation.
            </param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.GetPrecedingText(System.Int32,ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <summary>
            Retrieves the text span immediately before the visual column.
            </summary>
            <remarks>This method is used for word-wrapping in bidirectional text.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.CanSplit">
            <summary>
            Gets if this VisualLineElement can be split.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.Split(System.Int32,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Rendering.VisualLineElement},System.Int32)">
            <summary>
            Splits the element.
            </summary>
            <param name="splitVisualColumn">Position inside this element at which it should be broken</param>
            <param name="elements">The collection of line elements</param>
            <param name="elementIndex">The index at which this element is in the elements list.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.SplitHelper(ICSharpCode.AvalonEdit.Rendering.VisualLineElement,ICSharpCode.AvalonEdit.Rendering.VisualLineElement,System.Int32,System.Int32)">
            <summary>
            Helper method for splitting this line element into two, correctly updating the
            <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.VisualLength"/>, <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.DocumentLength"/>, <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.VisualColumn"/>
            and <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.RelativeTextOffset"/> properties.
            </summary>
            <param name="firstPart">The element before the split position.</param>
            <param name="secondPart">The element after the split position.</param>
            <param name="splitVisualColumn">The split position as visual column.</param>
            <param name="splitRelativeTextOffset">The split position as text offset.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.GetVisualColumn(System.Int32)">
            <summary>
            Gets the visual column of a text location inside this element.
            The text offset is given relative to the visual line start.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.GetRelativeOffset(System.Int32)">
            <summary>
            Gets the text offset of a visual column inside this element.
            </summary>
            <returns>A text offset relative to the visual line start.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.GetNextCaretPosition(System.Int32,System.Windows.Documents.LogicalDirection,ICSharpCode.AvalonEdit.Document.CaretPositioningMode)">
            <summary>
            Gets the next caret position inside this element.
            </summary>
            <param name="visualColumn">The visual column from which the search should be started.</param>
            <param name="direction">The search direction (forwards or backwards).</param>
            <param name="mode">Whether to stop only at word borders.</param>
            <returns>The visual column of the next caret position, or -1 if there is no next caret position.</returns>
            <remarks>
            In the space between two line elements, it is sufficient that one of them contains a caret position;
            though in many cases, both of them contain one.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.IsWhitespace(System.Int32)">
            <summary>
            Gets whether the specified offset in this element is considered whitespace.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.HandlesLineBorders">
            <summary>
            Gets whether the <see cref="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.GetNextCaretPosition(System.Int32,System.Windows.Documents.LogicalDirection,ICSharpCode.AvalonEdit.Document.CaretPositioningMode)"/> implementation handles line borders.
            If this property returns false, the caller of GetNextCaretPosition should handle the line
            borders (i.e. place caret stops at the start and end of the line).
            This property has an effect only for VisualLineElements that are at the start or end of a
            <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLine"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
            <summary>
            Queries the cursor over the visual line element.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Allows the visual line element to handle a mouse event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Allows the visual line element to handle a mouse event.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator">
            <summary>
            Abstract base class for generators that produce new visual line elements.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator.CurrentContext">
            <summary>
            Gets the text run construction context.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator.StartGeneration(ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <summary>
            Initializes the generator for the <see cref="T:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext"/>
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator.FinishGeneration">
            <summary>
            De-initializes the generator.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator.cachedInterest">
            <summary>
            Should only be used by VisualLine.ConstructVisualElements.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator.GetFirstInterestedOffset(System.Int32)">
            <summary>
            Gets the first offset >= startOffset where the generator wants to construct an element.
            Return -1 to signal no interest.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementGenerator.ConstructElement(System.Int32)">
            <summary>
            Constructs an element at the specified offset.
            May return null if no element should be constructed.
            </summary>
            <remarks>
            Avoid signalling interest and then building no element by returning null - doing so
            causes the generated <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineText"/> elements to be unnecessarily split
            at the position where you signalled interest.
            </remarks>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties">
            <summary>
            <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> implementation that allows changing the properties.
            A <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties"/> instance usually is assigned to a single
            <see cref="T:ICSharpCode.AvalonEdit.Rendering.VisualLineElement"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.#ctor(System.Windows.Media.TextFormatting.TextRunProperties)">
            <summary>
            Creates a new VisualLineElementTextRunProperties instance that copies its values
            from the specified <paramref name="textRunProperties"/>.
            For the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TextDecorations"/> and <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TextEffects"/> collections, deep copies
            are created if those collections are not frozen.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.Clone">
            <summary>
            Creates a copy of this instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.BackgroundBrush">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetBackgroundBrush(System.Windows.Media.Brush)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.BackgroundBrush"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.BaselineAlignment">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetBaselineAlignment(System.Windows.BaselineAlignment)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.BaselineAlignment"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.CultureInfo">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetCultureInfo(System.Globalization.CultureInfo)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.CultureInfo"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.FontHintingEmSize">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetFontHintingEmSize(System.Double)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.FontHintingEmSize"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.FontRenderingEmSize">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetFontRenderingEmSize(System.Double)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.FontRenderingEmSize"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.ForegroundBrush">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetForegroundBrush(System.Windows.Media.Brush)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.ForegroundBrush"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.Typeface">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetTypeface(System.Windows.Media.Typeface)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.Typeface"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TextDecorations">
            <summary>
            Gets the text decorations. The value may be null, a frozen <see cref="T:System.Windows.TextDecorationCollection"/>
            or an unfrozen <see cref="T:System.Windows.TextDecorationCollection"/>.
            If the value is an unfrozen <see cref="T:System.Windows.TextDecorationCollection"/>, you may assume that the
            collection instance is only used for this <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> instance and it is safe
            to add <see cref="T:System.Windows.TextDecoration"/>s.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetTextDecorations(System.Windows.TextDecorationCollection)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TextDecorations"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TextEffects">
            <summary>
            Gets the text effects. The value may be null, a frozen <see cref="T:System.Windows.Media.TextEffectCollection"/>
            or an unfrozen <see cref="T:System.Windows.Media.TextEffectCollection"/>.
            If the value is an unfrozen <see cref="T:System.Windows.Media.TextEffectCollection"/>, you may assume that the
            collection instance is only used for this <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> instance and it is safe
            to add <see cref="T:System.Windows.Media.TextEffect"/>s.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetTextEffects(System.Windows.Media.TextEffectCollection)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TextEffects"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TypographyProperties">
            <summary>
            Gets the typography properties for the text run.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetTypographyProperties(System.Windows.Media.TextFormatting.TextRunTypographyProperties)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.TypographyProperties"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.NumberSubstitution">
            <summary>
            Gets the number substitution settings for the text run.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.SetNumberSubstitution(System.Windows.Media.NumberSubstitution)">
            <summary>
            Sets the <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElementTextRunProperties.NumberSubstitution"/>.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText">
            <summary>
            VisualLineElement that represents a piece of text and is a clickable link.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.NavigateUri">
            <summary>
            Gets/Sets the URL that is navigated to when the link is clicked.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.TargetName">
            <summary>
            Gets/Sets the window name where the URL will be opened.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.RequireControlModifierForClick">
            <summary>
            Gets/Sets whether the user needs to press Control to click the link.
            The default value is true.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.#ctor(ICSharpCode.AvalonEdit.Rendering.VisualLine,System.Int32)">
            <summary>
            Creates a visual line text element with the specified length.
            It uses the <see cref="P:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext.VisualLine"/> and its
            <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.RelativeTextOffset"/> to find the actual text string.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.CreateTextRun(System.Int32,ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.LinkIsClickable">
            <summary>
            Gets whether the link is currently clickable.
            </summary>
            <remarks>Returns true when control is pressed; or when
            <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.RequireControlModifierForClick"/> is disabled.</remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineLinkText.CreateInstance(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLinesInvalidException">
            <summary>
            A VisualLinesInvalidException indicates that you accessed the <see cref="P:ICSharpCode.AvalonEdit.Rendering.TextView.VisualLines"/> property
            of the <see cref="T:ICSharpCode.AvalonEdit.Rendering.TextView"/> while the visual lines were invalid.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLinesInvalidException.#ctor">
            <summary>
            Creates a new VisualLinesInvalidException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLinesInvalidException.#ctor(System.String)">
            <summary>
            Creates a new VisualLinesInvalidException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLinesInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new VisualLinesInvalidException instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLinesInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new VisualLinesInvalidException instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLineText">
            <summary>
            VisualLineElement that represents a piece of text.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineText.ParentVisualLine">
            <summary>
            Gets the parent visual line.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.#ctor(ICSharpCode.AvalonEdit.Rendering.VisualLine,System.Int32)">
            <summary>
            Creates a visual line text element with the specified length.
            It uses the <see cref="P:ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext.VisualLine"/> and its
            <see cref="P:ICSharpCode.AvalonEdit.Rendering.VisualLineElement.RelativeTextOffset"/> to find the actual text string.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.CreateInstance(System.Int32)">
            <summary>
            Override this method to control the type of new VisualLineText instances when
            the visual line is split due to syntax highlighting.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.CreateTextRun(System.Int32,ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.IsWhitespace(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.GetPrecedingText(System.Int32,ICSharpCode.AvalonEdit.Rendering.ITextRunConstructionContext)">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Rendering.VisualLineText.CanSplit">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.Split(System.Int32,System.Collections.Generic.IList{ICSharpCode.AvalonEdit.Rendering.VisualLineElement},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.GetRelativeOffset(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.GetVisualColumn(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Rendering.VisualLineText.GetNextCaretPosition(System.Int32,System.Windows.Documents.LogicalDirection,ICSharpCode.AvalonEdit.Document.CaretPositioningMode)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualLineTextSource">
            <summary>
            WPF TextSource implementation that creates TextRuns for a VisualLine.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Rendering.VisualYPosition">
            <summary>
            An enum that specifies the possible Y positions that can be returned by VisualLine.GetVisualPosition.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.LineTop">
            <summary>
            Returns the top of the TextLine.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.TextTop">
            <summary>
            Returns the top of the text.
            If the line contains inline UI elements larger than the text, TextTop may be below LineTop.
            For a line containing regular text (all in the editor's main font), this will be equal to LineTop.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.LineBottom">
            <summary>
            Returns the bottom of the TextLine.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.LineMiddle">
            <summary>
            The middle between LineTop and LineBottom.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.TextBottom">
            <summary>
            Returns the bottom of the text. 
            If the line contains inline UI elements larger than the text, TextBottom might be above LineBottom.
            For a line containing regular text (all in the editor's main font), this will be equal to LineBottom.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.TextMiddle">
            <summary>
            The middle between TextTop and TextBottom.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Rendering.VisualYPosition.Baseline">
            <summary>
            Returns the baseline of the text.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Search.DropDownButton">
            <summary>
            A button that opens a drop-down menu when clicked.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.DropDownButton.DropDownContentProperty">
            <summary>
            Identifies the <see cref="F:ICSharpCode.AvalonEdit.Search.DropDownButton.DropDownContentProperty" /> dependency property.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.DropDownButton.IsDropDownContentOpenPropertyKey">
            <summary>
            The key that identifies the <see cref="F:ICSharpCode.AvalonEdit.Search.DropDownButton.IsDropDownContentOpenProperty" /> dependency property.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.DropDownButton.IsDropDownContentOpenProperty">
            <summary>
            Identifies the <see cref="F:ICSharpCode.AvalonEdit.Search.DropDownButton.IsDropDownContentOpenProperty" /> dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.DropDownButton.DropDownContent">
            <summary>
            Gets/Sets the popup that is used as drop-down content.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.DropDownButton.IsDropDownContentOpen">
            <summary>
            Gets whether the drop-down is opened.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.DropDownButton.OnClick">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Search.ISearchStrategy">
            <summary>
            Basic interface for search algorithms.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.ISearchStrategy.FindAll(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32,System.Int32)">
            <summary>
            Finds all matches in the given ITextSource and the given range.
            </summary>
            <remarks>
            This method must be implemented thread-safe.
            All segments in the result must be within the given range, and they must be returned in order
            (e.g. if two results are returned, EndOffset of first result must be less than or equal StartOffset of second result).
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.ISearchStrategy.FindNext(ICSharpCode.AvalonEdit.Document.ITextSource,System.Int32,System.Int32)">
            <summary>
            Finds the next match in the given ITextSource and the given range.
            </summary>
            <remarks>This method must be implemented thread-safe.</remarks>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Search.ISearchResult">
            <summary>
            Represents a search result.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.ISearchResult.ReplaceWith(System.String)">
            <summary>
            Replaces parts of the replacement string with parts from the match. (e.g. $1)
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Search.SearchMode">
            <summary>
            Defines supported search modes.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.SearchMode.Normal">
            <summary>
            Standard search
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.SearchMode.RegEx">
            <summary>
            RegEx search
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.SearchMode.Wildcard">
            <summary>
            Wildcard search
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Search.SearchPatternException">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPatternException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPatternException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPatternException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPatternException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Search.Localization">
            <summary>
            Holds default texts for buttons and labels in the SearchPanel. Override properties to add other languages.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.Localization.MatchCaseText">
            <summary>
            Default: 'Match case'
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.Localization.MatchWholeWordsText">
            <summary>
            Default: 'Match whole words'
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.Localization.UseRegexText">
            <summary>
            Default: 'Use regular expressions'
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.Localization.FindNextText">
            <summary>
            Default: 'Find next (F3)'
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.Localization.FindPreviousText">
            <summary>
            Default: 'Find previous (Shift+F3)'
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.Localization.ErrorText">
            <summary>
            Default: 'Error: '
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.Localization.NoMatchesFoundText">
            <summary>
            Default: 'No matches found!'
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Search.SearchCommands">
            <summary>
            Search commands for AvalonEdit.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.SearchCommands.FindNext">
            <summary>
            Finds the next occurrence in the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.SearchCommands.FindPrevious">
            <summary>
            Finds the previous occurrence in the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.SearchCommands.CloseSearchPanel">
            <summary>
            Closes the SearchPanel.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Search.SearchInputHandler">
            <summary>
            TextAreaInputHandler that registers all search-related commands.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Search.SearchInputHandler.SearchOptionsChanged">
            <summary>
            Fired when SearchOptions are modified inside the SearchPanel.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Search.SearchPanel">
            <summary>
            Provides search functionality for AvalonEdit. It is displayed in the top-right corner of the TextArea.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.SearchPanel.UseRegexProperty">
            <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.Search.SearchPanel.UseRegex"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.SearchPanel.UseRegex">
            <summary>
            Gets/sets whether the search pattern should be interpreted as regular expression.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.SearchPanel.MatchCaseProperty">
            <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.Search.SearchPanel.MatchCase"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.SearchPanel.MatchCase">
            <summary>
            Gets/sets whether the search pattern should be interpreted case-sensitive.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.SearchPanel.WholeWordsProperty">
            <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.Search.SearchPanel.WholeWords"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.SearchPanel.WholeWords">
            <summary>
            Gets/sets whether the search pattern should only match whole words.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.SearchPanel.SearchPatternProperty">
            <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.Search.SearchPanel.SearchPattern"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.SearchPanel.SearchPattern">
            <summary>
            Gets/sets the search pattern.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.SearchPanel.MarkerBrushProperty">
            <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.Search.SearchPanel.MarkerBrush"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.SearchPanel.MarkerBrush">
            <summary>
            Gets/sets the Brush used for marking search results in the TextView.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Search.SearchPanel.LocalizationProperty">
            <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.Search.SearchPanel.Localization"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.SearchPanel.Localization">
            <summary>
            Gets/sets the localization for the SearchPanel.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.#ctor">
            <summary>
            Creates a new SearchPanel.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.Install(ICSharpCode.AvalonEdit.TextEditor)">
            <summary>
            Creates a SearchPanel and installs it to the TextEditor's TextArea.
            </summary>
            <remarks>This is a convenience wrapper.</remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.Install(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Creates a SearchPanel and installs it to the TextArea.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.RegisterCommands(System.Windows.Input.CommandBindingCollection)">
            <summary>
            Adds the commands used by SearchPanel to the given CommandBindingCollection.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.Uninstall">
            <summary>
            Removes the SearchPanel from the TextArea.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.OnApplyTemplate">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.Reactivate">
            <summary>
            Reactivates the SearchPanel by setting the focus on the search box and selecting all text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.FindNext">
            <summary>
            Moves to the next occurrence in the file.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.FindPrevious">
            <summary>
            Moves to the previous occurrence in the file.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.SearchPanel.IsClosed">
            <summary>
            Gets whether the Panel is already closed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.Close">
            <summary>
            Closes the SearchPanel.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.Open">
            <summary>
            Opens the an existing search panel.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Search.SearchPanel.SearchOptionsChanged">
            <summary>
            Fired when SearchOptions are changed inside the SearchPanel.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchPanel.OnSearchOptionsChanged(ICSharpCode.AvalonEdit.Search.SearchOptionsChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.Search.SearchPanel.SearchOptionsChanged" /> event.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Search.SearchOptionsChangedEventArgs">
            <summary>
            EventArgs for <see cref="E:ICSharpCode.AvalonEdit.Search.SearchPanel.SearchOptionsChanged"/> event.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.SearchOptionsChangedEventArgs.SearchPattern">
            <summary>
            Gets the search pattern.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.SearchOptionsChangedEventArgs.MatchCase">
            <summary>
            Gets whether the search pattern should be interpreted case-sensitive.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.SearchOptionsChangedEventArgs.UseRegex">
            <summary>
            Gets whether the search pattern should be interpreted as regular expression.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Search.SearchOptionsChangedEventArgs.WholeWords">
            <summary>
            Gets whether the search pattern should only match whole words.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchOptionsChangedEventArgs.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new SearchOptionsChangedEventArgs instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Search.SearchStrategyFactory">
            <summary>
            Provides factory methods for ISearchStrategies.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Search.SearchStrategyFactory.Create(System.String,System.Boolean,System.Boolean,ICSharpCode.AvalonEdit.Search.SearchMode)">
            <summary>
            Creates a default ISearchStrategy with the given parameters.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.IActiveElement">
            <summary>
            Represents an active element that allows the snippet to stay interactive after insertion.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.IActiveElement.OnInsertionCompleted">
            <summary>
            Called when the all snippet elements have been inserted.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.IActiveElement.Deactivate(ICSharpCode.AvalonEdit.Snippets.SnippetEventArgs)">
            <summary>
            Called when the interactive mode is deactivated.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.IActiveElement.IsEditable">
            <summary>
            Gets whether this element is editable (the user will be able to select it with Tab).
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.IActiveElement.Segment">
            <summary>
            Gets the segment associated with this element. May be null.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.InsertionContext">
            <summary>
            Represents the context of a snippet insertion.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea,System.Int32)">
            <summary>
            Creates a new InsertionContext instance.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.TextArea">
            <summary>
            Gets the text area.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.Document">
            <summary>
            Gets the text document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.SelectedText">
            <summary>
            Gets the text that was selected before the insertion of the snippet.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.Indentation">
            <summary>
            Gets the indentation at the insertion position.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.Tab">
            <summary>
            Gets the indentation string for a single indentation level.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.LineTerminator">
            <summary>
            Gets the line terminator at the insertion position.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.InsertionPosition">
            <summary>
            Gets/Sets the insertion position.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.StartPosition">
            <summary>
            Gets the start position of the snippet insertion.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.InsertText(System.String)">
            <summary>
            Inserts text at the insertion position and advances the insertion position.
            This method will add the current indentation to every line in <paramref name="text"/> and will
            replace newlines with the expected newline for the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.RegisterActiveElement(ICSharpCode.AvalonEdit.Snippets.SnippetElement,ICSharpCode.AvalonEdit.Snippets.IActiveElement)">
            <summary>
            Registers an active element. Elements should be registered during insertion and will be called back
            when insertion has completed.
            </summary>
            <param name="owner">The snippet element that created the active element.</param>
            <param name="element">The active element.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.GetActiveElement(ICSharpCode.AvalonEdit.Snippets.SnippetElement)">
            <summary>
            Returns the active element belonging to the specified snippet element, or null if no such active element is found.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.InsertionContext.ActiveElements">
            <summary>
            Gets the list of active elements.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.RaiseInsertionCompleted(System.EventArgs)">
            <summary>
            Calls the <see cref="M:ICSharpCode.AvalonEdit.Snippets.IActiveElement.OnInsertionCompleted"/> method on all registered active elements
            and raises the <see cref="E:ICSharpCode.AvalonEdit.Snippets.InsertionContext.InsertionCompleted"/> event.
            </summary>
            <param name="e">The EventArgs to use</param>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Snippets.InsertionContext.InsertionCompleted">
            <summary>
            Occurs when the all snippet elements have been inserted.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.Deactivate(ICSharpCode.AvalonEdit.Snippets.SnippetEventArgs)">
            <summary>
            Calls the <see cref="M:ICSharpCode.AvalonEdit.Snippets.IActiveElement.Deactivate(ICSharpCode.AvalonEdit.Snippets.SnippetEventArgs)"/> method on all registered active elements.
            </summary>
            <param name="e">The EventArgs to use</param>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Snippets.InsertionContext.Deactivated">
            <summary>
            Occurs when the interactive mode is deactivated.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <inheritdoc cref="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)"/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.InsertionContext.Link(ICSharpCode.AvalonEdit.Document.ISegment,ICSharpCode.AvalonEdit.Document.ISegment[])">
            <summary>
            Adds existing segments as snippet elements.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.Snippet">
            <summary>
            A code snippet that can be inserted into the text editor.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.Snippet.Insert(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Inserts the snippet into the text area.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetAnchorElement">
            <summary>
            Creates a named anchor that can be accessed by other SnippetElements.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.SnippetAnchorElement.Name">
            <summary>
            Gets or sets the name of the anchor.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetAnchorElement.#ctor(System.String)">
            <summary>
            Creates a SnippetAnchorElement with the supplied name.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetAnchorElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
            <inheritdoc />
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.AnchorElement">
            <summary>
            AnchorElement created by SnippetAnchorElement.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.AnchorElement.IsEditable">
            <inheritdoc />
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.AnchorElement.Segment">
            <inheritdoc />
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.AnchorElement.#ctor(ICSharpCode.AvalonEdit.Document.AnchorSegment,System.String,ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
            <summary>
            Creates a new AnchorElement.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.AnchorElement.Text">
            <summary>
            Gets or sets the text at the anchor.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.AnchorElement.Name">
            <summary>
            Gets or sets the name of the anchor.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.AnchorElement.OnInsertionCompleted">
            <inheritdoc />
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.AnchorElement.Deactivate(ICSharpCode.AvalonEdit.Snippets.SnippetEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetBoundElement">
            <summary>
            An element that binds to a <see cref="T:ICSharpCode.AvalonEdit.Snippets.SnippetReplaceableTextElement"/> and displays the same text.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.SnippetBoundElement.TargetElement">
            <summary>
            Gets/Sets the target element.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetBoundElement.ConvertText(System.String)">
            <summary>
            Converts the text before copying it.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetBoundElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetBoundElement.ToTextRun">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetCaretElement">
            <summary>
            Sets the caret position after interactive mode has finished.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetCaretElement.#ctor">
            <summary>
            Creates a new SnippetCaretElement.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetCaretElement.#ctor(System.Boolean)">
            <summary>
            Creates a new SnippetCaretElement.
            </summary>
            <param name="setCaretOnlyIfTextIsSelected">
            If set to true, the caret is set only when some text was selected.
            This is useful when both SnippetCaretElement and SnippetSelectionElement are used in the same snippet.
            </param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetCaretElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetContainerElement">
            <summary>
            A snippet element that has sub-elements.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.SnippetContainerElement.Elements">
            <summary>
            Gets the list of child elements.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetContainerElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetContainerElement.ToTextRun">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetElement">
            <summary>
            An element inside a snippet.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
            <summary>
            Performs insertion of the snippet.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetElement.ToTextRun">
            <summary>
            Converts the snippet to text, with replaceable fields in italic.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetEventArgs">
            <summary>
            Provides information about the event that occured during use of snippets.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.SnippetEventArgs.Reason">
            <summary>
            Gets the reason for deactivation.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetEventArgs.#ctor(ICSharpCode.AvalonEdit.Snippets.DeactivateReason)">
            <summary>
            Creates a new SnippetEventArgs object, with a DeactivateReason.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.DeactivateReason">
            <summary>
            Describes the reason for deactivation of a <see cref="T:ICSharpCode.AvalonEdit.Snippets.SnippetElement" />.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Snippets.DeactivateReason.Unknown">
            <summary>
            Unknown reason.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Snippets.DeactivateReason.Deleted">
            <summary>
            Snippet was deleted.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Snippets.DeactivateReason.NoActiveElements">
            <summary>
            There are no active elements in the snippet.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Snippets.DeactivateReason.InputHandlerDetached">
            <summary>
            The SnippetInputHandler was detached.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Snippets.DeactivateReason.ReturnPressed">
            <summary>
            Return was pressed by the user.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Snippets.DeactivateReason.EscapePressed">
            <summary>
            Escape was pressed by the user.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetReplaceableTextElement">
            <summary>
            Text element that is supposed to be replaced by the user.
            Will register an <see cref="T:ICSharpCode.AvalonEdit.Snippets.IReplaceableActiveElement"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetReplaceableTextElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetReplaceableTextElement.ToTextRun">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.IReplaceableActiveElement">
            <summary>
            Interface for active element registered by <see cref="T:ICSharpCode.AvalonEdit.Snippets.SnippetReplaceableTextElement"/>.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.IReplaceableActiveElement.Text">
            <summary>
            Gets the current text inside the element.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.Snippets.IReplaceableActiveElement.TextChanged">
            <summary>
            Occurs when the text inside the element changes.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetSelectionElement">
            <summary>
            Inserts the previously selected text at the selection marker.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.SnippetSelectionElement.Indentation">
            <summary>
            Gets/Sets the new indentation of the selected text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetSelectionElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Snippets.SnippetTextElement">
            <summary>
            Represents a text element in a snippet.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Snippets.SnippetTextElement.Text">
            <summary>
            The text to be inserted.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetTextElement.Insert(ICSharpCode.AvalonEdit.Snippets.InsertionContext)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Snippets.SnippetTextElement.ToTextRun">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.TextEditor">
            <summary>
            The text editor control.
            Contains a scrollable TextArea.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.#ctor">
            <summary>
            Creates a new TextEditor instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Creates a new TextEditor instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnCreateAutomationPeer">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            Forward focus to TextArea.
            <inheritdoc/>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.DocumentProperty">
            <summary>
            Document property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.Document">
            <summary>
            Gets/Sets the document displayed by the text editor.
            This is a dependency property.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditor.DocumentChanged">
            <summary>
            Occurs when the document property has changed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnDocumentChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.TextEditor.DocumentChanged"/> event.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.OptionsProperty">
            <summary>
            Options property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.Options">
            <summary>
            Gets/Sets the options currently used by the text editor.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditor.OptionChanged">
            <summary>
            Occurs when a text editor option has changed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnOptionChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.TextEditor.OptionChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <inheritdoc cref="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)"/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.Text">
            <summary>
            Gets/Sets the text of the current document.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditor.TextChanged">
            <summary>
            Occurs when the Text property changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ICSharpCode.AvalonEdit.TextEditor.TextChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.OnApplyTemplate">
            <summary>
            Is called after the template was applied.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.TextArea">
            <summary>
            Gets the text area.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.ScrollViewer">
            <summary>
            Gets the scroll viewer used by the text editor.
            This property can return null if the template has not been applied / does not contain a scroll viewer.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.SyntaxHighlightingProperty">
            <summary>
            The <see cref="P:ICSharpCode.AvalonEdit.TextEditor.SyntaxHighlighting"/> property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.SyntaxHighlighting">
            <summary>
            Gets/sets the syntax highlighting definition used to colorize the text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.CreateColorizer(ICSharpCode.AvalonEdit.Highlighting.IHighlightingDefinition)">
            <summary>
            Creates the highlighting colorizer for the specified highlighting definition.
            Allows derived classes to provide custom colorizer implementations for special highlighting definitions.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.WordWrapProperty">
            <summary>
            Word wrap dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.WordWrap">
            <summary>
            Specifies whether the text editor uses word wrapping.
            </summary>
            <remarks>
            Setting WordWrap=true has the same effect as setting HorizontalScrollBarVisibility=Disabled and will override the
            HorizontalScrollBarVisibility setting.
            </remarks>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.IsReadOnlyProperty">
            <summary>
            IsReadOnly dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.IsReadOnly">
            <summary>
            Specifies whether the user can change the text editor content.
            Setting this property will replace the
            <see cref="P:ICSharpCode.AvalonEdit.Editing.TextArea.ReadOnlySectionProvider">TextArea.ReadOnlySectionProvider</see>.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.IsModifiedProperty">
            <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.TextEditor.IsModified"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.IsModified">
            <summary>
            Gets/Sets the 'modified' flag.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.ShowLineNumbersProperty">
            <summary>
            ShowLineNumbers dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.ShowLineNumbers">
            <summary>
            Specifies whether line numbers are shown on the left to the text view.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.LineNumbersForegroundProperty">
            <summary>
            LineNumbersForeground dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.LineNumbersForeground">
            <summary>
            Gets/sets the Brush used for displaying the foreground color of line numbers.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.AppendText(System.String)">
            <summary>
            Appends text to the end of the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.BeginChange">
            <summary>
            Begins a group of document changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Copy">
            <summary>
            Copies the current selection to the clipboard.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Cut">
            <summary>
            Removes the current selection and copies it to the clipboard.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.DeclareChangeBlock">
            <summary>
            Begins a group of document changes and returns an object that ends the group of document
            changes when it is disposed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Delete">
            <summary>
            Removes the current selection without copying it to the clipboard.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.EndChange">
            <summary>
            Ends the current group of document changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.LineDown">
            <summary>
            Scrolls one line down.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.LineLeft">
            <summary>
            Scrolls to the left.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.LineRight">
            <summary>
            Scrolls to the right.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.LineUp">
            <summary>
            Scrolls one line up.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.PageDown">
            <summary>
            Scrolls one page down.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.PageUp">
            <summary>
            Scrolls one page up.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.PageLeft">
            <summary>
            Scrolls one page left.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.PageRight">
            <summary>
            Scrolls one page right.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Paste">
            <summary>
            Pastes the clipboard content.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Redo">
            <summary>
            Redoes the most recent undone command.
            </summary>
            <returns>True is the redo operation was successful, false is the redo stack is empty.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollToEnd">
            <summary>
            Scrolls to the end of the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollToHome">
            <summary>
            Scrolls to the start of the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollToHorizontalOffset(System.Double)">
            <summary>
            Scrolls to the specified position in the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollToVerticalOffset(System.Double)">
            <summary>
            Scrolls to the specified position in the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.SelectAll">
            <summary>
            Selects the entire text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Undo">
            <summary>
            Undoes the most recent command.
            </summary>
            <returns>True is the undo operation was successful, false is the undo stack is empty.</returns>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.CanRedo">
            <summary>
            Gets if the most recent undone command can be redone.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.CanUndo">
            <summary>
            Gets if the most recent command can be undone.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.ExtentHeight">
            <summary>
            Gets the vertical size of the document.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.ExtentWidth">
            <summary>
            Gets the horizontal size of the current document region.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.ViewportHeight">
            <summary>
            Gets the horizontal size of the viewport.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.ViewportWidth">
            <summary>
            Gets the horizontal size of the viewport.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.VerticalOffset">
            <summary>
            Gets the vertical scroll position.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.HorizontalOffset">
            <summary>
            Gets the horizontal scroll position.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.SelectedText">
            <summary>
            Gets/Sets the selected text.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.CaretOffset">
            <summary>
            Gets/sets the caret position.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.SelectionStart">
            <summary>
            Gets/sets the start position of the selection.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.SelectionLength">
            <summary>
            Gets/sets the length of the selection.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Select(System.Int32,System.Int32)">
            <summary>
            Selects the specified text section.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.LineCount">
            <summary>
            Gets the number of lines in the document.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Clear">
            <summary>
            Clears the text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Load(System.IO.Stream)">
            <summary>
            Loads the text from the stream, auto-detecting the encoding.
            </summary>
            <remarks>
            This method sets <see cref="P:ICSharpCode.AvalonEdit.TextEditor.IsModified"/> to false.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Load(System.String)">
            <summary>
            Loads the text from the stream, auto-detecting the encoding.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.EncodingProperty">
            <summary>
            Encoding dependency property.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.Encoding">
            <summary>
            Gets/sets the encoding used when the file is saved.
            </summary>
            <remarks>
            The <see cref="M:ICSharpCode.AvalonEdit.TextEditor.Load(System.IO.Stream)"/> method autodetects the encoding of the file and sets this property accordingly.
            The <see cref="M:ICSharpCode.AvalonEdit.TextEditor.Save(System.IO.Stream)"/> method uses the encoding specified in this property.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Save(System.IO.Stream)">
            <summary>
            Saves the text to the stream.
            </summary>
            <remarks>
            This method sets <see cref="P:ICSharpCode.AvalonEdit.TextEditor.IsModified"/> to false.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.Save(System.String)">
            <summary>
            Saves the text to the file.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.PreviewMouseHoverEvent">
            <summary>
            The PreviewMouseHover event.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.MouseHoverEvent">
            <summary>
            The MouseHover event.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.PreviewMouseHoverStoppedEvent">
            <summary>
            The PreviewMouseHoverStopped event.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.MouseHoverStoppedEvent">
            <summary>
            The MouseHoverStopped event.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditor.PreviewMouseHover">
            <summary>
            Occurs when the mouse has hovered over a fixed location for some time.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditor.MouseHover">
            <summary>
            Occurs when the mouse has hovered over a fixed location for some time.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditor.PreviewMouseHoverStopped">
            <summary>
            Occurs when the mouse had previously hovered but now started moving again.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditor.MouseHoverStopped">
            <summary>
            Occurs when the mouse had previously hovered but now started moving again.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.HorizontalScrollBarVisibilityProperty">
            <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.TextEditor.HorizontalScrollBarVisibility"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.HorizontalScrollBarVisibility">
            <summary>
            Gets/Sets the horizontal scroll bar visibility.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.TextEditor.VerticalScrollBarVisibilityProperty">
            <summary>
            Dependency property for <see cref="P:ICSharpCode.AvalonEdit.TextEditor.VerticalScrollBarVisibility"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditor.VerticalScrollBarVisibility">
            <summary>
            Gets/Sets the vertical scroll bar visibility.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.GetPositionFromPoint(System.Windows.Point)">
            <summary>
            Gets the text view position from a point inside the editor.
            </summary>
            <param name="point">The position, relative to top left
            corner of TextEditor control</param>
            <returns>The text view position, or null if the point is outside the document.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollToLine(System.Int32)">
            <summary>
            Scrolls to the specified line.
            This method requires that the TextEditor was already assigned a size (WPF layout must have run prior).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditor.ScrollTo(System.Int32,System.Int32)">
            <summary>
            Scrolls to the specified line/column.
            This method requires that the TextEditor was already assigned a size (WPF layout must have run prior).
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.TextEditorAutomationPeer">
            <summary>
            Exposes <see cref="T:ICSharpCode.AvalonEdit.TextEditor"/> to automation.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorAutomationPeer.#ctor(ICSharpCode.AvalonEdit.TextEditor)">
            <summary>
            Creates a new TextEditorAutomationPeer instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorAutomationPeer.GetAutomationControlTypeCore">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.ITextEditorComponent">
            <summary>
            Represents a text editor control (<see cref="T:ICSharpCode.AvalonEdit.TextEditor"/>, <see cref="T:ICSharpCode.AvalonEdit.Editing.TextArea"/>
            or <see cref="T:ICSharpCode.AvalonEdit.Rendering.TextView"/>).
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.ITextEditorComponent.Document">
            <summary>
            Gets the document being edited.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.ITextEditorComponent.DocumentChanged">
            <summary>
            Occurs when the Document property changes (when the text editor is connected to another
            document - not when the document content changes).
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.ITextEditorComponent.Options">
            <summary>
            Gets the options of the text editor.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.ITextEditorComponent.OptionChanged">
            <summary>
            Occurs when the Options property changes, or when an option inside the current option list
            changes.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.TextEditorOptions">
            <summary>
            A container for the text editor options.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorOptions.#ctor">
            <summary>
            Initializes an empty instance of TextEditorOptions.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorOptions.#ctor(ICSharpCode.AvalonEdit.TextEditorOptions)">
            <summary>
            Initializes a new instance of TextEditorOptions by copying all values
            from <paramref name="options"/> to the new instance.
            </summary>
        </member>
        <member name="E:ICSharpCode.AvalonEdit.TextEditorOptions.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorOptions.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the changed property.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorOptions.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowSpaces">
            <summary>
            Gets/Sets whether to show · for spaces.
            </summary>
            <remarks>The default value is <c>false</c>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowTabs">
            <summary>
            Gets/Sets whether to show » for tabs.
            </summary>
            <remarks>The default value is <c>false</c>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowEndOfLine">
            <summary>
            Gets/Sets whether to show ¶ at the end of lines.
            </summary>
            <remarks>The default value is <c>false</c>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowBoxForControlCharacters">
            <summary>
            Gets/Sets whether to show a box with the hex code for control characters.
            </summary>
            <remarks>The default value is <c>true</c>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.EnableHyperlinks">
            <summary>
            Gets/Sets whether to enable clickable hyperlinks in the editor.
            </summary>
            <remarks>The default value is <c>true</c>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.EnableEmailHyperlinks">
            <summary>
            Gets/Sets whether to enable clickable hyperlinks for e-mail addresses in the editor.
            </summary>
            <remarks>The default value is <c>true</c>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.RequireControlModifierForHyperlinkClick">
            <summary>
            Gets/Sets whether the user needs to press Control to click hyperlinks.
            The default value is true.
            </summary>
            <remarks>The default value is <c>true</c>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.IndentationSize">
            <summary>
            Gets/Sets the width of one indentation unit.
            </summary>
            <remarks>The default value is 4.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ConvertTabsToSpaces">
            <summary>
            Gets/Sets whether to use spaces for indentation instead of tabs.
            </summary>
            <remarks>The default value is <c>false</c>.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.IndentationString">
            <summary>
            Gets the text used for indentation.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorOptions.GetIndentationString(System.Int32)">
            <summary>
            Gets text required to indent from the specified <paramref name="column"/> to the next indentation level.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.CutCopyWholeLine">
            <summary>
            Gets/Sets whether copying without a selection copies the whole current line.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.AllowScrollBelowDocument">
            <summary>
            Gets/Sets whether the user can scroll below the bottom of the document.
            The default value is false; but it a good idea to set this property to true when using folding.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.WordWrapIndentation">
            <summary>
            Gets/Sets the indentation used for all lines except the first when word-wrapping.
            The default value is 0.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.InheritWordWrapIndentation">
            <summary>
            Gets/Sets whether the indentation is inherited from the first line when word-wrapping.
            The default value is true.
            </summary>
            <remarks>When combined with <see cref="P:ICSharpCode.AvalonEdit.TextEditorOptions.WordWrapIndentation"/>, the inherited indentation is added to the word wrap indentation.</remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.EnableRectangularSelection">
            <summary>
            Enables rectangular selection (press ALT and select a rectangle)
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.EnableTextDragDrop">
            <summary>
            Enable dragging text within the text area.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.EnableVirtualSpace">
            <summary>
            Gets/Sets whether the user can set the caret behind the line ending
            (into "virtual space").
            Note that virtual space is always used (independent from this setting)
            when doing rectangle selections.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.EnableImeSupport">
            <summary>
            Gets/Sets whether the support for Input Method Editors (IME)
            for non-alphanumeric scripts (Chinese, Japanese, Korean, ...) is enabled.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ShowColumnRuler">
            <summary>
            Gets/Sets whether the column ruler should be shown.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.ColumnRulerPosition">
            <summary>
            Gets/Sets where the column ruler should be shown.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.HighlightCurrentLine">
            <summary>
            Gets/Sets if current line should be shown.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.HideCursorWhileTyping">
            <summary>
            Gets/Sets if mouse cursor should be hidden while user is typing.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextEditorOptions.AllowToggleOverstrikeMode">
            <summary>
            Gets/Sets if the user is allowed to enable/disable overstrike mode.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.TextEditorWeakEventManager">
            <summary>
            Contains weak event managers for <see cref="T:ICSharpCode.AvalonEdit.ITextEditorComponent"/>.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.DocumentChanged">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.ITextEditorComponent.DocumentChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.DocumentChanged.StartListening(ICSharpCode.AvalonEdit.ITextEditorComponent)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.DocumentChanged.StopListening(ICSharpCode.AvalonEdit.ITextEditorComponent)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.OptionChanged">
            <summary>
            Weak event manager for the <see cref="E:ICSharpCode.AvalonEdit.ITextEditorComponent.OptionChanged"/> event.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.OptionChanged.StartListening(ICSharpCode.AvalonEdit.ITextEditorComponent)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextEditorWeakEventManager.OptionChanged.StopListening(ICSharpCode.AvalonEdit.ITextEditorComponent)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.TextViewPosition">
            <summary>
            Represents a text location with a visual column.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextViewPosition.Location">
            <summary>
            Gets/Sets Location.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextViewPosition.Line">
            <summary>
            Gets/Sets the line number.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextViewPosition.Column">
            <summary>
            Gets/Sets the (text) column number.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextViewPosition.VisualColumn">
            <summary>
            Gets/Sets the visual column number.
            Can be -1 (meaning unknown visual column).
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.TextViewPosition.IsAtEndOfLine">
            <summary>
            When word-wrap is enabled and a line is wrapped at a position where there is no space character;
            then both the end of the first TextLine and the beginning of the second TextLine
            refer to the same position in the document, and also have the same visual column.
            In this case, the IsAtEndOfLine property is used to distinguish between the two cases:
            the value <c>true</c> indicates that the position refers to the end of the previous TextLine;
            the value <c>false</c> indicates that the position refers to the beginning of the next TextLine.
            
            If this position is not at such a wrapping position, the value of this property has no effect.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new TextViewPosition instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new TextViewPosition instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.#ctor(ICSharpCode.AvalonEdit.Document.TextLocation,System.Int32)">
            <summary>
            Creates a new TextViewPosition instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.#ctor(ICSharpCode.AvalonEdit.Document.TextLocation)">
            <summary>
            Creates a new TextViewPosition instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.Equals(ICSharpCode.AvalonEdit.TextViewPosition)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.op_Equality(ICSharpCode.AvalonEdit.TextViewPosition,ICSharpCode.AvalonEdit.TextViewPosition)">
            <summary>
            Equality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.op_Inequality(ICSharpCode.AvalonEdit.TextViewPosition,ICSharpCode.AvalonEdit.TextViewPosition)">
            <summary>
            Inequality test.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.TextViewPosition.CompareTo(ICSharpCode.AvalonEdit.TextViewPosition)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.Boxes">
            <summary>
            Reuse the same instances for boxed booleans.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.CallbackOnDispose">
            <summary>
            Invokes an action when it is disposed.
            </summary>
            <remarks>
            This class ensures the callback is invoked at most once,
            even when Dispose is called on multiple threads.
            </remarks>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.BusyManager">
            <summary>
            This class is used to prevent stack overflows by representing a 'busy' flag
            that prevents reentrance when another call is running.
            However, using a simple 'bool busy' is not thread-safe, so we use a
            thread-static BusyManager.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.CharRope">
            <summary>
            Poor man's template specialization: extension methods for Rope&lt;char&gt;.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CharRope.Create(System.String)">
            <summary>
            Creates a new rope from the specified text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CharRope.ToString(ICSharpCode.AvalonEdit.Utils.Rope{System.Char},System.Int32,System.Int32)">
            <summary>
            Retrieves the text for a portion of the rope.
            Runs in O(lg N + M), where M=<paramref name="length"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CharRope.WriteTo(ICSharpCode.AvalonEdit.Utils.Rope{System.Char},System.IO.TextWriter,System.Int32,System.Int32)">
            <summary>
            Retrieves the text for a portion of the rope and writes it to the specified text writer.
            Runs in O(lg N + M), where M=<paramref name="length"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CharRope.AddText(ICSharpCode.AvalonEdit.Utils.Rope{System.Char},System.String)">
            <summary>
            Appends text to this rope.
            Runs in O(lg N + M).
            </summary>
            <exception cref="T:System.ArgumentNullException">newElements is null.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CharRope.InsertText(ICSharpCode.AvalonEdit.Utils.Rope{System.Char},System.Int32,System.String)">
            <summary>
            Inserts text into this rope.
            Runs in O(lg N + M).
            </summary>
            <exception cref="T:System.ArgumentNullException">newElements is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index or length is outside the valid range.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CharRope.IndexOfAny(ICSharpCode.AvalonEdit.Utils.Rope{System.Char},System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets the index of the first occurrence of any element in the specified array.
            </summary>
            <param name="rope">The target rope.</param>
            <param name="anyOf">Array of characters being searched.</param>
            <param name="startIndex">Start index of the search.</param>
            <param name="length">Length of the area to search.</param>
            <returns>The first index where any character was found; or -1 if no occurrence was found.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CharRope.IndexOf(ICSharpCode.AvalonEdit.Utils.Rope{System.Char},System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Gets the index of the first occurrence of the search text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CharRope.LastIndexOf(ICSharpCode.AvalonEdit.Utils.Rope{System.Char},System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Gets the index of the last occurrence of the search text.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1">
            <summary>
            A IList{T} implementation that has efficient insertion and removal (in O(lg n) time)
            and that saves memory by allocating only one node when a value is repeated in adjacent indices.
            Based on this "compression", it also supports efficient InsertRange/SetRange/RemoveRange operations.
            </summary>
            <remarks>
            Current memory usage: 5*IntPtr.Size + 12 + sizeof(T) per node.
            Use this class only if lots of adjacent values are identical (can share one node).
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Node.Predecessor">
            <summary>
            Gets the inorder predecessor of the node.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Node.Successor">
            <summary>
            Gets the inorder successor of the node.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates a new CompressingTreeList instance.
            </summary>
            <param name="equalityComparer">The equality comparer used for comparing consequtive values.
            A single node may be used to store the multiple values that are considered equal.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
            Creates a new CompressingTreeList instance.
            </summary>
            <param name="comparisonFunc">A function that checks two values for equality. If this
            function returns true, a single node may be used to store the two values.</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.InsertRange(System.Int32,System.Int32,`0)">
            <summary>
            Inserts <paramref name="item"/> <paramref name="count"/> times at position
            <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes <paramref name="count"/> items starting at position
            <paramref name="index"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.SetRange(System.Int32,System.Int32,`0)">
            <summary>
            Sets <paramref name="count"/> indices starting at <paramref name="index"/> to
            <paramref name="item"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Item(System.Int32)">
            <summary>
            Gets or sets an item by index.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.IndexOf(`0)">
            <summary>
            Gets the index of the specified <paramref name="item"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.GetStartOfRun(System.Int32)">
            <summary>
            Gets the the first index so that all values from the result index to <paramref name="index"/>
            are equal.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.GetEndOfRun(System.Int32)">
            <summary>
            Gets the first index after <paramref name="index"/> so that the value at the result index is not
            equal to the value at <paramref name="index"/>.
            That is, this method returns the exclusive end index of the run of equal values.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Transform(System.Func{`0,`0})">
            <summary>
            Applies the conversion function to all elements in this CompressingTreeList.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.TransformRange(System.Int32,System.Int32,System.Func{`0,`0})">
            <summary>
            Applies the conversion function to the elements in the specified range.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified <paramref name="item"/> at <paramref name="index"/>
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.RemoveAt(System.Int32)">
            <summary>
            Removes one item at <paramref name="index"/>
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Add(`0)">
            <summary>
            Adds the specified <paramref name="item"/> to the end of the list.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Clear">
            <summary>
            Removes all items from this list.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Contains(`0)">
            <summary>
            Gets whether this list contains the specified item.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies all items in this list to the specified array.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.Remove(`0)">
            <summary>
            Removes the specified item from this list.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.CompressingTreeList`1.GetEnumerator">
            <summary>
            Gets an enumerator for this list.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Utils.Constants.PixelPerPoint">
            <summary>
            Multiply with this constant to convert from points to device-independent pixels.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.DelayedEvents">
            <summary>
            Maintains a list of delayed events to raise.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.Deque`1">
            <summary>
            Double-ended queue.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.Deque`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.Clear">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.Deque`1.Item(System.Int32)">
            <summary>
            Gets/Sets an element inside the deque.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.PushBack(`0)">
            <summary>
            Adds an element to the end of the deque.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.PopBack">
            <summary>
            Pops an element from the end of the deque.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.PushFront(`0)">
            <summary>
            Adds an element to the front of the deque.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.PopFront">
            <summary>
            Pops an element from the end of the deque.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Deque`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.DocumentPrinter">
            <summary>
            Helps printing documents.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.DocumentPrinter.ConvertTextDocumentToBlock(ICSharpCode.AvalonEdit.Document.IDocument,ICSharpCode.AvalonEdit.Highlighting.IHighlighter)">
            <summary>
            Converts an IDocument to a Block and applies the provided highlighter.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.DocumentPrinter.ConvertTextDocumentToRichText(ICSharpCode.AvalonEdit.Document.IDocument,ICSharpCode.AvalonEdit.Highlighting.IHighlighter)">
            <summary>
            Converts an IDocument to a RichText and applies the provided highlighter.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.DocumentPrinter.CreateFlowDocumentForEditor(ICSharpCode.AvalonEdit.TextEditor)">
            <summary>
            Creates a flow document from the editor's contents.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.Empty`1">
            <summary>
            Provides immutable empty list instances.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.Epsilon">
            <summary>
            Epsilon used for <c>IsClose()</c> implementations.
            We can use up quite a few digits in front of the decimal point (due to visual positions being relative to document origin),
            and there's no need to be too accurate (we're dealing with pixels here),
            so we will use the value 0.01.
            Previosly we used 1e-8 but that was causing issues:
            http://community.sharpdevelop.net/forums/t/16048.aspx
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.IsClose(System.Double,System.Double)">
            <summary>
            Returns true if the doubles are close (difference smaller than 0.01).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.IsClose(System.Windows.Size,System.Windows.Size)">
            <summary>
            Returns true if the doubles are close (difference smaller than 0.01).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.IsClose(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Returns true if the doubles are close (difference smaller than 0.01).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.CoerceValue(System.Double,System.Double,System.Double)">
            <summary>
            Forces the value to stay between mininum and maximum.
            </summary>
            <returns>minimum, if value is less than minimum.
            Maximum, if value is greater than maximum.
            Otherwise, value.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.CoerceValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Forces the value to stay between mininum and maximum.
            </summary>
            <returns>minimum, if value is less than minimum.
            Maximum, if value is greater than maximum.
            Otherwise, value.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.CreateTypeface(System.Windows.FrameworkElement)">
            <summary>
            Creates typeface from the framework element.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.Sequence``1(``0)">
            <summary>
            Creates an IEnumerable with a single value.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.GetAttributeOrNull(System.Xml.XmlElement,System.String)">
            <summary>
            Gets the value of the attribute, or null if the attribute does not exist.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.GetBoolAttribute(System.Xml.XmlElement,System.String)">
            <summary>
            Gets the value of the attribute as boolean, or null if the attribute does not exist.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ExtensionMethods.GetBoolAttribute(System.Xml.XmlReader,System.String)">
            <summary>
            Gets the value of the attribute as boolean, or null if the attribute does not exist.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.FileReader">
            <summary>
            Class that can open text files with auto-detection of the encoding.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.IsUnicode(System.Text.Encoding)">
            <summary>
            Gets if the given encoding is a Unicode encoding (UTF).
            </summary>
            <remarks>
            Returns true for UTF-7, UTF-8, UTF-16 LE, UTF-16 BE, UTF-32 LE and UTF-32 BE.
            Returns false for all other encodings.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.ReadFileContent(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads the content of the given stream.
            </summary>
            <param name="stream">The stream to read.
            The stream must support seeking and must be positioned at its beginning.</param>
            <param name="defaultEncoding">The encoding to use if the encoding cannot be auto-detected.</param>
            <returns>The file content as string.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.ReadFileContent(System.String,System.Text.Encoding)">
            <summary>
            Reads the content of the file.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="defaultEncoding">The encoding to use if the encoding cannot be auto-detected.</param>
            <returns>The file content as string.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.OpenFile(System.String,System.Text.Encoding)">
            <summary>
            Opens the specified file for reading.
            </summary>
            <param name="fileName">The file to open.</param>
            <param name="defaultEncoding">The encoding to use if the encoding cannot be auto-detected.</param>
            <returns>Returns a StreamReader that reads from the stream. Use
            <see cref="P:System.IO.StreamReader.CurrentEncoding"/> to get the encoding that was used.</returns>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.FileReader.OpenStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Opens the specified stream for reading.
            </summary>
            <param name="stream">The stream to open.</param>
            <param name="defaultEncoding">The encoding to use if the encoding cannot be auto-detected.</param>
            <returns>Returns a StreamReader that reads from the stream. Use
            <see cref="P:System.IO.StreamReader.CurrentEncoding"/> to get the encoding that was used.</returns>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.IFreezable.IsFrozen">
            <summary>
            Gets if this instance is frozen. Frozen instances are immutable and thus thread-safe.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.IFreezable.Freeze">
            <summary>
            Freezes this instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.FreezableHelper.GetFrozenClone``1(``0)">
            <summary>
            If the item is not frozen, this method creates and returns a frozen clone.
            If the item is already frozen, it is returned without creating a clone.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.AbstractFreezable.IsFrozen">
            <summary>
            Gets if this instance is frozen. Frozen instances are immutable and thus thread-safe.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.AbstractFreezable.Freeze">
            <summary>
            Freezes this instance.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1">
            <summary>
            An immutable stack.
            
            Using 'foreach' on the stack will return the items from top to bottom (in the order they would be popped).
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.Empty">
            <summary>
            Gets the empty stack instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.Push(`0)">
            <summary>
            Pushes an item on the stack. This does not modify the stack itself, but returns a new
            one with the value pushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.Peek">
            <summary>
            Gets the item on the top of the stack.
            </summary>
            <exception cref="T:System.InvalidOperationException">The stack is empty.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.PeekOrDefault">
            <summary>
            Gets the item on the top of the stack.
            Returns <c>default(T)</c> if the stack is empty.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.Pop">
            <summary>
            Gets the stack with the top item removed.
            </summary>
            <exception cref="T:System.InvalidOperationException">The stack is empty.</exception>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.IsEmpty">
            <summary>
            Gets if this stack is empty.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the stack top-to-bottom.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ImmutableStack`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.NullSafeCollection`1">
            <summary>
            A collection that cannot contain null values.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.NullSafeCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.NullSafeCollection`1.SetItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.ObserveAddRemoveCollection`1">
            <summary>
            A collection where adding and removing items causes a callback.
            It is valid for the onAdd callback to throw an exception - this will prevent the new item from
            being added to the collection.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ObserveAddRemoveCollection`1.#ctor(System.Action{`0},System.Action{`0})">
            <summary>
            Creates a new ObserveAddRemoveCollection using the specified callbacks.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ObserveAddRemoveCollection`1.ClearItems">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ObserveAddRemoveCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ObserveAddRemoveCollection`1.RemoveItem(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ObserveAddRemoveCollection`1.SetItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers">
            <summary>
            Contains static helper methods for aligning stuff on a whole number of pixels.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers.GetPixelSize(System.Windows.Media.Visual)">
            <summary>
            Gets the pixel size on the screen containing visual.
            This method does not take transforms on visual into account.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers.PixelAlign(System.Double,System.Double)">
            <summary>
            Aligns <paramref name="value"/> on the next middle of a pixel.
            </summary>
            <param name="value">The value that should be aligned</param>
            <param name="pixelSize">The size of one pixel</param>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers.PixelAlign(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Aligns the borders of rect on the middles of pixels.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers.Round(System.Windows.Point,System.Windows.Size)">
            <summary>
            Rounds <paramref name="point"/> to whole number of pixels.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers.Round(System.Windows.Rect,System.Windows.Size)">
            <summary>
            Rounds val to whole number of pixels.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers.Round(System.Double,System.Double)">
            <summary>
            Rounds <paramref name="value"/> to a whole number of pixels.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PixelSnapHelpers.RoundToOdd(System.Double,System.Double)">
            <summary>
            Rounds <paramref name="value"/> to an whole odd number of pixels.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.PlainRichTextWriter">
            <summary>
            RichTextWriter implementation that writes plain text only
            and ignores all formatted spans.
            </summary>
        </member>
        <member name="F:ICSharpCode.AvalonEdit.Utils.PlainRichTextWriter.textWriter">
            <summary>
            The text writer that was passed to the PlainRichTextWriter constructor.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PlainRichTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates a new PlainRichTextWriter instance that writes the text to the specified text writer.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.PlainRichTextWriter.IndentationString">
            <summary>
            Gets/Sets the string used to indent by one level.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PlainRichTextWriter.BeginUnhandledSpan">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PlainRichTextWriter.EndSpan">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PlainRichTextWriter.WriteIndentationIfNecessary">
            <summary>
            Writes the indentation, if necessary.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PlainRichTextWriter.AfterWrite">
            <summary>
            Is called after a write operation.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PlainRichTextWriter.Write(System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PlainRichTextWriter.Indent">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PlainRichTextWriter.Unindent">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.PlainRichTextWriter.Encoding">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.PlainRichTextWriter.FormatProvider">
            <inheritdoc/>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.PlainRichTextWriter.NewLine">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.PropertyChangedWeakEventManager">
            <summary>
            WeakEventManager for INotifyPropertyChanged.PropertyChanged.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PropertyChangedWeakEventManager.StartListening(System.ComponentModel.INotifyPropertyChanged)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.PropertyChangedWeakEventManager.StopListening(System.ComponentModel.INotifyPropertyChanged)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.RichTextWriter">
            <summary>
            A text writer that supports creating spans of highlighted text.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RichTextWriter.BeginUnhandledSpan">
            <summary>
            Gets called by the RichTextWriter base class when a BeginSpan() method
            that is not overwritten gets called.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RichTextWriter.Write(ICSharpCode.AvalonEdit.Highlighting.RichText)">
            <summary>
            Writes the RichText instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RichTextWriter.Write(ICSharpCode.AvalonEdit.Highlighting.RichText,System.Int32,System.Int32)">
            <summary>
            Writes the RichText instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RichTextWriter.BeginSpan(System.Windows.Media.Color)">
            <summary>
            Begin a colored span.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RichTextWriter.BeginSpan(System.Windows.FontWeight)">
            <summary>
            Begin a span with modified font weight.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RichTextWriter.BeginSpan(System.Windows.FontStyle)">
            <summary>
            Begin a span with modified font style.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RichTextWriter.BeginSpan(System.Windows.Media.FontFamily)">
            <summary>
            Begin a span with modified font family.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RichTextWriter.BeginSpan(ICSharpCode.AvalonEdit.Highlighting.HighlightingColor)">
            <summary>
            Begin a highlighted span.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RichTextWriter.BeginHyperlinkSpan(System.Uri)">
            <summary>
            Begin a span that links to the specified URI.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RichTextWriter.EndSpan">
            <summary>
            Marks the end of the current span.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RichTextWriter.Indent">
            <summary>
            Increases the indentation level.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RichTextWriter.Unindent">
            <summary>
            Decreases the indentation level.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.Rope`1">
            <summary>
            A kind of List&lt;T&gt;, but more efficient for random insertions/removal.
            Also has cheap Clone() and SubRope() implementations.
            </summary>
            <remarks>
            This class is not thread-safe: multiple concurrent write operations or writes concurrent to reads have undefined behaviour.
            Concurrent reads, however, are safe.
            However, clones of a rope are safe to use on other threads even though they share data with the original rope.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.#ctor">
            <summary>
            Creates a new rope representing the empty string.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a rope from the specified input.
            This operation runs in O(N).
            </summary>
            <exception cref="T:System.ArgumentNullException">input is null.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Creates a rope from a part of the array.
            This operation runs in O(N).
            </summary>
            <exception cref="T:System.ArgumentNullException">input is null.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.#ctor(System.Int32,System.Func{ICSharpCode.AvalonEdit.Utils.Rope{`0}})">
            <summary>
            Creates a new rope that lazily initalizes its content.
            </summary>
            <param name="length">The length of the rope that will be lazily loaded.</param>
            <param name="initializer">
            The callback that provides the content for this rope.
            <paramref name="initializer"/> will be called exactly once when the content of this rope is first requested.
            It must return a rope with the specified length.
            Because the initializer function is not called when a rope is cloned, and such clones may be used on another threads,
            it is possible for the initializer callback to occur on any thread.
            </param>
            <remarks>
            Any modifications inside the rope will also cause the content to be initialized.
            However, insertions at the beginning and the end, as well as inserting this rope into another or
            using the <see cref="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Concat(ICSharpCode.AvalonEdit.Utils.Rope{`0},ICSharpCode.AvalonEdit.Utils.Rope{`0})"/> method, allows constructions of larger ropes where parts are
            lazily loaded.
            However, even methods like Concat may sometimes cause the initializer function to be called, e.g. when
            two short ropes are concatenated.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Clone">
            <summary>
            Clones the rope.
            This operation runs in linear time to the number of rope nodes touched since the last clone was created.
            If you count the per-node cost to the operation modifying the rope (doing this doesn't increase the complexity of the modification operations);
            the remainder of Clone() runs in O(1).
            </summary>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Clear">
            <summary>
            Resets the rope to an empty list.
            Runs in O(1).
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.Rope`1.Length">
            <summary>
            Gets the length of the rope.
            Runs in O(1).
            </summary>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.Rope`1.Count">
            <summary>
            Gets the length of the rope.
            Runs in O(1).
            </summary>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.InsertRange(System.Int32,ICSharpCode.AvalonEdit.Utils.Rope{`0})">
            <summary>
            Inserts another rope into this rope.
            Runs in O(lg N + lg M), plus a per-node cost as if <c>newElements.Clone()</c> was called.
            </summary>
            <exception cref="T:System.ArgumentNullException">newElements is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index or length is outside the valid range.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts new elemetns into this rope.
            Runs in O(lg N + M), where N is the length of this rope and M is the number of new elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">newElements is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index or length is outside the valid range.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.InsertRange(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Inserts new elements into this rope.
            Runs in O(lg N + M), where N is the length of this rope and M is the number of new elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">newElements is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index or length is outside the valid range.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Appends multiple elements to the end of this rope.
            Runs in O(lg N + M), where N is the length of this rope and M is the number of new elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">newElements is null.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.AddRange(ICSharpCode.AvalonEdit.Utils.Rope{`0})">
            <summary>
            Appends another rope to the end of this rope.
            Runs in O(lg N + lg M), plus a per-node cost as if <c>newElements.Clone()</c> was called.
            </summary>
            <exception cref="T:System.ArgumentNullException">newElements is null.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.AddRange(`0[],System.Int32,System.Int32)">
            <summary>
            Appends new elements to the end of this rope.
            Runs in O(lg N + M), where N is the length of this rope and M is the number of new elements.
            </summary>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the rope.
            Runs in O(lg N).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.SetRange(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of the specified array into the rope, overwriting existing elements.
            Runs in O(lg N + M).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a new rope and initializes it with a part of this rope.
            Runs in O(lg N) plus a per-node cost as if <c>this.Clone()</c> was called.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is outside the valid range.</exception>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Concat(ICSharpCode.AvalonEdit.Utils.Rope{`0},ICSharpCode.AvalonEdit.Utils.Rope{`0})">
            <summary>
            Concatenates two ropes. The input ropes are not modified.
            Runs in O(lg N + lg M).
            </summary>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Concat(ICSharpCode.AvalonEdit.Utils.Rope{`0}[])">
            <summary>
            Concatenates multiple ropes. The input ropes are not modified.
            </summary>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.Rope`1.Item(System.Int32)">
            <summary>
            Gets/Sets a single character.
            Runs in O(lg N) for random access. Sequential read-only access benefits from a special optimization and runs in amortized O(1).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset is outside the valid range (0 to Length-1).</exception>
            <remarks>
            The getter counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.ToString">
            <summary>
            Creates a string from the rope. Runs in O(N).
            </summary>
            <returns>A string consisting of all elements in the rope as comma-separated list in {}.
            As a special case, Rope&lt;char&gt; will return its contents as string without any additional separators or braces,
            so it can be used like StringBuilder.ToString().</returns>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.IndexOf(`0)">
            <summary>
            Finds the first occurance of item.
            Runs in O(N).
            </summary>
            <returns>The index of the first occurance of item, or -1 if it cannot be found.</returns>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Gets the index of the first occurrence the specified item.
            </summary>
            <param name="item">Item to search for.</param>
            <param name="startIndex">Start index of the search.</param>
            <param name="count">Length of the area to search.</param>
            <returns>The first index where the item was found; or -1 if no occurrence was found.</returns>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.LastIndexOf(`0)">
            <summary>
            Gets the index of the last occurrence of the specified item in this rope.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Gets the index of the last occurrence of the specified item in this rope.
            </summary>
            <param name="item">The search item</param>
            <param name="startIndex">Start index of the area to search.</param>
            <param name="count">Length of the area to search.</param>
            <returns>The last index where the item was found; or -1 if no occurrence was found.</returns>
            <remarks>The search proceeds backwards from (startIndex+count) to startIndex.
            This is different than the meaning of the parameters on Array.LastIndexOf!</remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index in the rope.
            Runs in O(lg N).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.RemoveAt(System.Int32)">
            <summary>
            Removes a single item from the rope.
            Runs in O(lg N).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Add(`0)">
            <summary>
            Appends the item at the end of the rope.
            Runs in O(lg N).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Contains(`0)">
            <summary>
            Searches the item in the rope.
            Runs in O(N).
            </summary>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the whole content of the rope into the specified array.
            Runs in O(N).
            </summary>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies the a part of the rope into the specified array.
            Runs in O(lg N + M).
            </summary>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Remove(`0)">
            <summary>
            Removes the first occurance of an item from the rope.
            Runs in O(N).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.GetEnumerator">
            <summary>
            Retrieves an enumerator to iterate through the rope.
            The enumerator will reflect the state of the rope from the GetEnumerator() call, further modifications
            to the rope will not be visible to the enumerator.
            </summary>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.ToArray">
            <summary>
            Creates an array and copies the contents of the rope into it.
            Runs in O(N).
            </summary>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Rope`1.ToArray(System.Int32,System.Int32)">
            <summary>
            Creates an array and copies the contents of the rope into it.
            Runs in O(N).
            </summary>
            <remarks>
            This method counts as a read access and may be called concurrently to other read accesses.
            </remarks>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RopeNode`1.Rebalance">
            <summary>
            Balances this node and recomputes the 'height' field.
            This method assumes that the children of this node are already balanced and have an up-to-date 'height' value.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RopeNode`1.StoreElements(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies from the array to this node.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RopeNode`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies from this node to the array.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RopeNode`1.SplitAfter(System.Int32)">
            <summary>
            Splits this leaf node at offset and returns a new node with the part of the text after offset.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RopeNode`1.GetContentNode">
            <summary>
            Gets the root node of the subtree from a lazily evaluated function node.
            Such nodes are always marked as shared.
            GetContentNode() will return either a Concat or Leaf node, never another FunctionNode.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.RopeTextReader">
            <summary>
            TextReader implementation that reads text from a rope.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RopeTextReader.#ctor(ICSharpCode.AvalonEdit.Utils.Rope{System.Char})">
            <summary>
            Creates a new RopeTextReader.
            Internally, this method creates a Clone of the rope; so the text reader will always read through the old
            version of the rope if it is modified. <seealso cref="M:ICSharpCode.AvalonEdit.Utils.Rope`1.Clone"/>
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RopeTextReader.Peek">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RopeTextReader.Read">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.RopeTextReader.Read(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.StringSegment">
            <summary>
            Represents a string with a segment.
            Similar to System.ArraySegment&lt;T&gt;, but for strings instead of arrays.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.StringSegment.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new StringSegment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.StringSegment.#ctor(System.String)">
            <summary>
            Creates a new StringSegment.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.StringSegment.Text">
            <summary>
            Gets the string used for this segment.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.StringSegment.Offset">
            <summary>
            Gets the start offset of the segment with the text.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.StringSegment.Count">
            <summary>
            Gets the length of the segment.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.StringSegment.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.StringSegment.Equals(ICSharpCode.AvalonEdit.Utils.StringSegment)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.StringSegment.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.StringSegment.op_Equality(ICSharpCode.AvalonEdit.Utils.StringSegment,ICSharpCode.AvalonEdit.Utils.StringSegment)">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.StringSegment.op_Inequality(ICSharpCode.AvalonEdit.Utils.StringSegment,ICSharpCode.AvalonEdit.Utils.StringSegment)">
            <summary>
            Inequality operator.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.TextFormatterFactory">
            <summary>
            Creates TextFormatter instances that with the correct TextFormattingMode, if running on .NET 4.0.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.TextFormatterFactory.Create(System.Windows.DependencyObject)">
            <summary>
            Creates a <see cref="T:System.Windows.Media.TextFormatting.TextFormatter"/> using the formatting mode used by the specified owner object.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.TextFormatterFactory.PropertyChangeAffectsTextFormatter(System.Windows.DependencyProperty)">
            <summary>
            Returns whether the specified dependency property affects the text formatter creation.
            Controls should re-create their text formatter for such property changes.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.TextFormatterFactory.CreateFormattedText(System.Windows.FrameworkElement,System.String,System.Windows.Media.Typeface,System.Nullable{System.Double},System.Windows.Media.Brush)">
            <summary>
            Creates formatted text.
            </summary>
            <param name="element">The owner element. The text formatter setting are read from this element.</param>
            <param name="text">The text.</param>
            <param name="typeface">The typeface to use. If this parameter is null, the typeface of the <paramref name="element"/> will be used.</param>
            <param name="emSize">The font size. If this parameter is null, the font size of the <paramref name="element"/> will be used.</param>
            <param name="foreground">The foreground color. If this parameter is null, the foreground of the <paramref name="element"/> will be used.</param>
            <returns>A FormattedText object using the specified settings.</returns>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.ThrowUtil">
            <summary>
            Contains exception-throwing helper methods.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.ThrowUtil.CheckNotNull``1(``0,System.String)">
            <summary>
            Throws an ArgumentNullException if <paramref name="val"/> is null; otherwise
            returns val.
            </summary>
            <example>
            Use this method to throw an ArgumentNullException when using parameters for base
            constructor calls.
            <code>
            public VisualLineText(string text) : base(ThrowUtil.CheckNotNull(text, "text").Length)
            </code>
            </example>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2">
            <summary>
            WeakEventManager with AddListener/RemoveListener and CurrentManager implementation.
            Helps implementing the WeakEventManager pattern with less code.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.#ctor">
            <summary>
            Creates a new WeakEventManagerBase instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.AddListener(`1,System.Windows.IWeakEventListener)">
            <summary>
            Adds a weak event listener.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.RemoveListener(`1,System.Windows.IWeakEventListener)">
            <summary>
            Removes a weak event listener.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.StartListening(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.StopListening(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.StartListening(`1)">
            <summary>
            Attaches the event handler.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.StopListening(`1)">
            <summary>
            Detaches the event handler.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.WeakEventManagerBase`2.CurrentManager">
            <summary>
            Gets the current manager.
            </summary>
        </member>
        <member name="T:ICSharpCode.AvalonEdit.Utils.Win32">
            <summary>
            Wrapper around Win32 functions.
            </summary>
        </member>
        <member name="P:ICSharpCode.AvalonEdit.Utils.Win32.CaretBlinkTime">
            <summary>
            Gets the caret blink time.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Win32.CreateCaret(System.Windows.Media.Visual,System.Windows.Size)">
            <summary>
            Creates an invisible Win32 caret for the specified Visual with the specified size (coordinates local to the owner visual).
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Win32.SetCaretPosition(System.Windows.Media.Visual,System.Windows.Point)">
            <summary>
            Sets the position of the caret previously created using <see cref="M:ICSharpCode.AvalonEdit.Utils.Win32.CreateCaret(System.Windows.Media.Visual,System.Windows.Size)"/>. position is relative to the owner visual.
            </summary>
        </member>
        <member name="M:ICSharpCode.AvalonEdit.Utils.Win32.DestroyCaret">
            <summary>
            Destroys the caret previously created using <see cref="M:ICSharpCode.AvalonEdit.Utils.Win32.CreateCaret(System.Windows.Media.Visual,System.Windows.Size)"/>.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
